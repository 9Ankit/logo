{"version":3,"sources":["ng://n-sheet/lib/n-sheet.service.ts","ng://n-sheet/lib/n-sheet.directive.ts","ng://n-sheet/lib/n-sheet.module.ts"],"names":["NSheetService","http","this","prototype","getSheet","sheetOptions","htmlContent","_this","Promise","resolve","reject","excelAsHtml","hasOwnProperty","retPure","httpMethod","toLowerCase","trim","body","executeCallback","then","res","url","subscribe","response","error","catch","err","preHttpRequestCallback","Injectable","args","providedIn","HttpClient","NSheetDirective","sheetService","el","onsuccess","EventEmitter","onerror","ngOnInit","success","emit","length","Array","isArray","doAppend","nativeElement","innerHTML","fragment","document","createRange","createContextualFragment","appendChild","Directive","selector","ElementRef","Input","Output","NSheetModule","NgModule","declarations","imports","HttpClientModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { post } from 'selenium-webdriver/http';\nimport { promise } from 'protractor';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class NSheetService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  public getSheet(sheetOptions?, htmlContent?) {\n    return new Promise((resolve, reject) => {\n      if (typeof sheetOptions === 'object') {\n        if (sheetOptions.hasOwnProperty('url')) {\n          delete sheetOptions.retPure;\n          sheetOptions.httpMethod = (sheetOptions.hasOwnProperty('httpMethod') && (sheetOptions.httpMethod.toLowerCase().trim() === 'get' || sheetOptions.httpMethod.toLowerCase().trim() === 'put')) ? sheetOptions.httpMethod.toLowerCase().trim() : 'post';\n          var body = (sheetOptions.httpMethod.toLowerCase().trim() === 'get') ? {} : sheetOptions;\n          this.executeCallback(sheetOptions).then(res => {\n            this.http[sheetOptions.httpMethod.toLowerCase().trim()](sheetOptions.url, body).subscribe(response => {\n              return resolve(response);\n            }, error => {\n              return reject(error);\n            });\n          }).catch(err => {\n            return reject(err);\n          });\n        } else {\n          return reject('No url');\n        }\n      } else if (htmlContent) {\n        return resolve({ excelAsHtml: htmlContent });\n      } else {\n        return reject('Please specify correct values for sheetOptions / htmlContent');\n      }\n    });\n  }\n\n  executeCallback(sheetOptions) {\n    return new Promise((resolve, reject) => {\n      if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (sheetOptions.preHttpRequestCallback instanceof Promise)) {\n        sheetOptions.preHttpRequestCallback.then(res => {\n          return resolve();\n        }).catch(err => {\n          return reject('Promise function returned a reject');\n        });\n      } else if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (typeof sheetOptions.preHttpRequestCallback === 'boolean')) { \n        if(sheetOptions.preHttpRequestCallback === true) {\n          return resolve(); \n        } else {\n          return reject('Boolean function returned a false');\n        }\n      } else if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (typeof sheetOptions.preHttpRequestCallback === 'function')) { \n          if(sheetOptions.preHttpRequestCallback() === true) {\n            return resolve(); \n          } else {\n            return reject('Callback function either returned a false or did not return a boolean value');\n          }\n      } else {\n        return resolve();\n      }\n    });\n  }\n\n}","import { Directive, Input, Output, EventEmitter, OnInit, ElementRef } from '@angular/core';\nimport { NSheetService } from './n-sheet.service';\nimport { HttpClient } from '@angular/common/http';\n\n\n@Directive({\n  selector: '[n-sheet]'\n})\nexport class NSheetDirective implements OnInit {\n  @Input() sheetOptions;\n  @Input() htmlContent;\n  @Output() onsuccess: EventEmitter<any> = new EventEmitter();\n  @Output() onerror: EventEmitter<any> = new EventEmitter();\n\n  constructor(private sheetService: NSheetService, private http: HttpClient, private el: ElementRef) { }\n\n  ngOnInit() {\n    this.getSheet()\n    .then(success => this.onsuccess.emit(success))\n    .catch(error => this.onerror.emit(error));\n   }\n\n  getSheet(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.sheetService.getSheet(this.sheetOptions,this.htmlContent).then(res => {\n        if(res.hasOwnProperty('excelAsHtml') && res['excelAsHtml'].length > 0 && !Array.isArray(res['excelAsHtml'])) {\n          if(!(typeof this.sheetOptions === 'object' && this.sheetOptions.hasOwnProperty('doAppend') && this.sheetOptions.doAppend === true)) {\n            this.el.nativeElement.innerHTML = \"\";\n          }\n          const fragment = document.createRange().createContextualFragment(res['excelAsHtml']);\n          this.el.nativeElement.appendChild(fragment);\n          return resolve(res);\n        } else {\n          return reject(res);\n        }\n      }).catch(err => reject(err));\n    });\n  }\n\n}","import { NgModule } from '@angular/core';\nimport { NSheetDirective } from './n-sheet.directive';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [NSheetDirective],\n  imports: [HttpClientModule \n  ],\n  exports: [NSheetDirective]\n})\nexport class NSheetModule { }\n"]}
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('n-sheet', ['exports', '@angular/core', '@angular/common/http'], factory) :
    (factory((global['n-sheet'] = {}),global.ng.core,global.ng.common.http));
}(this, (function (exports,i0,i1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NSheetService = /** @class */ (function () {
        function NSheetService(http) {
            this.http = http;
        }
        /**
         * @param {?=} sheetOptions
         * @param {?=} htmlContent
         * @return {?}
         */
        NSheetService.prototype.getSheet = /**
         * @param {?=} sheetOptions
         * @param {?=} htmlContent
         * @return {?}
         */
            function (sheetOptions, htmlContent) {
                var _this = this;
                return new Promise(( /**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */function (resolve, reject) {
                    if (typeof sheetOptions === 'object') {
                        if (sheetOptions.hasOwnProperty('url')) {
                            delete sheetOptions.retPure;
                            sheetOptions.httpMethod = (sheetOptions.hasOwnProperty('httpMethod') && (sheetOptions.httpMethod.toLowerCase().trim() === 'get' || sheetOptions.httpMethod.toLowerCase().trim() === 'put')) ? sheetOptions.httpMethod.toLowerCase().trim() : 'post';
                            /** @type {?} */
                            var body = (sheetOptions.httpMethod.toLowerCase().trim() === 'get') ? {} : sheetOptions;
                            _this.executeCallback(sheetOptions).then(( /**
                             * @param {?} res
                             * @return {?}
                             */function (res) {
                                _this.http[sheetOptions.httpMethod.toLowerCase().trim()](sheetOptions.url, body).subscribe(( /**
                                 * @param {?} response
                                 * @return {?}
                                 */function (response) {
                                    return resolve(response);
                                }), ( /**
                                 * @param {?} error
                                 * @return {?}
                                 */function (error) {
                                    return reject(error);
                                }));
                            })).catch(( /**
                             * @param {?} err
                             * @return {?}
                             */function (err) {
                                return reject(err);
                            }));
                        }
                        else {
                            return reject('No url');
                        }
                    }
                    else if (htmlContent) {
                        return resolve({ excelAsHtml: htmlContent });
                    }
                    else {
                        return reject('Please specify correct values for sheetOptions / htmlContent');
                    }
                }));
            };
        /**
         * @param {?} sheetOptions
         * @return {?}
         */
        NSheetService.prototype.executeCallback = /**
         * @param {?} sheetOptions
         * @return {?}
         */
            function (sheetOptions) {
                return new Promise(( /**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */function (resolve, reject) {
                    if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (sheetOptions.preHttpRequestCallback instanceof Promise)) {
                        sheetOptions.preHttpRequestCallback.then(( /**
                         * @param {?} res
                         * @return {?}
                         */function (res) {
                            return resolve();
                        })).catch(( /**
                         * @param {?} err
                         * @return {?}
                         */function (err) {
                            return reject('Promise function returned a reject');
                        }));
                    }
                    else if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (typeof sheetOptions.preHttpRequestCallback === 'boolean')) {
                        if (sheetOptions.preHttpRequestCallback === true) {
                            return resolve();
                        }
                        else {
                            return reject('Boolean function returned a false');
                        }
                    }
                    else if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (typeof sheetOptions.preHttpRequestCallback === 'function')) {
                        if (sheetOptions.preHttpRequestCallback() === true) {
                            return resolve();
                        }
                        else {
                            return reject('Callback function either returned a false or did not return a boolean value');
                        }
                    }
                    else {
                        return resolve();
                    }
                }));
            };
        NSheetService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        NSheetService.ctorParameters = function () {
            return [
                { type: i1.HttpClient }
            ];
        };
        /** @nocollapse */ NSheetService.ngInjectableDef = i0.defineInjectable({ factory: function NSheetService_Factory() { return new NSheetService(i0.inject(i1.HttpClient)); }, token: NSheetService, providedIn: "root" });
        return NSheetService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NSheetDirective = /** @class */ (function () {
        function NSheetDirective(sheetService, http, el) {
            this.sheetService = sheetService;
            this.http = http;
            this.el = el;
            this.onsuccess = new i0.EventEmitter();
            this.onerror = new i0.EventEmitter();
        }
        /**
         * @return {?}
         */
        NSheetDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.getSheet()
                    .then(( /**
             * @param {?} success
             * @return {?}
             */function (success) { return _this.onsuccess.emit(success); }))
                    .catch(( /**
             * @param {?} error
             * @return {?}
             */function (error) { return _this.onerror.emit(error); }));
            };
        /**
         * @return {?}
         */
        NSheetDirective.prototype.getSheet = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(( /**
                 * @param {?} resolve
                 * @param {?} reject
                 * @return {?}
                 */function (resolve, reject) {
                    _this.sheetService.getSheet(_this.sheetOptions, _this.htmlContent).then(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) {
                        if (res.hasOwnProperty('excelAsHtml') && res['excelAsHtml'].length > 0 && !Array.isArray(res['excelAsHtml'])) {
                            if (!(typeof _this.sheetOptions === 'object' && _this.sheetOptions.hasOwnProperty('doAppend') && _this.sheetOptions.doAppend === true)) {
                                _this.el.nativeElement.innerHTML = "";
                            }
                            /** @type {?} */
                            var fragment = document.createRange().createContextualFragment(res['excelAsHtml']);
                            _this.el.nativeElement.appendChild(fragment);
                            return resolve(res);
                        }
                        else {
                            return reject(res);
                        }
                    })).catch(( /**
                     * @param {?} err
                     * @return {?}
                     */function (err) { return reject(err); }));
                }));
            };
        NSheetDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[n-sheet]'
                    },] }
        ];
        /** @nocollapse */
        NSheetDirective.ctorParameters = function () {
            return [
                { type: NSheetService },
                { type: i1.HttpClient },
                { type: i0.ElementRef }
            ];
        };
        NSheetDirective.propDecorators = {
            sheetOptions: [{ type: i0.Input }],
            htmlContent: [{ type: i0.Input }],
            onsuccess: [{ type: i0.Output }],
            onerror: [{ type: i0.Output }]
        };
        return NSheetDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NSheetModule = /** @class */ (function () {
        function NSheetModule() {
        }
        NSheetModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NSheetDirective],
                        imports: [i1.HttpClientModule
                        ],
                        exports: [NSheetDirective]
                    },] }
        ];
        return NSheetModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NSheetService = NSheetService;
    exports.NSheetDirective = NSheetDirective;
    exports.NSheetModule = NSheetModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=n-sheet.umd.js.map
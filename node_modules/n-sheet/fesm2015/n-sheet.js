import { Injectable, Directive, Input, Output, EventEmitter, ElementRef, NgModule, defineInjectable, inject } from '@angular/core';
import { HttpClient, HttpClientModule } from '@angular/common/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NSheetService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?=} sheetOptions
     * @param {?=} htmlContent
     * @return {?}
     */
    getSheet(sheetOptions, htmlContent) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (typeof sheetOptions === 'object') {
                if (sheetOptions.hasOwnProperty('url')) {
                    delete sheetOptions.retPure;
                    sheetOptions.httpMethod = (sheetOptions.hasOwnProperty('httpMethod') && (sheetOptions.httpMethod.toLowerCase().trim() === 'get' || sheetOptions.httpMethod.toLowerCase().trim() === 'put')) ? sheetOptions.httpMethod.toLowerCase().trim() : 'post';
                    /** @type {?} */
                    var body = (sheetOptions.httpMethod.toLowerCase().trim() === 'get') ? {} : sheetOptions;
                    this.executeCallback(sheetOptions).then((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => {
                        this.http[sheetOptions.httpMethod.toLowerCase().trim()](sheetOptions.url, body).subscribe((/**
                         * @param {?} response
                         * @return {?}
                         */
                        response => {
                            return resolve(response);
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        error => {
                            return reject(error);
                        }));
                    })).catch((/**
                     * @param {?} err
                     * @return {?}
                     */
                    err => {
                        return reject(err);
                    }));
                }
                else {
                    return reject('No url');
                }
            }
            else if (htmlContent) {
                return resolve({ excelAsHtml: htmlContent });
            }
            else {
                return reject('Please specify correct values for sheetOptions / htmlContent');
            }
        }));
    }
    /**
     * @param {?} sheetOptions
     * @return {?}
     */
    executeCallback(sheetOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (sheetOptions.preHttpRequestCallback instanceof Promise)) {
                sheetOptions.preHttpRequestCallback.then((/**
                 * @param {?} res
                 * @return {?}
                 */
                res => {
                    return resolve();
                })).catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                err => {
                    return reject('Promise function returned a reject');
                }));
            }
            else if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (typeof sheetOptions.preHttpRequestCallback === 'boolean')) {
                if (sheetOptions.preHttpRequestCallback === true) {
                    return resolve();
                }
                else {
                    return reject('Boolean function returned a false');
                }
            }
            else if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (typeof sheetOptions.preHttpRequestCallback === 'function')) {
                if (sheetOptions.preHttpRequestCallback() === true) {
                    return resolve();
                }
                else {
                    return reject('Callback function either returned a false or did not return a boolean value');
                }
            }
            else {
                return resolve();
            }
        }));
    }
}
NSheetService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NSheetService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ NSheetService.ngInjectableDef = defineInjectable({ factory: function NSheetService_Factory() { return new NSheetService(inject(HttpClient)); }, token: NSheetService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NSheetDirective {
    /**
     * @param {?} sheetService
     * @param {?} http
     * @param {?} el
     */
    constructor(sheetService, http, el) {
        this.sheetService = sheetService;
        this.http = http;
        this.el = el;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getSheet()
            .then((/**
         * @param {?} success
         * @return {?}
         */
        success => this.onsuccess.emit(success)))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => this.onerror.emit(error)));
    }
    /**
     * @return {?}
     */
    getSheet() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.sheetService.getSheet(this.sheetOptions, this.htmlContent).then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                if (res.hasOwnProperty('excelAsHtml') && res['excelAsHtml'].length > 0 && !Array.isArray(res['excelAsHtml'])) {
                    if (!(typeof this.sheetOptions === 'object' && this.sheetOptions.hasOwnProperty('doAppend') && this.sheetOptions.doAppend === true)) {
                        this.el.nativeElement.innerHTML = "";
                    }
                    /** @type {?} */
                    const fragment = document.createRange().createContextualFragment(res['excelAsHtml']);
                    this.el.nativeElement.appendChild(fragment);
                    return resolve(res);
                }
                else {
                    return reject(res);
                }
            })).catch((/**
             * @param {?} err
             * @return {?}
             */
            err => reject(err)));
        }));
    }
}
NSheetDirective.decorators = [
    { type: Directive, args: [{
                selector: '[n-sheet]'
            },] }
];
/** @nocollapse */
NSheetDirective.ctorParameters = () => [
    { type: NSheetService },
    { type: HttpClient },
    { type: ElementRef }
];
NSheetDirective.propDecorators = {
    sheetOptions: [{ type: Input }],
    htmlContent: [{ type: Input }],
    onsuccess: [{ type: Output }],
    onerror: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NSheetModule {
}
NSheetModule.decorators = [
    { type: NgModule, args: [{
                declarations: [NSheetDirective],
                imports: [HttpClientModule
                ],
                exports: [NSheetDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NSheetService, NSheetDirective, NSheetModule };

//# sourceMappingURL=n-sheet.js.map
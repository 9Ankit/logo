/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class NSheetService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?=} sheetOptions
     * @param {?=} htmlContent
     * @return {?}
     */
    getSheet(sheetOptions, htmlContent) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (typeof sheetOptions === 'object') {
                if (sheetOptions.hasOwnProperty('url')) {
                    delete sheetOptions.retPure;
                    sheetOptions.httpMethod = (sheetOptions.hasOwnProperty('httpMethod') && (sheetOptions.httpMethod.toLowerCase().trim() === 'get' || sheetOptions.httpMethod.toLowerCase().trim() === 'put')) ? sheetOptions.httpMethod.toLowerCase().trim() : 'post';
                    /** @type {?} */
                    var body = (sheetOptions.httpMethod.toLowerCase().trim() === 'get') ? {} : sheetOptions;
                    this.executeCallback(sheetOptions).then((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => {
                        this.http[sheetOptions.httpMethod.toLowerCase().trim()](sheetOptions.url, body).subscribe((/**
                         * @param {?} response
                         * @return {?}
                         */
                        response => {
                            return resolve(response);
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        error => {
                            return reject(error);
                        }));
                    })).catch((/**
                     * @param {?} err
                     * @return {?}
                     */
                    err => {
                        return reject(err);
                    }));
                }
                else {
                    return reject('No url');
                }
            }
            else if (htmlContent) {
                return resolve({ excelAsHtml: htmlContent });
            }
            else {
                return reject('Please specify correct values for sheetOptions / htmlContent');
            }
        }));
    }
    /**
     * @param {?} sheetOptions
     * @return {?}
     */
    executeCallback(sheetOptions) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (sheetOptions.preHttpRequestCallback instanceof Promise)) {
                sheetOptions.preHttpRequestCallback.then((/**
                 * @param {?} res
                 * @return {?}
                 */
                res => {
                    return resolve();
                })).catch((/**
                 * @param {?} err
                 * @return {?}
                 */
                err => {
                    return reject('Promise function returned a reject');
                }));
            }
            else if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (typeof sheetOptions.preHttpRequestCallback === 'boolean')) {
                if (sheetOptions.preHttpRequestCallback === true) {
                    return resolve();
                }
                else {
                    return reject('Boolean function returned a false');
                }
            }
            else if (sheetOptions.hasOwnProperty('preHttpRequestCallback') && (typeof sheetOptions.preHttpRequestCallback === 'function')) {
                if (sheetOptions.preHttpRequestCallback() === true) {
                    return resolve();
                }
                else {
                    return reject('Callback function either returned a false or did not return a boolean value');
                }
            }
            else {
                return resolve();
            }
        }));
    }
}
NSheetService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NSheetService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ NSheetService.ngInjectableDef = i0.defineInjectable({ factory: function NSheetService_Factory() { return new NSheetService(i0.inject(i1.HttpClient)); }, token: NSheetService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NSheetService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zaGVldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbi1zaGVldC8iLCJzb3VyY2VzIjpbImxpYi9uLXNoZWV0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDOzs7QUFRbEQsTUFBTSxPQUFPLGFBQWE7Ozs7SUFFeEIsWUFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUNwQyxDQUFDOzs7Ozs7SUFFTSxRQUFRLENBQUMsWUFBYSxFQUFFLFdBQVk7UUFDekMsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsSUFBSSxPQUFPLFlBQVksS0FBSyxRQUFRLEVBQUU7Z0JBQ3BDLElBQUksWUFBWSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDdEMsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDO29CQUM1QixZQUFZLENBQUMsVUFBVSxHQUFHLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssS0FBSyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsSUFBSSxFQUFFLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDOzt3QkFDaFAsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZO29CQUN2RixJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUk7Ozs7b0JBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUzs7Ozt3QkFBQyxRQUFRLENBQUMsRUFBRTs0QkFDbkcsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7d0JBQzNCLENBQUM7Ozs7d0JBQUUsS0FBSyxDQUFDLEVBQUU7NEJBQ1QsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ3ZCLENBQUMsRUFBQyxDQUFDO29CQUNMLENBQUMsRUFBQyxDQUFDLEtBQUs7Ozs7b0JBQUMsR0FBRyxDQUFDLEVBQUU7d0JBQ2IsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ3JCLENBQUMsRUFBQyxDQUFDO2lCQUNKO3FCQUFNO29CQUNMLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2lCQUN6QjthQUNGO2lCQUFNLElBQUksV0FBVyxFQUFFO2dCQUN0QixPQUFPLE9BQU8sQ0FBQyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO2FBQzlDO2lCQUFNO2dCQUNMLE9BQU8sTUFBTSxDQUFDLDhEQUE4RCxDQUFDLENBQUM7YUFDL0U7UUFDSCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7O0lBRUQsZUFBZSxDQUFDLFlBQVk7UUFDMUIsT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsSUFBSSxZQUFZLENBQUMsY0FBYyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsc0JBQXNCLFlBQVksT0FBTyxDQUFDLEVBQUU7Z0JBQ3JILFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJOzs7O2dCQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUM3QyxPQUFPLE9BQU8sRUFBRSxDQUFDO2dCQUNuQixDQUFDLEVBQUMsQ0FBQyxLQUFLOzs7O2dCQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNiLE9BQU8sTUFBTSxDQUFDLG9DQUFvQyxDQUFDLENBQUM7Z0JBQ3RELENBQUMsRUFBQyxDQUFDO2FBQ0o7aUJBQU0sSUFBSSxZQUFZLENBQUMsY0FBYyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxPQUFPLFlBQVksQ0FBQyxzQkFBc0IsS0FBSyxTQUFTLENBQUMsRUFBRTtnQkFDOUgsSUFBRyxZQUFZLENBQUMsc0JBQXNCLEtBQUssSUFBSSxFQUFFO29CQUMvQyxPQUFPLE9BQU8sRUFBRSxDQUFDO2lCQUNsQjtxQkFBTTtvQkFDTCxPQUFPLE1BQU0sQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO2lCQUNwRDthQUNGO2lCQUFNLElBQUksWUFBWSxDQUFDLGNBQWMsQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxZQUFZLENBQUMsc0JBQXNCLEtBQUssVUFBVSxDQUFDLEVBQUU7Z0JBQzdILElBQUcsWUFBWSxDQUFDLHNCQUFzQixFQUFFLEtBQUssSUFBSSxFQUFFO29CQUNqRCxPQUFPLE9BQU8sRUFBRSxDQUFDO2lCQUNsQjtxQkFBTTtvQkFDTCxPQUFPLE1BQU0sQ0FBQyw2RUFBNkUsQ0FBQyxDQUFDO2lCQUM5RjthQUNKO2lCQUFNO2dCQUNMLE9BQU8sT0FBTyxFQUFFLENBQUM7YUFDbEI7UUFDSCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7OztZQTVERixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFOUSxVQUFVOzs7Ozs7OztJQVVMLDZCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBwb3N0IH0gZnJvbSAnc2VsZW5pdW0td2ViZHJpdmVyL2h0dHAnO1xuaW1wb3J0IHsgcHJvbWlzZSB9IGZyb20gJ3Byb3RyYWN0b3InO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcblxuZXhwb3J0IGNsYXNzIE5TaGVldFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICB9XG5cbiAgcHVibGljIGdldFNoZWV0KHNoZWV0T3B0aW9ucz8sIGh0bWxDb250ZW50Pykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAodHlwZW9mIHNoZWV0T3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKHNoZWV0T3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndXJsJykpIHtcbiAgICAgICAgICBkZWxldGUgc2hlZXRPcHRpb25zLnJldFB1cmU7XG4gICAgICAgICAgc2hlZXRPcHRpb25zLmh0dHBNZXRob2QgPSAoc2hlZXRPcHRpb25zLmhhc093blByb3BlcnR5KCdodHRwTWV0aG9kJykgJiYgKHNoZWV0T3B0aW9ucy5odHRwTWV0aG9kLnRvTG93ZXJDYXNlKCkudHJpbSgpID09PSAnZ2V0JyB8fCBzaGVldE9wdGlvbnMuaHR0cE1ldGhvZC50b0xvd2VyQ2FzZSgpLnRyaW0oKSA9PT0gJ3B1dCcpKSA/IHNoZWV0T3B0aW9ucy5odHRwTWV0aG9kLnRvTG93ZXJDYXNlKCkudHJpbSgpIDogJ3Bvc3QnO1xuICAgICAgICAgIHZhciBib2R5ID0gKHNoZWV0T3B0aW9ucy5odHRwTWV0aG9kLnRvTG93ZXJDYXNlKCkudHJpbSgpID09PSAnZ2V0JykgPyB7fSA6IHNoZWV0T3B0aW9ucztcbiAgICAgICAgICB0aGlzLmV4ZWN1dGVDYWxsYmFjayhzaGVldE9wdGlvbnMpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIHRoaXMuaHR0cFtzaGVldE9wdGlvbnMuaHR0cE1ldGhvZC50b0xvd2VyQ2FzZSgpLnRyaW0oKV0oc2hlZXRPcHRpb25zLnVybCwgYm9keSkuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnTm8gdXJsJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaHRtbENvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoeyBleGNlbEFzSHRtbDogaHRtbENvbnRlbnQgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVqZWN0KCdQbGVhc2Ugc3BlY2lmeSBjb3JyZWN0IHZhbHVlcyBmb3Igc2hlZXRPcHRpb25zIC8gaHRtbENvbnRlbnQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGV4ZWN1dGVDYWxsYmFjayhzaGVldE9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHNoZWV0T3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgncHJlSHR0cFJlcXVlc3RDYWxsYmFjaycpICYmIChzaGVldE9wdGlvbnMucHJlSHR0cFJlcXVlc3RDYWxsYmFjayBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgIHNoZWV0T3B0aW9ucy5wcmVIdHRwUmVxdWVzdENhbGxiYWNrLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgIHJldHVybiByZWplY3QoJ1Byb21pc2UgZnVuY3Rpb24gcmV0dXJuZWQgYSByZWplY3QnKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHNoZWV0T3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgncHJlSHR0cFJlcXVlc3RDYWxsYmFjaycpICYmICh0eXBlb2Ygc2hlZXRPcHRpb25zLnByZUh0dHBSZXF1ZXN0Q2FsbGJhY2sgPT09ICdib29sZWFuJykpIHsgXG4gICAgICAgIGlmKHNoZWV0T3B0aW9ucy5wcmVIdHRwUmVxdWVzdENhbGxiYWNrID09PSB0cnVlKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTsgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdCgnQm9vbGVhbiBmdW5jdGlvbiByZXR1cm5lZCBhIGZhbHNlJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2hlZXRPcHRpb25zLmhhc093blByb3BlcnR5KCdwcmVIdHRwUmVxdWVzdENhbGxiYWNrJykgJiYgKHR5cGVvZiBzaGVldE9wdGlvbnMucHJlSHR0cFJlcXVlc3RDYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykpIHsgXG4gICAgICAgICAgaWYoc2hlZXRPcHRpb25zLnByZUh0dHBSZXF1ZXN0Q2FsbGJhY2soKSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTsgXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QoJ0NhbGxiYWNrIGZ1bmN0aW9uIGVpdGhlciByZXR1cm5lZCBhIGZhbHNlIG9yIGRpZCBub3QgcmV0dXJuIGEgYm9vbGVhbiB2YWx1ZScpO1xuICAgICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufSJdfQ==
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, ElementRef } from '@angular/core';
import { NSheetService } from './n-sheet.service';
import { HttpClient } from '@angular/common/http';
export class NSheetDirective {
    /**
     * @param {?} sheetService
     * @param {?} http
     * @param {?} el
     */
    constructor(sheetService, http, el) {
        this.sheetService = sheetService;
        this.http = http;
        this.el = el;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getSheet()
            .then((/**
         * @param {?} success
         * @return {?}
         */
        success => this.onsuccess.emit(success)))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => this.onerror.emit(error)));
    }
    /**
     * @return {?}
     */
    getSheet() {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this.sheetService.getSheet(this.sheetOptions, this.htmlContent).then((/**
             * @param {?} res
             * @return {?}
             */
            res => {
                if (res.hasOwnProperty('excelAsHtml') && res['excelAsHtml'].length > 0 && !Array.isArray(res['excelAsHtml'])) {
                    if (!(typeof this.sheetOptions === 'object' && this.sheetOptions.hasOwnProperty('doAppend') && this.sheetOptions.doAppend === true)) {
                        this.el.nativeElement.innerHTML = "";
                    }
                    /** @type {?} */
                    const fragment = document.createRange().createContextualFragment(res['excelAsHtml']);
                    this.el.nativeElement.appendChild(fragment);
                    return resolve(res);
                }
                else {
                    return reject(res);
                }
            })).catch((/**
             * @param {?} err
             * @return {?}
             */
            err => reject(err)));
        }));
    }
}
NSheetDirective.decorators = [
    { type: Directive, args: [{
                selector: '[n-sheet]'
            },] }
];
/** @nocollapse */
NSheetDirective.ctorParameters = () => [
    { type: NSheetService },
    { type: HttpClient },
    { type: ElementRef }
];
NSheetDirective.propDecorators = {
    sheetOptions: [{ type: Input }],
    htmlContent: [{ type: Input }],
    onsuccess: [{ type: Output }],
    onerror: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NSheetDirective.prototype.sheetOptions;
    /** @type {?} */
    NSheetDirective.prototype.htmlContent;
    /** @type {?} */
    NSheetDirective.prototype.onsuccess;
    /** @type {?} */
    NSheetDirective.prototype.onerror;
    /**
     * @type {?}
     * @private
     */
    NSheetDirective.prototype.sheetService;
    /**
     * @type {?}
     * @private
     */
    NSheetDirective.prototype.http;
    /**
     * @type {?}
     * @private
     */
    NSheetDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zaGVldC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uLXNoZWV0LyIsInNvdXJjZXMiOlsibGliL24tc2hlZXQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFVLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBTWxELE1BQU0sT0FBTyxlQUFlOzs7Ozs7SUFNMUIsWUFBb0IsWUFBMkIsRUFBVSxJQUFnQixFQUFVLEVBQWM7UUFBN0UsaUJBQVksR0FBWixZQUFZLENBQWU7UUFBVSxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUh2RixjQUFTLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEQsWUFBTyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO0lBRTJDLENBQUM7Ozs7SUFFdEcsUUFBUTtRQUNOLElBQUksQ0FBQyxRQUFRLEVBQUU7YUFDZCxJQUFJOzs7O1FBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQzthQUM3QyxLQUFLOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBQyxDQUFDO0lBQzNDLENBQUM7Ozs7SUFFRixRQUFRO1FBQ04sT0FBTyxJQUFJLE9BQU87Ozs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDckMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSTs7OztZQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN4RSxJQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFO29CQUMzRyxJQUFHLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxZQUFZLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxFQUFFO3dCQUNsSSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO3FCQUN0Qzs7MEJBQ0ssUUFBUSxHQUFHLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQ3BGLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDNUMsT0FBTyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3JCO3FCQUFNO29CQUNMLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNwQjtZQUNILENBQUMsRUFBQyxDQUFDLEtBQUs7Ozs7WUFBQyxHQUFHLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBQyxDQUFDO1FBQy9CLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBaENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsV0FBVzthQUN0Qjs7OztZQU5RLGFBQWE7WUFDYixVQUFVO1lBRnNDLFVBQVU7OzsyQkFTaEUsS0FBSzswQkFDTCxLQUFLO3dCQUNMLE1BQU07c0JBQ04sTUFBTTs7OztJQUhQLHVDQUFzQjs7SUFDdEIsc0NBQXFCOztJQUNyQixvQ0FBNEQ7O0lBQzVELGtDQUEwRDs7Ozs7SUFFOUMsdUNBQW1DOzs7OztJQUFFLCtCQUF3Qjs7Ozs7SUFBRSw2QkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25Jbml0LCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOU2hlZXRTZXJ2aWNlIH0gZnJvbSAnLi9uLXNoZWV0LnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbi1zaGVldF0nXG59KVxuZXhwb3J0IGNsYXNzIE5TaGVldERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIHNoZWV0T3B0aW9ucztcbiAgQElucHV0KCkgaHRtbENvbnRlbnQ7XG4gIEBPdXRwdXQoKSBvbnN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgb25lcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzaGVldFNlcnZpY2U6IE5TaGVldFNlcnZpY2UsIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5nZXRTaGVldCgpXG4gICAgLnRoZW4oc3VjY2VzcyA9PiB0aGlzLm9uc3VjY2Vzcy5lbWl0KHN1Y2Nlc3MpKVxuICAgIC5jYXRjaChlcnJvciA9PiB0aGlzLm9uZXJyb3IuZW1pdChlcnJvcikpO1xuICAgfVxuXG4gIGdldFNoZWV0KCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMuc2hlZXRTZXJ2aWNlLmdldFNoZWV0KHRoaXMuc2hlZXRPcHRpb25zLHRoaXMuaHRtbENvbnRlbnQpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgaWYocmVzLmhhc093blByb3BlcnR5KCdleGNlbEFzSHRtbCcpICYmIHJlc1snZXhjZWxBc0h0bWwnXS5sZW5ndGggPiAwICYmICFBcnJheS5pc0FycmF5KHJlc1snZXhjZWxBc0h0bWwnXSkpIHtcbiAgICAgICAgICBpZighKHR5cGVvZiB0aGlzLnNoZWV0T3B0aW9ucyA9PT0gJ29iamVjdCcgJiYgdGhpcy5zaGVldE9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2RvQXBwZW5kJykgJiYgdGhpcy5zaGVldE9wdGlvbnMuZG9BcHBlbmQgPT09IHRydWUpKSB7XG4gICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gXCJcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpLmNyZWF0ZUNvbnRleHR1YWxGcmFnbWVudChyZXNbJ2V4Y2VsQXNIdG1sJ10pO1xuICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KHJlcyk7XG4gICAgICAgIH1cbiAgICAgIH0pLmNhdGNoKGVyciA9PiByZWplY3QoZXJyKSk7XG4gICAgfSk7XG4gIH1cblxufSJdfQ==
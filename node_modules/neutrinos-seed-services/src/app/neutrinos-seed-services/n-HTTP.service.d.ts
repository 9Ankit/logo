import { Injector } from '@angular/core';
import { HttpEvent, HttpHandler, HttpRequest, HttpErrorResponse } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs/Rx';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NTokenService } from './n-token.service';
export declare class NHttpService {
    private nHTTPLoader;
    private inj;
    private nLocalStorageService;
    private nTokenService;
    timeout: number;
    systemService: any;
    nSessionStorage: any;
    appProperties: any;
    isRefreshingToken: boolean;
    nPubSubService: any;
    tokenSubject: BehaviorSubject<string>;
    constructor(nHTTPLoader: NHTTPLoaderService, inj: Injector, nLocalStorageService: NLocalStorageService, nTokenService: NTokenService);
    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    updateToken(error: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler): any;
    refreshToken(): Observable<Object>;
    /**
     * Request options.
     * @param options
     * @returns HttpRequest
     */
    private requestOptions(req?);
    /**
    * Default options.
    * @param options
    * @returns HttpHeadedrs
    */
    private addDefaultHeaders(req);
    /**
     * Build API url.
     * @param url
     * @returns string
     */
    private getFullUrl(url);
    /**
     * Request interceptor.
     */
    private requestInterceptor();
    /**
     * Response interceptor.
     */
    private responseInterceptor();
    /**
      * Error handler.
      * @param error
      * @param caught
      * @returns ErrorObservable
      */
    private onCatch(error, req, next);
    /**
     * onSubscribeError
     * @param error
     */
    private onSubscribeError(err);
    /**
     * onFinally
     */
    private onFinally();
    private onCatchError(error);
}

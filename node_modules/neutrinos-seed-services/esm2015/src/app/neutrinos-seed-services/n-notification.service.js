/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NSystemService } from './n-system.service';
import { NLocalStorageService } from './n-localStorage.service';
import * as firebase from 'firebase';
import { NPubSubService } from './n-pubSub.service';
import { HttpClient } from '@angular/common/http';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
export class NNotificationService {
    /**
     * @param {?} localStorageService
     * @param {?} pubSubService
     * @param {?} http
     * @param {?} bHttpLoader
     */
    constructor(localStorageService, pubSubService, http, bHttpLoader) {
        this.localStorageService = localStorageService;
        this.pubSubService = pubSubService;
        this.http = http;
        this.bHttpLoader = bHttpLoader;
        this.systemService = NSystemService.getInstance();
        this.possiblePushTypes = ['APNS', 'FCM'];
        this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');
        this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');
        this.appName = this.systemService.getVal('appName');
        this.deviceType = this.systemService.deviceType;
        this.sessionStorage = new NSessionStorageService();
        this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', () => {
            this.enableNotification();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    enableNotification() {
        let /** @type {?} */ pushType = this.getPushType(this.systemService.getVal('pushType'));
        document.addEventListener('deviceready', event => {
            if (this.isNotificationEnabled) {
                if (this.deviceType && this.deviceType != 'browser') {
                    this.deviceType = this.systemService.deviceType;
                    this.checkPermission(pushType).then(res => {
                        if (res) {
                            this.initializeNotifications(pushType);
                        }
                    });
                }
            }
        });
        if (this.isNotificationEnabled && pushType !== 'APNS') {
            if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {
                this.initialiseWebPush();
            }
        }
    }
    /**
     * @return {?}
     */
    initialiseWebPush() {
        const /** @type {?} */ __this = this;
        const /** @type {?} */ messaging = firebase.messaging();
        messaging.requestPermission()
            .then(function () {
            return messaging.getToken();
        })
            .then(function (token) {
            if (token) {
                __this.sendRegDetails(token);
            }
        })
            .catch(function (err) {
            __this.bHttpLoader.alertError(err);
        });
        messaging.onMessage(function (payload) {
            if (payload['notification']) {
                let /** @type {?} */ notificationObj = payload['notification'];
                let /** @type {?} */ options = {
                    body: notificationObj.body,
                    icon: notificationObj.icon
                };
                // creating a native browser message
                let /** @type {?} */ notificationUI = new Notification(notificationObj.title, options);
                notificationUI.onclick = function () {
                    window.focus(); // window is focused when the user clicks the notification using this
                };
            }
        });
    }
    /**
     * @param {?=} pushType
     * @return {?}
     */
    checkPermission(pushType) {
        // Android & iOS only
        // Checks whether the push notification permission has been granted.
        return new Promise((resolve) => {
            pushType = this.getPushType(pushType);
            if ((this.deviceType === 'Android' || this.deviceType === 'iOS') && (pushType === 'FCM')) {
                PushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else if (this.deviceType === 'iOS' && pushType === 'APNS') {
                APNSPushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else {
                return resolve(true);
            }
        });
    }
    /**
     * @param {?=} pushType
     * @return {?}
     */
    initializeNotifications(pushType) {
        //pushType = pushType ? pushType : 'FCM';
        pushType = this.getPushType(pushType);
        let /** @type {?} */ push;
        // Default if for FCM
        if (pushType === 'FCM') {
            push = window['PushNotification'].init({
                android: {
                    senderID: this.firebaseSenderId
                },
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true",
                    senderID: this.firebaseSenderId
                },
            });
        }
        else if (pushType === 'APNS') {
            push = window['APNSPushNotification'].init({
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true"
                }
            });
        }
        push.on('registration', (data) => {
            // data.registrationId
            this.sendRegDetails(data.registrationId);
        });
        // ToDo Christy get call back function from app user to change what happens once a notification arrives
        push.on('notification', (data) => {
            window['cordova'].plugins.notification.local.schedule({
                title: data.title,
                text: data.message,
                sound: data.sound,
                at: new Date().getTime()
            });
        });
        push.on('error', (e) => {
            // e.message
            console.error(e);
        });
    }
    /**
     * @param {?} registrationId
     * @return {?}
     */
    sendRegDetails(registrationId) {
        this.localStorageService.setValue('registrationId', registrationId);
        var /** @type {?} */ url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';
        let /** @type {?} */ pushType = this.getPushType(this.systemService.getVal('pushType'));
        this.http.post(url, {
            'key': this.sessionStorage.getValue('userObj')['userKey'],
            'uuid': this.localStorageService.getValue('uuid'),
            'fbregid': registrationId,
            'pushType': pushType
        }).subscribe(result => {
            // this.pubSubService.$pub('FBRegComp');
        }, error => {
            console.log(error);
        });
    }
    /**
     * @param {?} currPushType
     * @return {?}
     */
    getPushType(currPushType) {
        let /** @type {?} */ isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());
        let /** @type {?} */ pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';
        return pushType;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.loginSubscribe.unSubscribe();
    }
}
NNotificationService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NNotificationService.ctorParameters = () => [
    { type: NLocalStorageService, },
    { type: NPubSubService, },
    { type: HttpClient, },
    { type: NHTTPLoaderService, },
];
function NNotificationService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NNotificationService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NNotificationService.ctorParameters;
    /** @type {?} */
    NNotificationService.prototype.systemService;
    /** @type {?} */
    NNotificationService.prototype.firebaseSenderId;
    /** @type {?} */
    NNotificationService.prototype.isNotificationEnabled;
    /** @type {?} */
    NNotificationService.prototype.deviceType;
    /** @type {?} */
    NNotificationService.prototype.string;
    /** @type {?} */
    NNotificationService.prototype.resDetails;
    /** @type {?} */
    NNotificationService.prototype.deviceUUID;
    /** @type {?} */
    NNotificationService.prototype.possiblePushTypes;
    /** @type {?} */
    NNotificationService.prototype.loginSubscribe;
    /** @type {?} */
    NNotificationService.prototype.sessionStorage;
    /** @type {?} */
    NNotificationService.prototype.appName;
    /** @type {?} */
    NNotificationService.prototype.localStorageService;
    /** @type {?} */
    NNotificationService.prototype.pubSubService;
    /** @type {?} */
    NNotificationService.prototype.http;
    /** @type {?} */
    NNotificationService.prototype.bHttpLoader;
}

//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { NLogoutService } from './n-logout.service';
import { NPubSubService } from './n-pubSub.service';
export class NHTTPLoaderService {
    /**
     * @param {?} nLogoutService
     * @param {?} nPubSubService
     */
    constructor(nLogoutService, nPubSubService) {
        this.nLogoutService = nLogoutService;
        this.nPubSubService = nPubSubService;
        this.pendingRequests = 0;
        this.showLoading = false;
        this._isHTTPRequestInProgress = new Subject();
        this._isHTTPRequestInProgress$ = this._isHTTPRequestInProgress.asObservable();
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    isHTTPRequestInProgress(bool) {
        if (bool) {
            this.pendingRequests++;
            if (!this.showLoading) {
                this._isHTTPRequestInProgress.next(bool);
            }
            this.showLoading = true;
        }
        else {
            this.pendingRequests--;
            if (this.pendingRequests <= 0) {
                if (this.showLoading) {
                    this._isHTTPRequestInProgress.next(bool);
                }
                this.showLoading = false;
            }
        }
    }
    /**
     * @param {?} error
     * @return {?}
     */
    alertError(error) {
        if (error.status < 200 || error.status > 500) {
            if (error.status === 0) {
                this.nPubSubService.$pub('openSnackBar', 'Connectivity issue');
            }
            else {
                this.nPubSubService.$pub('openSnackBar', 'Response failure');
            }
        }
        else if (error.status === 401) {
            this.nLogoutService.logout();
            if (error.error) {
                this.nPubSubService.$pub('openSnackBar', error.error);
            }
            else {
                this.nPubSubService.$pub('openSnackBar', error);
            }
        }
        else if (error.error) {
            if (error.error instanceof Object) {
                this.nPubSubService.$pub('openSnackBar', error.error.message);
            }
            else {
                this.nPubSubService.$pub('openSnackBar', error.error);
            }
        }
        else {
            this.nPubSubService.$pub('openSnackBar', 'Response failure');
        }
    }
}
NHTTPLoaderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NHTTPLoaderService.ctorParameters = () => [
    { type: NLogoutService, },
    { type: NPubSubService, },
];
function NHTTPLoaderService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NHTTPLoaderService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NHTTPLoaderService.ctorParameters;
    /** @type {?} */
    NHTTPLoaderService.prototype.pendingRequests;
    /** @type {?} */
    NHTTPLoaderService.prototype.showLoading;
    /** @type {?} */
    NHTTPLoaderService.prototype._isHTTPRequestInProgress;
    /** @type {?} */
    NHTTPLoaderService.prototype._isHTTPRequestInProgress$;
    /** @type {?} */
    NHTTPLoaderService.prototype.nLogoutService;
    /** @type {?} */
    NHTTPLoaderService.prototype.nPubSubService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1IVFRQTG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbInNyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbi1IVFRQTG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV2QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSXBELE1BQU07Ozs7O0lBTUosWUFBb0IsY0FBOEIsRUFBVSxjQUE4QjtRQUF0RSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFBVSxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7K0JBTGpFLENBQUM7MkJBQ0wsS0FBSzt3Q0FDUyxJQUFJLE9BQU8sRUFBVzt5Q0FDN0IsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFlBQVksRUFBRTtLQUl2RTs7Ozs7SUFFRCx1QkFBdUIsQ0FBQyxJQUFJO1FBQzFCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDVCxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDdkIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztnQkFDdEIsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMxQztZQUNELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO1NBQ3pCO1FBQ0QsSUFBSSxDQUFDLENBQUM7WUFDSixJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDdkIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM5QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztvQkFDckIsSUFBSSxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDMUM7Z0JBQ0QsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7YUFDMUI7U0FDRjtLQUNGOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFLO1FBQ2QsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzdDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLG9CQUFvQixDQUFDLENBQUM7YUFDaEU7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTthQUM3RDtTQUNGO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQzdCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO2FBQ3REO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFBO2FBQ2hEO1NBQ0Y7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDdkIsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssWUFBWSxNQUFNLENBQUMsQ0FBQyxDQUFDO2dCQUNsQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTthQUM5RDtZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDdEQ7U0FDRjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLGtCQUFrQixDQUFDLENBQUE7U0FDN0Q7S0FDRjs7O1lBckRGLFVBQVU7Ozs7WUFORixjQUFjO1lBR2QsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzL1N1YmplY3QnO1xuLy8gaW1wb3J0IHsgTlNuYWNrYmFyU2VydmljZSB9IGZyb20gJy4vbi1zbmFja2Jhci5zZXJ2aWNlJztcbmltcG9ydCB7IE5Mb2dvdXRTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvZ291dC5zZXJ2aWNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqcy9PYnNlcnZhYmxlXCI7XG5pbXBvcnQgeyBOU3lzdGVtU2VydmljZSB9IGZyb20gJy4vbi1zeXN0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBOUHViU3ViU2VydmljZSB9IGZyb20gJy4vbi1wdWJTdWIuc2VydmljZSc7XG4vLyBpbXBvcnQgeyBOU25hY2tiYXJTZXJ2aWNlIH0gZnJvbSAnLi9zbmFja2Jhci9zZXJ2aWNlL3NuYWNrYmFyLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTkhUVFBMb2FkZXJTZXJ2aWNlIHtcbiAgcHVibGljIHBlbmRpbmdSZXF1ZXN0cyA9IDA7XG4gIHB1YmxpYyBzaG93TG9hZGluZyA9IGZhbHNlO1xuICBwcml2YXRlIF9pc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcyA9IG5ldyBTdWJqZWN0PGJvb2xlYW4+KCk7XG4gIF9pc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcyQgPSB0aGlzLl9pc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcy5hc09ic2VydmFibGUoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5Mb2dvdXRTZXJ2aWNlOiBOTG9nb3V0U2VydmljZSwgcHJpdmF0ZSBuUHViU3ViU2VydmljZTogTlB1YlN1YlNlcnZpY2UpIHtcblxuICB9XG5cbiAgaXNIVFRQUmVxdWVzdEluUHJvZ3Jlc3MoYm9vbCkge1xuICAgIGlmIChib29sKSB7XG4gICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0cysrO1xuICAgICAgaWYgKCF0aGlzLnNob3dMb2FkaW5nKSB7XG4gICAgICAgIHRoaXMuX2lzSFRUUFJlcXVlc3RJblByb2dyZXNzLm5leHQoYm9vbCk7XG4gICAgICB9XG4gICAgICB0aGlzLnNob3dMb2FkaW5nID0gdHJ1ZTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0cy0tO1xuICAgICAgaWYgKHRoaXMucGVuZGluZ1JlcXVlc3RzIDw9IDApIHtcbiAgICAgICAgaWYgKHRoaXMuc2hvd0xvYWRpbmcpIHtcbiAgICAgICAgICB0aGlzLl9pc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcy5uZXh0KGJvb2wpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2hvd0xvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhbGVydEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLnN0YXR1cyA8IDIwMCB8fCBlcnJvci5zdGF0dXMgPiA1MDApIHtcbiAgICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDApIHtcbiAgICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCAnQ29ubmVjdGl2aXR5IGlzc3VlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsICdSZXNwb25zZSBmYWlsdXJlJylcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDAxKSB7XG4gICAgICB0aGlzLm5Mb2dvdXRTZXJ2aWNlLmxvZ291dCgpO1xuICAgICAgaWYgKGVycm9yLmVycm9yKSB7XG4gICAgICAgIHRoaXMublB1YlN1YlNlcnZpY2UuJHB1Yignb3BlblNuYWNrQmFyJywgZXJyb3IuZXJyb3IpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsIGVycm9yKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXJyb3IuZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsIGVycm9yLmVycm9yLm1lc3NhZ2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsIGVycm9yLmVycm9yKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsICdSZXNwb25zZSBmYWlsdXJlJylcbiAgICB9XG4gIH1cblxufVxuXG5cbiJdfQ==
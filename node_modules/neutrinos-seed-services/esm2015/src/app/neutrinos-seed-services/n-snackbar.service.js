/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { NSystemService } from './n-system.service';
import { NPubSubService } from './n-pubSub.service';
export class NSnackbarService {
    /**
     * @param {?} nPubSubService
     */
    constructor(nPubSubService) {
        this.nPubSubService = nPubSubService;
        this.snackService = new Subject();
        if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {
            this.snackBarListner = this.nPubSubService.$sub('openSnackBar', (msg) => {
                this.openSnackBar(msg);
            });
        }
    }
    /**
     * @return {?}
     */
    get() {
        return this.snackService.asObservable();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    add(data) {
        this.snackService.next({
            action: 'add',
            data: data
        });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    remove(id) {
        this.snackService.next({ action: 'remove', id: id });
    }
    /**
     * @return {?}
     */
    clear() {
        this.snackService.next({ action: 'clear' });
    }
    /**
     * @param {?} message
     * @param {?=} timeout
     * @return {?}
     */
    openSnackBar(message, timeout) {
        this.add({
            msg: message,
            timeout: timeout || 5000,
            action: {
                text: 'Close',
                onClick: (snack) => {
                },
            },
            onAdd: (snack) => {
            },
            onRemove: (snack) => {
            }
        });
    }
}
NSnackbarService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NSnackbarService.ctorParameters = () => [
    { type: NPubSubService, },
];
function NSnackbarService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NSnackbarService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NSnackbarService.ctorParameters;
    /** @type {?} */
    NSnackbarService.prototype.snackBarListner;
    /** @type {?} */
    NSnackbarService.prototype.snackService;
    /** @type {?} */
    NSnackbarService.prototype.nPubSubService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zbmFja2Jhci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tc25hY2tiYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRXZDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJcEQsTUFBTTs7OztJQUdKLFlBQW9CLGNBQThCO1FBQTlCLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjs0QkFEM0IsSUFBSSxPQUFPLEVBQU87UUFFdkMsRUFBRSxDQUFDLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRSxDQUFDLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUN0RSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3hCLENBQUMsQ0FBQTtTQUNIO0tBQ0Y7Ozs7SUFFRCxHQUFHO1FBQ0QsTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7S0FDekM7Ozs7O0lBSUQsR0FBRyxDQUFDLElBR0g7UUFDQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQixNQUFNLEVBQUUsS0FBSztZQUNiLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQyxDQUFDO0tBQ0o7Ozs7O0lBRUQsTUFBTSxDQUFDLEVBQVU7UUFDZixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7S0FDdEQ7Ozs7SUFFRCxLQUFLO1FBQ0gsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztLQUM3Qzs7Ozs7O0lBRUQsWUFBWSxDQUFDLE9BQU8sRUFBRSxPQUFRO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDUCxHQUFHLEVBQUUsT0FBTztZQUNaLE9BQU8sRUFBRSxPQUFPLElBQUksSUFBSTtZQUN4QixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLE9BQU87Z0JBQ2IsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7aUJBRWxCO2FBQ0Y7WUFDRCxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRTthQUNoQjtZQUNELFFBQVEsRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFO2FBQ25CO1NBQ0YsQ0FBQyxDQUFDO0tBQ0o7OztZQW5ERixVQUFVOzs7O1lBSEYsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8vIGltcG9ydCB7IE1hdFNuYWNrQmFyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMvU3ViamVjdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IE5QdWJTdWJTZXJ2aWNlIH0gZnJvbSAnLi9uLXB1YlN1Yi5zZXJ2aWNlJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTlNuYWNrYmFyU2VydmljZSB7XG4gIHNuYWNrQmFyTGlzdG5lcjtcbiAgcHJpdmF0ZSBzbmFja1NlcnZpY2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgblB1YlN1YlNlcnZpY2U6IE5QdWJTdWJTZXJ2aWNlKSB7XG4gICAgaWYgKE5TeXN0ZW1TZXJ2aWNlLmdldEluc3RhbmNlKCkuZ2V0VmFsKCd1c2VEZWZhdWx0RXhjZXB0aW9uVUknKSkge1xuICAgICAgdGhpcy5zbmFja0Jhckxpc3RuZXIgPSB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRzdWIoJ29wZW5TbmFja0JhcicsIChtc2cpID0+IHtcbiAgICAgICAgdGhpcy5vcGVuU25hY2tCYXIobXNnKTtcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLnNuYWNrU2VydmljZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG5cblxuICBhZGQoZGF0YToge1xuICAgIG1zZzogc3RyaW5nLCB0aW1lb3V0PzogbnVtYmVyLCBiYWNrZ3JvdW5kPzogc3RyaW5nLCBjb2xvcj86IHN0cmluZywgY3VzdG9tQ2xhc3M/OiBhbnksXG4gICAgYWN0aW9uPzogeyB0ZXh0OiBzdHJpbmcsIG9uQ2xpY2s/OiBGdW5jdGlvbiwgY29sb3I/OiBzdHJpbmcgfSwgb25BZGQ/OiBGdW5jdGlvbiwgb25SZW1vdmU/OiBGdW5jdGlvblxuICB9KSB7XG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7XG4gICAgICBhY3Rpb246ICdhZGQnLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNuYWNrU2VydmljZS5uZXh0KHsgYWN0aW9uOiAncmVtb3ZlJywgaWQ6IGlkIH0pO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7IGFjdGlvbjogJ2NsZWFyJyB9KTtcbiAgfVxuXG4gIG9wZW5TbmFja0JhcihtZXNzYWdlLCB0aW1lb3V0PywgKSB7XG4gICAgdGhpcy5hZGQoe1xuICAgICAgbXNnOiBtZXNzYWdlLFxuICAgICAgdGltZW91dDogdGltZW91dCB8fCA1MDAwLFxuICAgICAgYWN0aW9uOiB7XG4gICAgICAgIHRleHQ6ICdDbG9zZScsXG4gICAgICAgIG9uQ2xpY2s6IChzbmFjaykgPT4ge1xuICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgb25BZGQ6IChzbmFjaykgPT4ge1xuICAgICAgfSxcbiAgICAgIG9uUmVtb3ZlOiAoc25hY2spID0+IHtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG4iXX0=
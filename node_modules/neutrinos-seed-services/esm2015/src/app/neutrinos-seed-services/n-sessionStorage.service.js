/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
export class NSessionStorageService {
    constructor() {
        NSessionStorageService.sessionStorageCache = sessionStorage;
    }
    /**
     * @return {?}
     */
    getSessionStorage() {
        return NSessionStorageService.sessionStorageCache;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setValue(key, value) {
        NSessionStorageService.sessionStorageCache[key] = value;
        sessionStorage.setItem(key, value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        if (!NSessionStorageService.sessionStorageCache[key]) {
            return null;
        }
        try {
            const /** @type {?} */ obj = NSessionStorageService.sessionStorageCache[key];
            return JSON.parse(obj);
        }
        catch (/** @type {?} */ error) {
            return NSessionStorageService.sessionStorageCache[key];
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    remove(key) {
        if (NSessionStorageService.sessionStorageCache.hasOwnProperty(key)) {
            delete NSessionStorageService.sessionStorageCache[key];
            sessionStorage.removeItem(key);
        }
    }
    /**
     * @return {?}
     */
    clearSessionStorage() {
        NSessionStorageService.sessionStorageCache = {};
        sessionStorage.clear();
    }
}
NSessionStorageService.sessionStorageCache = {};
NSessionStorageService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NSessionStorageService.ctorParameters = () => [];
function NSessionStorageService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NSessionStorageService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NSessionStorageService.ctorParameters;
    /** @type {?} */
    NSessionStorageService.sessionStorageCache;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zZXNzaW9uU3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tc2Vzc2lvblN0b3JhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxNQUFNO0lBRUo7UUFDRSxzQkFBc0IsQ0FBQyxtQkFBbUIsR0FBRyxjQUFjLENBQUM7S0FDN0Q7Ozs7SUFFRCxpQkFBaUI7UUFDZixNQUFNLENBQUMsc0JBQXNCLENBQUMsbUJBQW1CLENBQUM7S0FDbkQ7Ozs7OztJQUVELFFBQVEsQ0FBQyxHQUFHLEVBQUUsS0FBSztRQUNqQixzQkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDeEQsY0FBYyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUE7S0FDbkM7Ozs7O0lBRUQsUUFBUSxDQUFDLEdBQUc7UUFDVixFQUFFLENBQUMsQ0FBQyxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyRCxNQUFNLENBQUMsSUFBSSxDQUFDO1NBQ2I7UUFDRCxJQUFJLENBQUM7WUFDSCx1QkFBTSxHQUFHLEdBQUcsc0JBQXNCLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDeEI7UUFBQyxLQUFLLENBQUMsQ0FBQyxpQkFBQSxLQUFLLEVBQUUsQ0FBQztZQUNmLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4RDtLQUNGOzs7OztJQUVELE1BQU0sQ0FBQyxHQUFHO1FBQ1IsRUFBRSxDQUFDLENBQUMsc0JBQXNCLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRSxPQUFPLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3ZELGNBQWMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDaEM7S0FDRjs7OztJQUVELG1CQUFtQjtRQUNqQixzQkFBc0IsQ0FBQyxtQkFBbUIsR0FBRyxFQUFFLENBQUM7UUFDaEQsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO0tBQ3hCOzs2Q0FwQ2lDLEVBQUU7O1lBRnJDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlIHtcbiAgc3RhdGljIHNlc3Npb25TdG9yYWdlQ2FjaGU6IGFueSA9IHt9O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlLnNlc3Npb25TdG9yYWdlQ2FjaGUgPSBzZXNzaW9uU3RvcmFnZTtcbiAgfVxuXG4gIGdldFNlc3Npb25TdG9yYWdlKCkge1xuICAgIHJldHVybiBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlLnNlc3Npb25TdG9yYWdlQ2FjaGU7XG4gIH1cblxuICBzZXRWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpXG4gIH1cblxuICBnZXRWYWx1ZShrZXkpIHtcbiAgICBpZiAoIU5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IG9iaiA9IE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZVtrZXldO1xuICAgICAgcmV0dXJuIEpTT04ucGFyc2Uob2JqKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZShrZXkpIHtcbiAgICBpZiAoTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgIGRlbGV0ZSBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlLnNlc3Npb25TdG9yYWdlQ2FjaGVba2V5XTtcbiAgICAgIHNlc3Npb25TdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcbiAgICB9XG4gIH1cblxuICBjbGVhclNlc3Npb25TdG9yYWdlKCkge1xuICAgIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZSA9IHt9O1xuICAgIHNlc3Npb25TdG9yYWdlLmNsZWFyKCk7XG4gIH1cblxufVxuIl19
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NgModule, APP_INITIALIZER } from '@angular/core';
import { CommonModule } from '@angular/common';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { NAuthGuardService } from './n-authGaurd.service';
import { NDataModelService } from './n-dataModel.service';
import { NHttpService } from './n-HTTP.service';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NLoginService } from './n-login.service';
import { NLogoutService } from './n-logout.service';
import { NNotificationService } from './n-notification.service';
import { NSnackbarService } from './n-snackbar.service';
import { NPubSubService } from './n-pubSub.service';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NTokenService } from './n-token.service';
import { HttpClientModule } from '@angular/common/http';
import { RouterModule } from '@angular/router';
import { HttpModule } from '@angular/http';
import { NgForageModule } from 'ngforage';
import { SnackComponent } from './snackbar/snack/snack.component';
import { SnackbarComponent } from './snackbar/snackbar/snackbar.component';
/**
 * @param {?} startupService
 * @return {?}
 */
export function startupServiceFactory(startupService) {
    const /** @type {?} */ res = () => {
        // console.log('module before initstorage call');
        return startupService.initStorage();
    };
    return res;
}
export class NeutrinosSeedServicesModule {
}
NeutrinosSeedServicesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                    RouterModule,
                    HttpModule,
                    NgForageModule.forRoot()
                ],
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: NHttpService,
                        multi: true
                    },
                    {
                        // Provider for APP_INITIALIZER
                        provide: APP_INITIALIZER,
                        useFactory: startupServiceFactory,
                        deps: [NLocalStorageService],
                        multi: true
                    },
                    NAuthGuardService,
                    NDataModelService,
                    NHttpService,
                    NHTTPLoaderService,
                    NLocalStorageService,
                    NLoginService,
                    NLogoutService,
                    NNotificationService,
                    NSnackbarService,
                    NPubSubService,
                    NSessionStorageService,
                    NTokenService
                ],
                declarations: [
                    SnackComponent,
                    SnackbarComponent
                ],
                exports: [
                    SnackComponent,
                    SnackbarComponent
                ]
            },] },
];
function NeutrinosSeedServicesModule_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NeutrinosSeedServicesModule.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NeutrinosSeedServicesModule.ctorParameters;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV1dHJpbm9zLXNlZWQtc2VydmljZXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsZUFBZSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUcvQyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUd6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUN6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUV4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXhELE9BQU8sRUFBRSxZQUFZLEVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFMUMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDOzs7OztBQVMzRSxNQUFNLGdDQUFnQyxjQUFvQztJQUN4RSx1QkFBTSxHQUFHLEdBQUcsR0FBRyxFQUFFOztRQUVmLE1BQU0sQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7S0FFckMsQ0FBQTtJQUNELE1BQU0sQ0FBQyxHQUFHLENBQUM7Q0FDWjtBQWtERCxNQUFNOzs7WUEvQ0wsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRTtvQkFDUCxZQUFZO29CQUNaLGdCQUFnQjtvQkFDaEIsWUFBWTtvQkFDWixVQUFVO29CQUNWLGNBQWMsQ0FBQyxPQUFPLEVBQUU7aUJBRXpCO2dCQUNELFNBQVMsRUFBRTtvQkFDVDt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixRQUFRLEVBQUUsWUFBWTt3QkFDdEIsS0FBSyxFQUFFLElBQUk7cUJBQ1o7b0JBQ0Q7O3dCQUVFLE9BQU8sRUFBRSxlQUFlO3dCQUN4QixVQUFVLEVBQUUscUJBQXFCO3dCQUNqQyxJQUFJLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQzt3QkFDNUIsS0FBSyxFQUFFLElBQUk7cUJBQ1o7b0JBQ0QsaUJBQWlCO29CQUNqQixpQkFBaUI7b0JBRWpCLFlBQVk7b0JBQ1osa0JBQWtCO29CQUNsQixvQkFBb0I7b0JBQ3BCLGFBQWE7b0JBQ2IsY0FBYztvQkFDZCxvQkFBb0I7b0JBQ3BCLGdCQUFnQjtvQkFDaEIsY0FBYztvQkFFZCxzQkFBc0I7b0JBQ3RCLGFBQWE7aUJBQ2Q7Z0JBQ0QsWUFBWSxFQUFFO29CQUNaLGNBQWM7b0JBQ2QsaUJBQWlCO2lCQUNsQjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1AsY0FBYztvQkFDZCxpQkFBaUI7aUJBQ2xCO2FBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgQVBQX0lOSVRJQUxJWkVSIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuLy8gaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5pbXBvcnQgeyBIVFRQX0lOVEVSQ0VQVE9SUyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbi8vIGltcG9ydCB7IEJyb3dzZXJBbmltYXRpb25zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci9hbmltYXRpb25zJztcbi8vIGltcG9ydCB7IE1hdFNuYWNrQmFyIH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsXCI7XG5pbXBvcnQgeyBOQXV0aEd1YXJkU2VydmljZSB9IGZyb20gJy4vbi1hdXRoR2F1cmQuc2VydmljZSdcbmltcG9ydCB7IE5EYXRhTW9kZWxTZXJ2aWNlIH0gZnJvbSAnLi9uLWRhdGFNb2RlbC5zZXJ2aWNlJztcbi8vIGltcG9ydCB7IE5EYXRhU291cmNlU2VydmljZSB9IGZyb20gJy4vbi1kYXRhU291cmNlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkh0dHBTZXJ2aWNlIH0gZnJvbSAnLi9uLUhUVFAuc2VydmljZSc7XG5pbXBvcnQgeyBOSFRUUExvYWRlclNlcnZpY2UgfSBmcm9tICcuL24tSFRUUExvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvY2FsU3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5Mb2dpblNlcnZpY2UgfSBmcm9tICcuL24tbG9naW4uc2VydmljZSc7XG5pbXBvcnQgeyBOTG9nb3V0U2VydmljZSB9IGZyb20gJy4vbi1sb2dvdXQuc2VydmljZSc7XG5pbXBvcnQgeyBOTm90aWZpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vbi1ub3RpZmljYXRpb24uc2VydmljZSc7XG5pbXBvcnQgeyBOU25hY2tiYXJTZXJ2aWNlIH0gZnJvbSAnLi9uLXNuYWNrYmFyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlN5c3RlbVNlcnZpY2UgfSBmcm9tICcuL24tc3lzdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlB1YlN1YlNlcnZpY2UgfSBmcm9tICcuL24tcHViU3ViLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlNlc3Npb25TdG9yYWdlU2VydmljZSB9IGZyb20gJy4vbi1zZXNzaW9uU3RvcmFnZS5zZXJ2aWNlJ1xuaW1wb3J0IHsgTlRva2VuU2VydmljZSB9IGZyb20gJy4vbi10b2tlbi5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBDbGllbnRNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG4vLyBpbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgUm91dGVyTW9kdWxlLCBSb3V0ZXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgSHR0cE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuaW1wb3J0IHsgTmdGb3JhZ2VNb2R1bGUgfSBmcm9tICduZ2ZvcmFnZSc7XG5cbmltcG9ydCB7IFNuYWNrQ29tcG9uZW50IH0gZnJvbSAnLi9zbmFja2Jhci9zbmFjay9zbmFjay5jb21wb25lbnQnO1xuaW1wb3J0IHsgU25hY2tiYXJDb21wb25lbnQgfSBmcm9tICcuL3NuYWNrYmFyL3NuYWNrYmFyL3NuYWNrYmFyLmNvbXBvbmVudCc7XG4vLyBpbXBvcnQge1NhZmVIdG1sUGlwZX0gZnJvbSAnLi9zbmFja2Jhci9waXBlL3NhZmUtaHRtbC5waXBlJztcblxuXG4vLyBleHBvcnQgZnVuY3Rpb24gdXBkYXRlRW52UHJvcGVydGllcyhlbnYpIHtcbi8vICAgY29uc29sZS5sb2coZW52KTtcbi8vICAgTlN5c3RlbVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5lbnZpcm9ubWVudHMgPSBlbnY7XG4vLyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBzdGFydHVwU2VydmljZUZhY3Rvcnkoc3RhcnR1cFNlcnZpY2U6IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlKSB7XG4gIGNvbnN0IHJlcyA9ICgpID0+IHtcbiAgICAvLyBjb25zb2xlLmxvZygnbW9kdWxlIGJlZm9yZSBpbml0c3RvcmFnZSBjYWxsJyk7XG4gICAgcmV0dXJuIHN0YXJ0dXBTZXJ2aWNlLmluaXRTdG9yYWdlKCk7XG5cbiAgfVxuICByZXR1cm4gcmVzO1xufVxuXG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgSHR0cENsaWVudE1vZHVsZSxcbiAgICBSb3V0ZXJNb2R1bGUsXG4gICAgSHR0cE1vZHVsZSxcbiAgICBOZ0ZvcmFnZU1vZHVsZS5mb3JSb290KClcbiAgICAvLyBCcm93c2VyTW9kdWxlXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxuICAgICAgdXNlQ2xhc3M6IE5IdHRwU2VydmljZSxcbiAgICAgIG11bHRpOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBQcm92aWRlciBmb3IgQVBQX0lOSVRJQUxJWkVSXG4gICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICB1c2VGYWN0b3J5OiBzdGFydHVwU2VydmljZUZhY3RvcnksXG4gICAgICBkZXBzOiBbTkxvY2FsU3RvcmFnZVNlcnZpY2VdLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIE5BdXRoR3VhcmRTZXJ2aWNlLFxuICAgIE5EYXRhTW9kZWxTZXJ2aWNlLFxuICAgIC8vIE5EYXRhU291cmNlU2VydmljZSxcbiAgICBOSHR0cFNlcnZpY2UsXG4gICAgTkhUVFBMb2FkZXJTZXJ2aWNlLFxuICAgIE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlLFxuICAgIE5Mb2dpblNlcnZpY2UsXG4gICAgTkxvZ291dFNlcnZpY2UsXG4gICAgTk5vdGlmaWNhdGlvblNlcnZpY2UsXG4gICAgTlNuYWNrYmFyU2VydmljZSxcbiAgICBOUHViU3ViU2VydmljZSxcbiAgICAvLyAgICAgTlN5c3RlbVNlcnZpY2UsXG4gICAgTlNlc3Npb25TdG9yYWdlU2VydmljZSxcbiAgICBOVG9rZW5TZXJ2aWNlXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFNuYWNrQ29tcG9uZW50LFxuICAgIFNuYWNrYmFyQ29tcG9uZW50XG4gIF0sXG4gIGV4cG9ydHM6IFtcbiAgICBTbmFja0NvbXBvbmVudCxcbiAgICBTbmFja2JhckNvbXBvbmVudFxuICBdXG5cbn0pXG5leHBvcnQgY2xhc3MgTmV1dHJpbm9zU2VlZFNlcnZpY2VzTW9kdWxlIHtcblxufVxuIl19
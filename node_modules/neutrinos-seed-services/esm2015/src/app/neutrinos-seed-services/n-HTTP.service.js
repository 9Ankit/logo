/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { HttpHeaders, HttpErrorResponse, HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs/Rx';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
import { NSystemService } from './n-system.service';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NTokenService } from './n-token.service';
import { NPubSubService } from './n-pubSub.service';
export class NHttpService {
    /**
     * @param {?} nHTTPLoader
     * @param {?} inj
     * @param {?} nLocalStorageService
     * @param {?} nTokenService
     */
    constructor(nHTTPLoader, inj, nLocalStorageService, nTokenService) {
        this.nHTTPLoader = nHTTPLoader;
        this.inj = inj;
        this.nLocalStorageService = nLocalStorageService;
        this.nTokenService = nTokenService;
        this.timeout = 90000;
        this.isRefreshingToken = false;
        this.tokenSubject = new BehaviorSubject(null);
        this.systemService = NSystemService.getInstance();
        this.nSessionStorage = new NSessionStorageService();
        this.appProperties = this.systemService.getVal('properties');
        this.nPubSubService = new NPubSubService();
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        this.requestInterceptor();
        // Pass on the cloned request instead of the original request.
        return next.handle(this.requestOptions(req))
            .timeout(this.timeout)
            .catch(error => this.onCatch(error, req, next))
            .finally(() => {
            this.onFinally();
        });
    }
    ;
    /**
     * @param {?} error
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    updateToken(error, req, next) {
        if (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||
            this.appProperties.appAuthenticationStrategy === 'localAuth') {
            if (!this.isRefreshingToken) {
                this.isRefreshingToken = true;
                // Reset here so that the following requests wait until the token
                // comes back from the refreshToken call.
                this.tokenSubject.next(null);
                return this.refreshToken()
                    .switchMap((tokensObj) => {
                    if (tokensObj) {
                        this.nTokenService.updateTokens(tokensObj);
                        const /** @type {?} */ newToken = tokensObj['accessToken'];
                        this.tokenSubject.next(newToken);
                        return next.handle(this.requestOptions(req));
                    }
                    return Observable.throw(new Error('Can\'t refresh the token'));
                })
                    .catch(err => this.onCatchError(err))
                    .finally(() => this.isRefreshingToken = false);
            }
            else {
                return this.tokenSubject
                    .filter(token => token != null)
                    .take(1)
                    .switchMap(token => next.handle(this.requestOptions(req)));
            }
        }
        else {
            return this.onCatchError(error);
        }
    }
    /**
     * @return {?}
     */
    refreshToken() {
        const /** @type {?} */ http = this.inj.get(HttpClient);
        const /** @type {?} */ appProperties = this.systemService.getVal('properties');
        const /** @type {?} */ refreshUrl = this.systemService.getAuthUrl() + appProperties.appName + '/refresh';
        const /** @type {?} */ body = {
            'platformDetails': this.systemService.getPlatformDetails(this.systemService.checkDevice()),
            'userKey': this.nSessionStorage.getValue('userObj')['userKey'],
            'refreshToken': this.nSessionStorage.getValue('refreshToken')
        };
        body.platformDetails['uuid'] = this.nLocalStorageService.getValue('uuid');
        return http.post(refreshUrl, body);
    }
    /**
     * Request options.
     * @param {?=} req
     * @return {?} HttpRequest
     */
    requestOptions(req) {
        let /** @type {?} */ headers = req.headers;
        if (req.headers == null) {
            headers = new HttpHeaders();
        }
        req = req.clone({
            url: this.getFullUrl(req.url),
            headers: headers
        });
        const /** @type {?} */ baseUrl = NSystemService.getInstance().getVal('baseUrl');
        const /** @type {?} */ isArt = (baseUrl !== '' && req.url.includes(baseUrl));
        return isArt ? this.addDefaultHeaders(req) : req;
    }
    /**
     * Default options.
     * @param {?} req
     * @return {?} HttpHeadedrs
     */
    addDefaultHeaders(req) {
        /**
             * TODO: Add all default Headers over here
             */
        if (!req.headers.has('Access-Control-Allow-Origin')) {
            req.headers = req.headers.set('Access-Control-Allow-Origin', '*');
        }
        if (!req.headers.has('Content-Type')) {
            req.headers = req.headers.set('Content-Type', 'application/json');
        }
        else if (req.headers.has('Content-Type') && (req.headers.get('Content-Type') === 'no-content')) {
            req.headers = req.headers.delete('Content-Type');
        }
        if (!req.headers.has('Accept')) {
            req.headers = req.headers.set('Accept', 'application/json');
        }
        if (!req.headers.has('Authorization')) {
            this.appProperties = this.systemService.getVal('properties');
            if (this.appProperties && this.appProperties.appAuthenticationStrategy === 'basicAuth') {
                let /** @type {?} */ username, /** @type {?} */ password;
                if (this.appProperties.basicAuthUser && this.appProperties.basicAuthPassword) {
                    username = this.appProperties.basicAuthUser;
                    password = this.appProperties.basicAuthPassword;
                }
                else {
                    username = "bhive-art-proxyuser";
                    password = "password";
                    console.warn("Authentication strategy: Basic Auth. basicAuthUser and basicAuthPassword are not configured in environment. Setting default values.");
                }
                req.headers = req.headers.set('Authorization', 'Basic ' + btoa(username + ":" + password));
            }
            else if (this.appProperties && (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||
                this.appProperties.appAuthenticationStrategy === 'localAuth')) {
                if (this.nSessionStorage.getValue('accessToken')) {
                    req.headers = req.headers.set('Authorization', 'Bearer ' + this.nSessionStorage.getValue('accessToken'));
                }
            }
        }
        return req;
    }
    /**
     * Build API url.
     * @param {?} url
     * @return {?} string
     */
    getFullUrl(url) {
        // return full URL to API here
        return url;
    }
    /**
     * Request interceptor.
     * @return {?}
     */
    requestInterceptor() {
        this.nHTTPLoader.isHTTPRequestInProgress(true);
    }
    /**
     * Response interceptor.
     * @return {?}
     */
    responseInterceptor() {
        this.nHTTPLoader.isHTTPRequestInProgress(false);
    }
    /**
     * Error handler.
     * @param {?} error
     * @param {?} req
     * @param {?} next
     * @return {?} ErrorObservable
     */
    onCatch(error, req, next) {
        if (error instanceof HttpErrorResponse) {
            if ((/** @type {?} */ (error)).status === 403 && (/** @type {?} */ (error)).error.message === 'jwt expired') {
                return this.updateToken(error, req, next);
            }
            else {
                return this.onSubscribeError(error);
            }
        }
        else {
            return this.onSubscribeError(error);
        }
    }
    /**
     * onSubscribeError
     * @param {?} err
     * @return {?}
     */
    onSubscribeError(err) {
        this.nHTTPLoader.alertError(err);
        return this.onCatchError(err);
    }
    /**
     * onFinally
     * @return {?}
     */
    onFinally() {
        this.responseInterceptor();
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onCatchError(error) {
        return Observable.throw(error);
    }
}
NHttpService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NHttpService.ctorParameters = () => [
    { type: NHTTPLoaderService, },
    { type: Injector, },
    { type: NLocalStorageService, },
    { type: NTokenService, },
];
function NHttpService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NHttpService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NHttpService.ctorParameters;
    /** @type {?} */
    NHttpService.prototype.timeout;
    /** @type {?} */
    NHttpService.prototype.systemService;
    /** @type {?} */
    NHttpService.prototype.nSessionStorage;
    /** @type {?} */
    NHttpService.prototype.appProperties;
    /** @type {?} */
    NHttpService.prototype.isRefreshingToken;
    /** @type {?} */
    NHttpService.prototype.nPubSubService;
    /** @type {?} */
    NHttpService.prototype.tokenSubject;
    /** @type {?} */
    NHttpService.prototype.nHTTPLoader;
    /** @type {?} */
    NHttpService.prototype.inj;
    /** @type {?} */
    NHttpService.prototype.nLocalStorageService;
    /** @type {?} */
    NHttpService.prototype.nTokenService;
}

//# sourceMappingURL=data:application/json;base64,
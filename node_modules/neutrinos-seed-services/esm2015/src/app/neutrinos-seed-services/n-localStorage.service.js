/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NSystemService } from './n-system.service';
import { Injectable } from '@angular/core';
import { NgForage, NgForageCache, NgForageConfig } from 'ngforage';
import { NUtility } from './n-util.service';
export class NLocalStorageService {
    /**
     * @param {?=} ngfConfig
     * @param {?=} ngf
     * @param {?=} ngfCache
     */
    constructor(ngfConfig, ngf, ngfCache) {
        this.ngfConfig = ngfConfig;
        this.ngf = ngf;
        this.ngfCache = ngfCache;
        this.storageCache = {};
    }
    /**
     * @return {?}
     */
    initStorage() {
        return new Promise((resolve, reject) => {
            if (window['cordova']) {
                this.initNgForage();
            }
            this.ngf.iterate((value, key, iteratonNumber) => {
                this.storageCache[key] = value;
            }).then(result => {
                this.checkDeviceId();
                return resolve('iteration is completed');
            }).catch(error => {
                return reject(error);
            });
        });
    }
    /**
     * @return {?}
     */
    getStorage() {
        return this.storageCache;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setValue(key, value) {
        if (window['cordova']) {
            this.initNgForage();
        }
        this.storageCache[key] = value;
        return this.ngf.setItem(key, value).then(result => {
            return result;
        }, error => {
            console.log(error);
        });
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        if (!this.storageCache[key]) {
            return null;
        }
        try {
            const /** @type {?} */ obj = this.storageCache[key];
            return JSON.parse(obj);
        }
        catch (/** @type {?} */ error) {
            return this.storageCache[key];
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    remove(key) {
        delete this.storageCache[key];
        if (window['cordova']) {
            this.initNgForage();
        }
        this.ngf.removeItem(key).then(fulfilled => {
            delete this.ngf[key];
        }).catch(error => {
            console.error('Could not remove', key);
        });
    }
    /**
     * @return {?}
     */
    clear() {
        this.storageCache = {};
        this.ngf.clear();
    }
    /**
     * @return {?}
     */
    pluginCheck() {
        if (window['cordova'] && window['NativeStorage']) {
            this.nativeStorageI = window['NativeStorage'];
            // return true;
        }
        // this.initStorage();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getItemNs(key) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.getItem(key, result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItemNs(key, value) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.setItem(key, value, result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItemNs(key) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.remove(key, (result) => {
                    resolve(result);
                }, (error) => {
                    reject(error);
                });
            }
        });
    }
    /**
     * @return {?}
     */
    clearNs() {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.clear(result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    /**
     * @return {?}
     */
    initNgForage() {
        this.ngfConfig.configure({
            name: 'MyApp',
            driver: [
                NgForageConfig.DRIVER_WEBSQL,
            ]
        });
    }
    /**
     * @param {?} promise
     * @return {?}
     */
    promiseReflect(promise) {
        return promise.then(resolved => { return { v: resolved, status: 'resolved' }; }, error => { return { e: error, status: 'rejected' }; });
    }
    /**
     * @return {?}
     */
    clearLocalStorage() {
        this.remove('userObj');
        this.remove('accessToken');
        this.remove('refreshToken');
        this.remove('registrationId');
    }
    /**
     * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
     * @return {?}
     */
    checkDeviceId() {
        if (NSystemService.getInstance().checkDevice() === 'browser') {
            this._deviceUUID = this.getValue('uuid');
            if (!this._deviceUUID) {
                this._deviceUUID = new NUtility().generateUUID();
                this.setValue('uuid', this._deviceUUID);
            }
        }
        else {
            window['plugins'].uniqueDeviceID.get((uuid) => {
                this._deviceUUID = uuid;
                this.setValue('uuid', this._deviceUUID);
            });
        }
        return this._deviceUUID;
    }
    /**
     * @return {?}
     */
    get deviceUUID() {
        return this._deviceUUID;
    }
}
NLocalStorageService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NLocalStorageService.ctorParameters = () => [
    { type: NgForageConfig, },
    { type: NgForage, },
    { type: NgForageCache, },
];
function NLocalStorageService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NLocalStorageService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NLocalStorageService.ctorParameters;
    /** @type {?} */
    NLocalStorageService.prototype.storageCache;
    /** @type {?} */
    NLocalStorageService.prototype._deviceUUID;
    /** @type {?} */
    NLocalStorageService.prototype.nativeStorageI;
    /** @type {?} */
    NLocalStorageService.prototype.ngfConfig;
    /** @type {?} */
    NLocalStorageService.prototype.ngf;
    /** @type {?} */
    NLocalStorageService.prototype.ngfCache;
}

//# sourceMappingURL=data:application/json;base64,
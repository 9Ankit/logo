/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, EventEmitter, Output } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { NSystemService } from './n-system.service';
import { NTokenService } from './n-token.service';
import { NPubSubService } from './n-pubSub.service';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NNotificationService } from './n-notification.service';
import 'rxjs/add/operator/map';
export class NLoginService {
    /**
     * @param {?} http
     * @param {?} pubSubService
     * @param {?} notificationService
     * @param {?} nLocalStorageService
     * @param {?} nTokenService
     */
    constructor(http, pubSubService, notificationService, nLocalStorageService, nTokenService) {
        this.http = http;
        this.pubSubService = pubSubService;
        this.notificationService = notificationService;
        this.nLocalStorageService = nLocalStorageService;
        this.nTokenService = nTokenService;
        this.loginCompleted = new EventEmitter();
        this.systemService = NSystemService.getInstance();
        // this.nTokenService = new NTokenService();
        this.nSessionStorage = new NSessionStorageService();
        // this.nLocalStorageService = new NLocalStorageService();
    }
    /**
     * @param {?} userName
     * @param {?} password
     * @param {?=} isRemember
     * @return {?}
     */
    login(userName, password, isRemember) {
        this.appProperties = this.systemService.getVal('properties');
        this.loginUrl = this.systemService.getAuthUrl() + this.appProperties.appName;
        this.uuid = this.nLocalStorageService.getValue('uuid');
        if (!this.uuid) {
            this.uuid = this.nLocalStorageService.checkDeviceId();
        }
        this.details = {
            username: userName,
            password: password,
        };
        this.details.platformDetails = this.systemService.getPlatformDetails(this.systemService.checkDevice());
        this.details.platformDetails['uuid'] = this.uuid;
        return this.http.post(this.loginUrl, JSON.stringify(this.details)).map(result => {
            const /** @type {?} */ tokensObj = result;
            if (tokensObj) {
                this.nTokenService.updateTokens(tokensObj, isRemember);
            }
            // TODO chris array of supported pushes currently only support APNS and Firebase
            if ((this.systemService.getVal('firebaseSenderId') != 'FIREBASE_SENDER_ID' && this.systemService.getVal('firebaseAuthKey') != 'FIREBASE_AUTH_KEY')
                || (this.systemService.getVal('pushType') === 'APNS' && this.systemService.isIOS())) {
                this.pubSubService.$pub('firebaseRegister');
            }
            this.pubSubService.$pub('loginComplete');
            return (result);
        }, error => {
            return (error);
        });
    }
    /**
     * @return {?}
     */
    isLoggedIn() {
        return this.nLocalStorageService.initStorage().then(result => {
            if (this.nSessionStorage.getValue('accessToken') && this.nSessionStorage.getValue('refreshToken') &&
                this.nSessionStorage.getValue('accessToken') != 'null' && this.nSessionStorage.getValue('refreshToken') != 'null') {
                return true;
            }
            return false;
        }).catch(error => {
            return false;
        });
    }
}
NLoginService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NLoginService.ctorParameters = () => [
    { type: HttpClient, },
    { type: NPubSubService, },
    { type: NNotificationService, },
    { type: NLocalStorageService, },
    { type: NTokenService, },
];
NLoginService.propDecorators = {
    "loginCompleted": [{ type: Output },],
};
function NLoginService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NLoginService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NLoginService.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NLoginService.propDecorators;
    /** @type {?} */
    NLoginService.prototype.loginUrl;
    /** @type {?} */
    NLoginService.prototype.appProperties;
    /** @type {?} */
    NLoginService.prototype.systemService;
    /** @type {?} */
    NLoginService.prototype.nSessionStorage;
    /** @type {?} */
    NLoginService.prototype.uuid;
    /** @type {?} */
    NLoginService.prototype.details;
    /** @type {?} */
    NLoginService.prototype.loginCompleted;
    /** @type {?} */
    NLoginService.prototype.http;
    /** @type {?} */
    NLoginService.prototype.pubSubService;
    /** @type {?} */
    NLoginService.prototype.notificationService;
    /** @type {?} */
    NLoginService.prototype.nLocalStorageService;
    /** @type {?} */
    NLoginService.prototype.nTokenService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1sb2dpbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tbG9naW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLHVCQUF1QixDQUFDO0FBSy9CLE1BQU07Ozs7Ozs7O0lBU0osWUFBb0IsSUFBZ0IsRUFBVSxhQUE2QixFQUFVLG1CQUF5QyxFQUNwSCxzQkFBb0QsYUFBNEI7UUFEdEUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFnQjtRQUFVLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBc0I7UUFDcEgseUJBQW9CLEdBQXBCLG9CQUFvQjtRQUFnQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTs4QkFGL0QsSUFBSSxZQUFZLEVBQUU7UUFHM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7O1FBRWxELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxzQkFBc0IsRUFBRSxD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LE1BQU0sQ0FBQyxLQUFLLENBQUM7U0FDZCxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2YsTUFBTSxDQUFDLEtBQUssQ0FBQztTQUNkLENBQUMsQ0FBQztLQUVKOzs7WUE1REYsVUFBVTs7OztZQVhGLFVBQVU7WUFHVixjQUFjO1lBR2Qsb0JBQW9CO1lBRHBCLG9CQUFvQjtZQUhwQixhQUFhOzs7K0JBa0JuQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBOU3lzdGVtU2VydmljZSB9IGZyb20gJy4vbi1zeXN0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBOVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi9uLXRva2VuLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlB1YlN1YlNlcnZpY2UgfSBmcm9tICcuL24tcHViU3ViLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlNlc3Npb25TdG9yYWdlU2VydmljZSB9IGZyb20gJy4vbi1zZXNzaW9uU3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvY2FsU3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5Ob3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9uLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCAncnhqcy9hZGQvb3BlcmF0b3IvbWFwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tIFwicnhqcy9PYnNlcnZhYmxlXCI7XG5cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5Mb2dpblNlcnZpY2Uge1xuICBsb2dpblVybDtcbiAgYXBwUHJvcGVydGllcztcbiAgc3lzdGVtU2VydmljZTtcbiAgblNlc3Npb25TdG9yYWdlO1xuICB1dWlkO1xuICBkZXRhaWxzOiBhbnk7XG5cbiAgQE91dHB1dCgpIGxvZ2luQ29tcGxldGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgcHViU3ViU2VydmljZTogTlB1YlN1YlNlcnZpY2UsIHByaXZhdGUgbm90aWZpY2F0aW9uU2VydmljZTogTk5vdGlmaWNhdGlvblNlcnZpY2UsXG4gICAgcHJpdmF0ZSBuTG9jYWxTdG9yYWdlU2VydmljZTogTkxvY2FsU3RvcmFnZVNlcnZpY2UsIHByaXZhdGUgblRva2VuU2VydmljZTogTlRva2VuU2VydmljZSkge1xuICAgIHRoaXMuc3lzdGVtU2VydmljZSA9IE5TeXN0ZW1TZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgLy8gdGhpcy5uVG9rZW5TZXJ2aWNlID0gbmV3IE5Ub2tlblNlcnZpY2UoKTtcbiAgICB0aGlzLm5TZXNzaW9uU3RvcmFnZSA9IG5ldyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlKCk7XG4gICAgLy8gdGhpcy5uTG9jYWxTdG9yYWdlU2VydmljZSA9IG5ldyBOTG9jYWxTdG9yYWdlU2VydmljZSgpO1xuICB9XG5cblxuICBsb2dpbih1c2VyTmFtZSwgcGFzc3dvcmQsIGlzUmVtZW1iZXI/KSB7XG4gICAgdGhpcy5hcHBQcm9wZXJ0aWVzID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgncHJvcGVydGllcycpO1xuICAgIHRoaXMubG9naW5VcmwgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0QXV0aFVybCgpICsgdGhpcy5hcHBQcm9wZXJ0aWVzLmFwcE5hbWU7XG4gICAgdGhpcy51dWlkID0gdGhpcy5uTG9jYWxTdG9yYWdlU2VydmljZS5nZXRWYWx1ZSgndXVpZCcpO1xuICAgIGlmICghdGhpcy51dWlkKSB7XG4gICAgICB0aGlzLnV1aWQgPSB0aGlzLm5Mb2NhbFN0b3JhZ2VTZXJ2aWNlLmNoZWNrRGV2aWNlSWQoKTtcbiAgICB9XG4gICAgdGhpcy5kZXRhaWxzID0ge1xuICAgICAgdXNlcm5hbWU6IHVzZXJOYW1lLFxuICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkLFxuICAgIH07XG4gICAgdGhpcy5kZXRhaWxzLnBsYXRmb3JtRGV0YWlscyA9IHRoaXMuc3lzdGVtU2VydmljZS5nZXRQbGF0Zm9ybURldGFpbHModGhpcy5zeXN0ZW1TZXJ2aWNlLmNoZWNrRGV2aWNlKCkpO1xuICAgIHRoaXMuZGV0YWlscy5wbGF0Zm9ybURldGFpbHNbJ3V1aWQnXSA9IHRoaXMudXVpZDtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy5sb2dpblVybCwgSlNPTi5zdHJpbmdpZnkodGhpcy5kZXRhaWxzKSkubWFwKHJlc3VsdCA9PiB7XG4gICAgICBjb25zdCB0b2tlbnNPYmogPSByZXN1bHQ7XG4gICAgICBpZiAodG9rZW5zT2JqKSB7XG4gICAgICAgIHRoaXMublRva2VuU2VydmljZS51cGRhdGVUb2tlbnModG9rZW5zT2JqLCBpc1JlbWVtYmVyKTtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE8gY2hyaXMgYXJyYXkgb2Ygc3VwcG9ydGVkIHB1c2hlcyBjdXJyZW50bHkgb25seSBzdXBwb3J0IEFQTlMgYW5kIEZpcmViYXNlXG4gICAgICBpZiAoKHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ2ZpcmViYXNlU2VuZGVySWQnKSAhPSAnRklSRUJBU0VfU0VOREVSX0lEJyAmJiB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0VmFsKCdmaXJlYmFzZUF1dGhLZXknKSAhPSAnRklSRUJBU0VfQVVUSF9LRVknKSBcbiAgICAgICAgICAgfHwgKHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ3B1c2hUeXBlJykgPT09ICdBUE5TJyAmJiB0aGlzLnN5c3RlbVNlcnZpY2UuaXNJT1MoKSkpIHtcbiAgICAgICAgdGhpcy5wdWJTdWJTZXJ2aWNlLiRwdWIoJ2ZpcmViYXNlUmVnaXN0ZXInKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHViU3ViU2VydmljZS4kcHViKCdsb2dpbkNvbXBsZXRlJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCk7XG4gICAgfSwgZXJyb3IgPT4ge1xuICAgICAgcmV0dXJuIChlcnJvcik7XG4gICAgfSk7XG4gIH1cblxuICBpc0xvZ2dlZEluKCkge1xuICAgIHJldHVybiB0aGlzLm5Mb2NhbFN0b3JhZ2VTZXJ2aWNlLmluaXRTdG9yYWdlKCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHRoaXMublNlc3Npb25TdG9yYWdlLmdldFZhbHVlKCdhY2Nlc3NUb2tlbicpICYmIHRoaXMublNlc3Npb25TdG9yYWdlLmdldFZhbHVlKCdyZWZyZXNoVG9rZW4nKSAmJlxuICAgICAgICB0aGlzLm5TZXNzaW9uU3RvcmFnZS5nZXRWYWx1ZSgnYWNjZXNzVG9rZW4nKSAhPSAnbnVsbCcgJiYgdGhpcy5uU2Vzc2lvblN0b3JhZ2UuZ2V0VmFsdWUoJ3JlZnJlc2hUb2tlbicpICE9ICdudWxsJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgfVxufVxuIl19
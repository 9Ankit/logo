import { os, name, version } from 'platform';
import { Injectable, EventEmitter, Output, Injector, Component, Input, NgModule, APP_INITIALIZER } from '@angular/core';
import { NgForage, NgForageCache, NgForageConfig, NgForageModule } from 'ngforage';
import { Subject } from 'rxjs/Subject';
import { messaging } from 'firebase';
import { HttpClient, HttpHeaders, HttpErrorResponse, HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';
import 'rxjs/add/operator/map';
import { Router, RouterModule } from '@angular/router';
import { Observable } from 'rxjs/Observable';
import { Observable as Observable$1, BehaviorSubject } from 'rxjs/Rx';
import { CommonModule } from '@angular/common';
import { HttpModule } from '@angular/http';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NSystemService {
    /**
     * @return {?}
     */
    static getInstance() {
        if (!this.instance) {
            this.instance = new NSystemService();
        }
        return this.instance;
    }
    constructor() {
        this._deviceType = this.checkDevice();
    }
    /**
     * Returna 'mobile' or 'browser' based on the platform
     * @return {?}
     */
    checkDevice() {
        if (window['device'] && (window['device']['platform'] != 'browser' || window['device']['platform'] != 'Browser')) {
            return 'mobile';
        }
        else if (window['device'] && (window['device']['platform'] == 'browser' || window['device']['platform'] == 'Browser')) {
            return 'cordova_browser';
        }
        else {
            return 'browser';
        }
    }
    /**
     * @return {?}
     */
    get deviceType() {
        return this._deviceType;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getVal(key) {
        if (!NSystemService.envProperties) {
            NSystemService.envProperties = window['neutrinos']['environments'];
            this.properties = NSystemService.envProperties.properties;
        }
        if (key == 'properties') {
            if (NSystemService.envProperties) {
                return NSystemService.envProperties.properties;
            }
            else {
                return undefined;
            }
        }
        else {
            if (NSystemService.envProperties && NSystemService.envProperties.properties) {
                return NSystemService.envProperties.properties[key];
            }
            else {
                return undefined;
            }
        }
    }
    /**
     * @return {?}
     */
    isAndroid() {
        if (window['device'] && window['device']['platform'] == 'Android') {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    isIOS() {
        if (window['device'] && window['device']['platform'] == 'iOS') {
            return true;
        }
        else {
            return false;
        }
    }
    /**
     * @return {?}
     */
    getAndroidVersion() {
        if (this.isAndroid()) {
            return window['device']['version'];
        }
        else {
            return '';
        }
    }
    /**
     * @return {?}
     */
    getAuthUrl() {
        // this.properties = this.getVal('properties');
        return this.properties.baseUrl + this.properties.tenantName + '/auth/';
    }
    /**
     * @return {?}
     */
    getTenantUrl() {
        return this.properties.baseUrl + this.properties.tenantName + '/';
    }
    /**
     * @return {?}
     */
    getAppUrl() {
        return this.properties.baseUrl + this.properties.tenantName + '/proxy/' + this.properties.appName + '/';
    }
    /**
     * @return {?}
     */
    getProxyUrl() {
        return this.properties.baseUrl + this.properties.tenantName + '/proxy/';
    }
    /**
     * @return {?}
     */
    getDataModelUrl() {
        return this.properties.baseUrl + this.properties.tenantName + '/datamodel/' + this.properties.appDataSource + '/' + this.properties.appName + '/';
    }
    /**
     * @return {?}
     */
    getFileIOUrl() {
        return this.properties.baseUrl + this.properties.tenantName + '/fileio/' +
            this.properties.appDataSource + '/' + this.properties.appName + '/';
    }
    /**
     * @param {?} type
     * @return {?}
     */
    getPlatformDetails(type) {
        const /** @type {?} */ pDetails = {
            platform: os.family,
            platformVersion: os.version,
        };
        if (type === 'browser') {
            return Object.assign(pDetails, {
                type: 'browser',
                browser: name,
                browserVersion: version,
            });
        }
        else if (type === 'mobile' || type === 'cordova_browser') {
            return Object.assign(pDetails, {
                type: 'mobile',
                model: window['device'].model,
                manufacturer: window['device'].manufacturer,
                isVirtual: window['device'].isVirtual
            });
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NSessionStorageService {
    constructor() {
        NSessionStorageService.sessionStorageCache = sessionStorage;
    }
    /**
     * @return {?}
     */
    getSessionStorage() {
        return NSessionStorageService.sessionStorageCache;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setValue(key, value) {
        NSessionStorageService.sessionStorageCache[key] = value;
        sessionStorage.setItem(key, value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        if (!NSessionStorageService.sessionStorageCache[key]) {
            return null;
        }
        try {
            const /** @type {?} */ obj = NSessionStorageService.sessionStorageCache[key];
            return JSON.parse(obj);
        }
        catch (/** @type {?} */ error) {
            return NSessionStorageService.sessionStorageCache[key];
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    remove(key) {
        if (NSessionStorageService.sessionStorageCache.hasOwnProperty(key)) {
            delete NSessionStorageService.sessionStorageCache[key];
            sessionStorage.removeItem(key);
        }
    }
    /**
     * @return {?}
     */
    clearSessionStorage() {
        NSessionStorageService.sessionStorageCache = {};
        sessionStorage.clear();
    }
}
NSessionStorageService.sessionStorageCache = {};
NSessionStorageService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NSessionStorageService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NUtility {
    constructor() { }
    /**
     * @return {?}
     */
    generateUUID() {
        return this.__s4() + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + this.__s4() + this.__s4();
    }
    /**
     * @return {?}
     */
    __s4() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NLocalStorageService {
    /**
     * @param {?=} ngfConfig
     * @param {?=} ngf
     * @param {?=} ngfCache
     */
    constructor(ngfConfig, ngf, ngfCache) {
        this.ngfConfig = ngfConfig;
        this.ngf = ngf;
        this.ngfCache = ngfCache;
        this.storageCache = {};
    }
    /**
     * @return {?}
     */
    initStorage() {
        return new Promise((resolve, reject) => {
            if (window['cordova']) {
                this.initNgForage();
            }
            this.ngf.iterate((value, key, iteratonNumber) => {
                this.storageCache[key] = value;
            }).then(result => {
                this.checkDeviceId();
                return resolve('iteration is completed');
            }).catch(error => {
                return reject(error);
            });
        });
    }
    /**
     * @return {?}
     */
    getStorage() {
        return this.storageCache;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setValue(key, value) {
        if (window['cordova']) {
            this.initNgForage();
        }
        this.storageCache[key] = value;
        return this.ngf.setItem(key, value).then(result => {
            return result;
        }, error => {
            console.log(error);
        });
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getValue(key) {
        if (!this.storageCache[key]) {
            return null;
        }
        try {
            const /** @type {?} */ obj = this.storageCache[key];
            return JSON.parse(obj);
        }
        catch (/** @type {?} */ error) {
            return this.storageCache[key];
        }
    }
    /**
     * @param {?} key
     * @return {?}
     */
    remove(key) {
        delete this.storageCache[key];
        if (window['cordova']) {
            this.initNgForage();
        }
        this.ngf.removeItem(key).then(fulfilled => {
            delete this.ngf[key];
        }).catch(error => {
            console.error('Could not remove', key);
        });
    }
    /**
     * @return {?}
     */
    clear() {
        this.storageCache = {};
        this.ngf.clear();
    }
    /**
     * @return {?}
     */
    pluginCheck() {
        if (window['cordova'] && window['NativeStorage']) {
            this.nativeStorageI = window['NativeStorage'];
            // return true;
        }
        // this.initStorage();
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getItemNs(key) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.getItem(key, result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItemNs(key, value) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.setItem(key, value, result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItemNs(key) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.remove(key, (result) => {
                    resolve(result);
                }, (error) => {
                    reject(error);
                });
            }
        });
    }
    /**
     * @return {?}
     */
    clearNs() {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.clear(result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    /**
     * @return {?}
     */
    initNgForage() {
        this.ngfConfig.configure({
            name: 'MyApp',
            driver: [
                NgForageConfig.DRIVER_WEBSQL,
            ]
        });
    }
    /**
     * @param {?} promise
     * @return {?}
     */
    promiseReflect(promise) {
        return promise.then(resolved => { return { v: resolved, status: 'resolved' }; }, error => { return { e: error, status: 'rejected' }; });
    }
    /**
     * @return {?}
     */
    clearLocalStorage() {
        this.remove('userObj');
        this.remove('accessToken');
        this.remove('refreshToken');
        this.remove('registrationId');
    }
    /**
     * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
     * @return {?}
     */
    checkDeviceId() {
        if (NSystemService.getInstance().checkDevice() === 'browser') {
            this._deviceUUID = this.getValue('uuid');
            if (!this._deviceUUID) {
                this._deviceUUID = new NUtility().generateUUID();
                this.setValue('uuid', this._deviceUUID);
            }
        }
        else {
            window['plugins'].uniqueDeviceID.get((uuid) => {
                this._deviceUUID = uuid;
                this.setValue('uuid', this._deviceUUID);
            });
        }
        return this._deviceUUID;
    }
    /**
     * @return {?}
     */
    get deviceUUID() {
        return this._deviceUUID;
    }
}
NLocalStorageService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NLocalStorageService.ctorParameters = () => [
    { type: NgForageConfig, },
    { type: NgForage, },
    { type: NgForageCache, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NTokenService {
    /**
     * @param {?} nLocalStorageService
     */
    constructor(nLocalStorageService) {
        this.nLocalStorageService = nLocalStorageService;
        this.nSessionStorage = new NSessionStorageService();
        // this.nLocalStorageService = new NLocalStorageService();
    }
    /**
     * @param {?} tokensObj
     * @param {?=} isRemember
     * @return {?}
     */
    updateTokens(tokensObj, isRemember) {
        let /** @type {?} */ userObj = this.decodeToken(tokensObj['accessToken']);
        this.nSessionStorage.setValue('accessToken', tokensObj['accessToken']);
        this.nSessionStorage.setValue('refreshToken', tokensObj['refreshToken']);
        this.nSessionStorage.setValue('userObj', JSON.stringify(userObj));
        if ((isRemember || this.nLocalStorageService.getValue('accessToken'))) {
            this.nLocalStorageService.setValue('accessToken', tokensObj['accessToken']);
            this.nLocalStorageService.setValue('refreshToken', tokensObj['refreshToken']);
            this.nLocalStorageService.setValue('userObj', JSON.stringify(userObj));
        }
    }
    /**
     * @return {?}
     */
    updateSessionStorage() {
        this.updateTokens(this.nLocalStorageService.getStorage(), true);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    urlBase64Decode(str) {
        let /** @type {?} */ output = str.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw 'Illegal base64url string!';
            }
        }
        return this.b64DecodeUnicode(output);
    }
    /**
     * @param {?} str
     * @return {?}
     */
    b64decode(str) {
        let /** @type {?} */ chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        let /** @type {?} */ output = '';
        str = String(str).replace(/=+$/, '');
        if (str.length % 4 == 1) {
            throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
        }
        for (
        // initialize result and counters
        let /** @type {?} */ bc = 0, /** @type {?} */ bs, /** @type {?} */ buffer, /** @type {?} */ idx = 0; 
        // get next character
        buffer = str.charAt(idx++); 
        // character found in table? initialize bit storage and add its ascii value;
        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
            // and if not first of each 4 characters,
            // convert the first 8 bits to one ascii character
            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
            // try to find character in table (0-63, not found => -1)
            buffer = chars.indexOf(buffer);
        }
        return output;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    b64DecodeUnicode(str) {
        return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), (c) => {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
    }
    /**
     * @param {?} token
     * @return {?}
     */
    decodeToken(token) {
        let /** @type {?} */ parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        let /** @type {?} */ decoded = this.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token');
        }
        return JSON.parse(decoded);
    }
    /**
     * @param {?} token
     * @return {?}
     */
    getTokenExpirationDate(token) {
        let /** @type {?} */ decoded;
        decoded = this.decodeToken(token);
        if (!decoded.hasOwnProperty('exp')) {
            return null;
        }
        let /** @type {?} */ date = new Date(0); // The 0 here is the key, which sets the date to the epoch
        date.setUTCSeconds(decoded.exp);
        return date;
    }
    /**
     * @param {?} token
     * @param {?=} offsetSeconds
     * @return {?}
     */
    isTokenExpired(token, offsetSeconds) {
        let /** @type {?} */ date = this.getTokenExpirationDate(token);
        offsetSeconds = offsetSeconds || 0;
        if (date == null) {
            return false;
        }
        // Token expired?
        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));
    }
}
NTokenService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NTokenService.ctorParameters = () => [
    { type: NLocalStorageService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ ServiceName = "PubSub Service";
class NPubSubService {
    constructor() {
        this.events = {};
    }
    /**
     * @param {?} event
     * @param {?=} callback
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */
    $sub(event, callback, error, complete) {
        if (!event) {
            throw new Error(`[${ServiceName}] => Subscription method must get event name.`);
        }
        if (this.events[event] === undefined) {
            this.events[event] = new Subject();
        }
        if (typeof callback !== 'function') {
            return this.events[event].asObservable();
        }
        else {
            return this.events[event].asObservable().subscribe(callback, error, complete);
        }
    }
    /**
     * @param {?} event
     * @param {?=} eventObject
     * @return {?}
     */
    $pub(event, eventObject) {
        if (!event) {
            throw new Error(`[${ServiceName}] => Publish method must get event name.`);
        }
        else if (!this.events[event]) {
            return;
        }
        this.events[event].next(eventObject);
    }
}
NPubSubService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NPubSubService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NLogoutService {
    /**
     * @param {?} nLocalStorageService
     */
    constructor(nLocalStorageService) {
        this.nLocalStorageService = nLocalStorageService;
        this.nSessionStorage = new NSessionStorageService();
    }
    /**
     * @return {?}
     */
    logout() {
        this.nSessionStorage.clearSessionStorage();
        this.nLocalStorageService.clearLocalStorage();
        return true;
    }
}
NLogoutService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NLogoutService.ctorParameters = () => [
    { type: NLocalStorageService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NHTTPLoaderService {
    /**
     * @param {?} nLogoutService
     * @param {?} nPubSubService
     */
    constructor(nLogoutService, nPubSubService) {
        this.nLogoutService = nLogoutService;
        this.nPubSubService = nPubSubService;
        this.pendingRequests = 0;
        this.showLoading = false;
        this._isHTTPRequestInProgress = new Subject();
        this._isHTTPRequestInProgress$ = this._isHTTPRequestInProgress.asObservable();
    }
    /**
     * @param {?} bool
     * @return {?}
     */
    isHTTPRequestInProgress(bool) {
        if (bool) {
            this.pendingRequests++;
            if (!this.showLoading) {
                this._isHTTPRequestInProgress.next(bool);
            }
            this.showLoading = true;
        }
        else {
            this.pendingRequests--;
            if (this.pendingRequests <= 0) {
                if (this.showLoading) {
                    this._isHTTPRequestInProgress.next(bool);
                }
                this.showLoading = false;
            }
        }
    }
    /**
     * @param {?} error
     * @return {?}
     */
    alertError(error) {
        if (error.status < 200 || error.status > 500) {
            if (error.status === 0) {
                this.nPubSubService.$pub('openSnackBar', 'Connectivity issue');
            }
            else {
                this.nPubSubService.$pub('openSnackBar', 'Response failure');
            }
        }
        else if (error.status === 401) {
            this.nLogoutService.logout();
            if (error.error) {
                this.nPubSubService.$pub('openSnackBar', error.error);
            }
            else {
                this.nPubSubService.$pub('openSnackBar', error);
            }
        }
        else if (error.error) {
            if (error.error instanceof Object) {
                this.nPubSubService.$pub('openSnackBar', error.error.message);
            }
            else {
                this.nPubSubService.$pub('openSnackBar', error.error);
            }
        }
        else {
            this.nPubSubService.$pub('openSnackBar', 'Response failure');
        }
    }
}
NHTTPLoaderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NHTTPLoaderService.ctorParameters = () => [
    { type: NLogoutService, },
    { type: NPubSubService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NNotificationService {
    /**
     * @param {?} localStorageService
     * @param {?} pubSubService
     * @param {?} http
     * @param {?} bHttpLoader
     */
    constructor(localStorageService, pubSubService, http, bHttpLoader) {
        this.localStorageService = localStorageService;
        this.pubSubService = pubSubService;
        this.http = http;
        this.bHttpLoader = bHttpLoader;
        this.systemService = NSystemService.getInstance();
        this.possiblePushTypes = ['APNS', 'FCM'];
        this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');
        this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');
        this.appName = this.systemService.getVal('appName');
        this.deviceType = this.systemService.deviceType;
        this.sessionStorage = new NSessionStorageService();
        this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', () => {
            this.enableNotification();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    enableNotification() {
        let /** @type {?} */ pushType = this.getPushType(this.systemService.getVal('pushType'));
        document.addEventListener('deviceready', event => {
            if (this.isNotificationEnabled) {
                if (this.deviceType && this.deviceType != 'browser') {
                    this.deviceType = this.systemService.deviceType;
                    this.checkPermission(pushType).then(res => {
                        if (res) {
                            this.initializeNotifications(pushType);
                        }
                    });
                }
            }
        });
        if (this.isNotificationEnabled && pushType !== 'APNS') {
            if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {
                this.initialiseWebPush();
            }
        }
    }
    /**
     * @return {?}
     */
    initialiseWebPush() {
        const /** @type {?} */ __this = this;
        const /** @type {?} */ messaging$$1 = messaging();
        messaging$$1.requestPermission()
            .then(function () {
            return messaging$$1.getToken();
        })
            .then(function (token) {
            if (token) {
                __this.sendRegDetails(token);
            }
        })
            .catch(function (err) {
            __this.bHttpLoader.alertError(err);
        });
        messaging$$1.onMessage(function (payload) {
            if (payload['notification']) {
                let /** @type {?} */ notificationObj = payload['notification'];
                let /** @type {?} */ options = {
                    body: notificationObj.body,
                    icon: notificationObj.icon
                };
                // creating a native browser message
                let /** @type {?} */ notificationUI = new Notification(notificationObj.title, options);
                notificationUI.onclick = function () {
                    window.focus(); // window is focused when the user clicks the notification using this
                };
            }
        });
    }
    /**
     * @param {?=} pushType
     * @return {?}
     */
    checkPermission(pushType) {
        // Android & iOS only
        // Checks whether the push notification permission has been granted.
        return new Promise((resolve) => {
            pushType = this.getPushType(pushType);
            if ((this.deviceType === 'Android' || this.deviceType === 'iOS') && (pushType === 'FCM')) {
                PushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else if (this.deviceType === 'iOS' && pushType === 'APNS') {
                APNSPushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else {
                return resolve(true);
            }
        });
    }
    /**
     * @param {?=} pushType
     * @return {?}
     */
    initializeNotifications(pushType) {
        //pushType = pushType ? pushType : 'FCM';
        pushType = this.getPushType(pushType);
        let /** @type {?} */ push;
        // Default if for FCM
        if (pushType === 'FCM') {
            push = window['PushNotification'].init({
                android: {
                    senderID: this.firebaseSenderId
                },
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true",
                    senderID: this.firebaseSenderId
                },
            });
        }
        else if (pushType === 'APNS') {
            push = window['APNSPushNotification'].init({
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true"
                }
            });
        }
        push.on('registration', (data) => {
            // data.registrationId
            this.sendRegDetails(data.registrationId);
        });
        // ToDo Christy get call back function from app user to change what happens once a notification arrives
        push.on('notification', (data) => {
            window['cordova'].plugins.notification.local.schedule({
                title: data.title,
                text: data.message,
                sound: data.sound,
                at: new Date().getTime()
            });
        });
        push.on('error', (e) => {
            // e.message
            console.error(e);
        });
    }
    /**
     * @param {?} registrationId
     * @return {?}
     */
    sendRegDetails(registrationId) {
        this.localStorageService.setValue('registrationId', registrationId);
        var /** @type {?} */ url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';
        let /** @type {?} */ pushType = this.getPushType(this.systemService.getVal('pushType'));
        this.http.post(url, {
            'key': this.sessionStorage.getValue('userObj')['userKey'],
            'uuid': this.localStorageService.getValue('uuid'),
            'fbregid': registrationId,
            'pushType': pushType
        }).subscribe(result => {
            // this.pubSubService.$pub('FBRegComp');
        }, error => {
            console.log(error);
        });
    }
    /**
     * @param {?} currPushType
     * @return {?}
     */
    getPushType(currPushType) {
        let /** @type {?} */ isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());
        let /** @type {?} */ pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';
        return pushType;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.loginSubscribe.unSubscribe();
    }
}
NNotificationService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NNotificationService.ctorParameters = () => [
    { type: NLocalStorageService, },
    { type: NPubSubService, },
    { type: HttpClient, },
    { type: NHTTPLoaderService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NLoginService {
    /**
     * @param {?} http
     * @param {?} pubSubService
     * @param {?} notificationService
     * @param {?} nLocalStorageService
     * @param {?} nTokenService
     */
    constructor(http, pubSubService, notificationService, nLocalStorageService, nTokenService) {
        this.http = http;
        this.pubSubService = pubSubService;
        this.notificationService = notificationService;
        this.nLocalStorageService = nLocalStorageService;
        this.nTokenService = nTokenService;
        this.loginCompleted = new EventEmitter();
        this.systemService = NSystemService.getInstance();
        // this.nTokenService = new NTokenService();
        this.nSessionStorage = new NSessionStorageService();
        // this.nLocalStorageService = new NLocalStorageService();
    }
    /**
     * @param {?} userName
     * @param {?} password
     * @param {?=} isRemember
     * @return {?}
     */
    login(userName, password, isRemember) {
        this.appProperties = this.systemService.getVal('properties');
        this.loginUrl = this.systemService.getAuthUrl() + this.appProperties.appName;
        this.uuid = this.nLocalStorageService.getValue('uuid');
        if (!this.uuid) {
            this.uuid = this.nLocalStorageService.checkDeviceId();
        }
        this.details = {
            username: userName,
            password: password,
        };
        this.details.platformDetails = this.systemService.getPlatformDetails(this.systemService.checkDevice());
        this.details.platformDetails['uuid'] = this.uuid;
        return this.http.post(this.loginUrl, JSON.stringify(this.details)).map(result => {
            const /** @type {?} */ tokensObj = result;
            if (tokensObj) {
                this.nTokenService.updateTokens(tokensObj, isRemember);
            }
            // TODO chris array of supported pushes currently only support APNS and Firebase
            if ((this.systemService.getVal('firebaseSenderId') != 'FIREBASE_SENDER_ID' && this.systemService.getVal('firebaseAuthKey') != 'FIREBASE_AUTH_KEY')
                || (this.systemService.getVal('pushType') === 'APNS' && this.systemService.isIOS())) {
                this.pubSubService.$pub('firebaseRegister');
            }
            this.pubSubService.$pub('loginComplete');
            return (result);
        }, error => {
            return (error);
        });
    }
    /**
     * @return {?}
     */
    isLoggedIn() {
        return this.nLocalStorageService.initStorage().then(result => {
            if (this.nSessionStorage.getValue('accessToken') && this.nSessionStorage.getValue('refreshToken') &&
                this.nSessionStorage.getValue('accessToken') != 'null' && this.nSessionStorage.getValue('refreshToken') != 'null') {
                return true;
            }
            return false;
        }).catch(error => {
            return false;
        });
    }
}
NLoginService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NLoginService.ctorParameters = () => [
    { type: HttpClient, },
    { type: NPubSubService, },
    { type: NNotificationService, },
    { type: NLocalStorageService, },
    { type: NTokenService, },
];
NLoginService.propDecorators = {
    "loginCompleted": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NAuthGuardService {
    /**
     * @param {?} nLoginService
     * @param {?} router
     */
    constructor(nLoginService, router) {
        this.nLoginService = nLoginService;
        this.router = router;
    }
    /**
     * @return {?}
     */
    canActivate() {
        return this.nLoginService.isLoggedIn().then(result => {
            if (result) {
                return true;
            }
            else {
                this.router.navigate(['unauthorized']);
                return false;
            }
        });
    }
}
NAuthGuardService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NAuthGuardService.ctorParameters = () => [
    { type: NLoginService, },
    { type: Router, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NDataModelService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.invalidDataModelName = 'Invalid data model name.';
        this.invalidDataModelId = 'Invalid data model id.';
        this.invalidDataModelObj = 'Invalid data model object.';
        this.systemService = NSystemService.getInstance();
    }
    /**
     *
     * @param {?} dataModelName
     * @param {?=} filter The filter query parameter allows to specify conditions on the documents to return.
     * The filter qparam value is any mongodb query… Defaults to {}
     * @param {?=} keys Projections to be applited on mongo db.
     * @param {?=} sort sort to be applied on the query results. Defaults to {}
     * @param {?=} pagenumber Page number for paginated queries. Defaults to 1
     * @param {?=} pagesize Size of each page to be returned. Defaults to 100.
     * @return {?}
     */
    get(dataModelName, filter, keys, sort, pagenumber, pagesize) {
        if (dataModelName) {
            // let modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
            let /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
            if (this.checkIfValid(filter) || this.checkIfValid(keys) || this.checkIfValid(sort) ||
                this.checkIfValid(pagenumber) || this.checkIfValid(pagesize)) {
                let /** @type {?} */ queryString = `${this.toQueryString({
                    'filter': filter,
                    'keys': keys,
                    'sort': sort,
                    'pagenumber': pagenumber,
                    'pagesize': pagesize
                })}`;
                if (queryString === '') {
                    queryString += '?filter={}';
                }
                else {
                    queryString = '?'.concat(queryString);
                }
                modelNameUrl += queryString;
            }
            return this.http.get(modelNameUrl).map((value, index) => {
                return value;
            }).catch(error => {
                return Observable.throw(error);
            });
        }
        else {
            return Observable.throw(new Error(`Could not get ${dataModelName}. ${this.invalidDataModelName}`));
        }
    }
    /**
     *
     * @param {?} dataModelName Data model name of the app
     * @param {?} dataModelObj Data Model object which is to be inserted
     * @return {?}
     */
    put(dataModelName, dataModelObj) {
        if (dataModelName) {
            if (dataModelObj) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
                const /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
                return this.http.put(modelNameUrl, dataModelObj).map((value, index) => {
                    return value;
                }).catch(error => {
                    return Observable.throw(error);
                });
            }
            else {
                return Observable.throw(new Error(`Could not put ${dataModelObj} in ${dataModelName}. ${this.invalidDataModelObj}`));
            }
        }
        else {
            return Observable.throw(new Error(`Could not put ${dataModelObj} in ${dataModelName}. ${this.invalidDataModelName}`));
        }
    }
    /**
     *
     * @param {?} dataModelName
     * @param {?} filter
     * @return {?}
     */
    delete(dataModelName, filter) {
        let /** @type {?} */ modelNameUrl;
        if (dataModelName) {
            // modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
            modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
            if (this.checkIfValid(filter) && filter != '') {
                modelNameUrl += `?filter=${filter}`;
            }
            else {
                modelNameUrl += '?filter={}';
            }
            return this.http.delete(modelNameUrl).map((value, index) => {
                return value;
            }).catch(error => {
                return Observable.throw(error);
            });
        }
        else {
            return Observable.throw(new Error(`Could not delete ${dataModelName}. ${this.invalidDataModelName}`));
        }
    }
    /**
     *
     * @param {?} dataModelName Data model name which is to be updated
     * @param {?} updateObject
     * @return {?}
     */
    update(dataModelName, updateObject) {
        if (dataModelName && updateObject) {
            // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
            const /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
            return this.http.patch(modelNameUrl, updateObject).map((value, index) => {
                return value;
            }).catch(error => {
                return Observable.throw(error);
            });
        }
        else {
            return Observable.throw(new Error(`Could not update ${dataModelName}. ${this.invalidDataModelName}`));
        }
    }
    /**
     *
     * @param {?} dataModelName Data model name which is to be updated
     * @param {?} dataModelId Data model id which is to be updated
     * @return {?}
     */
    getById(dataModelName, dataModelId) {
        if (dataModelName) {
            if (dataModelId) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                const /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                return this.http.get(modelNameUrl).map((value, index) => {
                    return value;
                }).catch(error => {
                    return Observable.throw(error);
                });
            }
            else {
                Observable.throw(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelId}`));
            }
        }
        else {
            Observable.throw(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelName}`));
        }
    }
    /**
     *
     * @param {?} dataModelName Data model name which is to be deleted
     * @param {?} dataModelId Data model id which is to be deleted
     * @return {?}
     */
    deleteById(dataModelName, dataModelId) {
        if (dataModelName) {
            if (dataModelId) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                const /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                return this.http.delete(modelNameUrl).map((value, index) => {
                    return value;
                }).catch(error => {
                    return Observable.throw(error);
                });
            }
            else {
                Observable.throw(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelId}`));
            }
        }
        else {
            return Observable.throw(new Error(`Could not delete ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelName}`));
        }
    }
    /**
     *
     * @param {?} dataModelName Data model name which is to be update
     * @param {?} dataModelId Data model id which is to be updated
     * @param {?} dataModelObj Data Model object which is to be inserted
     * @return {?}
     */
    updateById(dataModelName, dataModelId, dataModelObj) {
        if (dataModelName) {
            if (dataModelId) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                const /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                var /** @type {?} */ dmObj = Object.assign({}, dataModelObj);
                delete dmObj['_id'];
                return this.http.patch(modelNameUrl, dmObj).map((value, index) => {
                    return value;
                }).catch(error => {
                    return Observable.throw(error);
                });
            }
            else {
                Observable.throw(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelId}`));
            }
        }
        else {
            return Observable.throw(new Error(`Could not delete ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelName}`));
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    toQueryString(obj) {
        const /** @type {?} */ parts = [];
        for (const /** @type {?} */ i in obj) {
            if (obj.hasOwnProperty(i) && this.checkIfValid(obj[i])) {
                parts.push((i) + '=' + JSON.stringify(obj[i]));
            }
        }
        return parts.join('&');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    checkIfValid(value) {
        if (value === undefined || value == null) {
            return false;
        }
        else {
            return true;
        }
    }
    /**
     * @param {?} dataModelName
     * @return {?}
     */
    getDataSourceURL(dataModelName) {
        if (!this.dmDs) {
            this.dmDs = window['neutrinos']['dataSource'];
        }
        const /** @type {?} */ dsDm = this.dmDs[dataModelName];
        const /** @type {?} */ properties = this.systemService.properties;
        if (dsDm) {
            return properties.baseUrl + properties.tenantName + '/datamodel/' + dsDm + '/' + properties.appName + '/';
        }
        else {
            return this.systemService.getDataModelUrl();
        }
    }
}
NDataModelService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NDataModelService.ctorParameters = () => [
    { type: HttpClient, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NHttpService {
    /**
     * @param {?} nHTTPLoader
     * @param {?} inj
     * @param {?} nLocalStorageService
     * @param {?} nTokenService
     */
    constructor(nHTTPLoader, inj, nLocalStorageService, nTokenService) {
        this.nHTTPLoader = nHTTPLoader;
        this.inj = inj;
        this.nLocalStorageService = nLocalStorageService;
        this.nTokenService = nTokenService;
        this.timeout = 90000;
        this.isRefreshingToken = false;
        this.tokenSubject = new BehaviorSubject(null);
        this.systemService = NSystemService.getInstance();
        this.nSessionStorage = new NSessionStorageService();
        this.appProperties = this.systemService.getVal('properties');
        this.nPubSubService = new NPubSubService();
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        this.requestInterceptor();
        // Pass on the cloned request instead of the original request.
        return next.handle(this.requestOptions(req))
            .timeout(this.timeout)
            .catch(error => this.onCatch(error, req, next))
            .finally(() => {
            this.onFinally();
        });
    }
    ;
    /**
     * @param {?} error
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    updateToken(error, req, next) {
        if (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||
            this.appProperties.appAuthenticationStrategy === 'localAuth') {
            if (!this.isRefreshingToken) {
                this.isRefreshingToken = true;
                // Reset here so that the following requests wait until the token
                // comes back from the refreshToken call.
                this.tokenSubject.next(null);
                return this.refreshToken()
                    .switchMap((tokensObj) => {
                    if (tokensObj) {
                        this.nTokenService.updateTokens(tokensObj);
                        const /** @type {?} */ newToken = tokensObj['accessToken'];
                        this.tokenSubject.next(newToken);
                        return next.handle(this.requestOptions(req));
                    }
                    return Observable$1.throw(new Error('Can\'t refresh the token'));
                })
                    .catch(err => this.onCatchError(err))
                    .finally(() => this.isRefreshingToken = false);
            }
            else {
                return this.tokenSubject
                    .filter(token => token != null)
                    .take(1)
                    .switchMap(token => next.handle(this.requestOptions(req)));
            }
        }
        else {
            return this.onCatchError(error);
        }
    }
    /**
     * @return {?}
     */
    refreshToken() {
        const /** @type {?} */ http = this.inj.get(HttpClient);
        const /** @type {?} */ appProperties = this.systemService.getVal('properties');
        const /** @type {?} */ refreshUrl = this.systemService.getAuthUrl() + appProperties.appName + '/refresh';
        const /** @type {?} */ body = {
            'platformDetails': this.systemService.getPlatformDetails(this.systemService.checkDevice()),
            'userKey': this.nSessionStorage.getValue('userObj')['userKey'],
            'refreshToken': this.nSessionStorage.getValue('refreshToken')
        };
        body.platformDetails['uuid'] = this.nLocalStorageService.getValue('uuid');
        return http.post(refreshUrl, body);
    }
    /**
     * Request options.
     * @param {?=} req
     * @return {?} HttpRequest
     */
    requestOptions(req) {
        let /** @type {?} */ headers = req.headers;
        if (req.headers == null) {
            headers = new HttpHeaders();
        }
        req = req.clone({
            url: this.getFullUrl(req.url),
            headers: headers
        });
        const /** @type {?} */ baseUrl = NSystemService.getInstance().getVal('baseUrl');
        const /** @type {?} */ isArt = (baseUrl !== '' && req.url.includes(baseUrl));
        return isArt ? this.addDefaultHeaders(req) : req;
    }
    /**
     * Default options.
     * @param {?} req
     * @return {?} HttpHeadedrs
     */
    addDefaultHeaders(req) {
        /**
             * TODO: Add all default Headers over here
             */
        if (!req.headers.has('Access-Control-Allow-Origin')) {
            req.headers = req.headers.set('Access-Control-Allow-Origin', '*');
        }
        if (!req.headers.has('Content-Type')) {
            req.headers = req.headers.set('Content-Type', 'application/json');
        }
        else if (req.headers.has('Content-Type') && (req.headers.get('Content-Type') === 'no-content')) {
            req.headers = req.headers.delete('Content-Type');
        }
        if (!req.headers.has('Accept')) {
            req.headers = req.headers.set('Accept', 'application/json');
        }
        if (!req.headers.has('Authorization')) {
            this.appProperties = this.systemService.getVal('properties');
            if (this.appProperties && this.appProperties.appAuthenticationStrategy === 'basicAuth') {
                let /** @type {?} */ username, /** @type {?} */ password;
                if (this.appProperties.basicAuthUser && this.appProperties.basicAuthPassword) {
                    username = this.appProperties.basicAuthUser;
                    password = this.appProperties.basicAuthPassword;
                }
                else {
                    username = "bhive-art-proxyuser";
                    password = "password";
                    console.warn("Authentication strategy: Basic Auth. basicAuthUser and basicAuthPassword are not configured in environment. Setting default values.");
                }
                req.headers = req.headers.set('Authorization', 'Basic ' + btoa(username + ":" + password));
            }
            else if (this.appProperties && (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||
                this.appProperties.appAuthenticationStrategy === 'localAuth')) {
                if (this.nSessionStorage.getValue('accessToken')) {
                    req.headers = req.headers.set('Authorization', 'Bearer ' + this.nSessionStorage.getValue('accessToken'));
                }
            }
        }
        return req;
    }
    /**
     * Build API url.
     * @param {?} url
     * @return {?} string
     */
    getFullUrl(url) {
        // return full URL to API here
        return url;
    }
    /**
     * Request interceptor.
     * @return {?}
     */
    requestInterceptor() {
        this.nHTTPLoader.isHTTPRequestInProgress(true);
    }
    /**
     * Response interceptor.
     * @return {?}
     */
    responseInterceptor() {
        this.nHTTPLoader.isHTTPRequestInProgress(false);
    }
    /**
     * Error handler.
     * @param {?} error
     * @param {?} req
     * @param {?} next
     * @return {?} ErrorObservable
     */
    onCatch(error, req, next) {
        if (error instanceof HttpErrorResponse) {
            if ((/** @type {?} */ (error)).status === 403 && (/** @type {?} */ (error)).error.message === 'jwt expired') {
                return this.updateToken(error, req, next);
            }
            else {
                return this.onSubscribeError(error);
            }
        }
        else {
            return this.onSubscribeError(error);
        }
    }
    /**
     * onSubscribeError
     * @param {?} err
     * @return {?}
     */
    onSubscribeError(err) {
        this.nHTTPLoader.alertError(err);
        return this.onCatchError(err);
    }
    /**
     * onFinally
     * @return {?}
     */
    onFinally() {
        this.responseInterceptor();
    }
    /**
     * @param {?} error
     * @return {?}
     */
    onCatchError(error) {
        return Observable$1.throw(error);
    }
}
NHttpService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NHttpService.ctorParameters = () => [
    { type: NHTTPLoaderService, },
    { type: Injector, },
    { type: NLocalStorageService, },
    { type: NTokenService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class NSnackbarService {
    /**
     * @param {?} nPubSubService
     */
    constructor(nPubSubService) {
        this.nPubSubService = nPubSubService;
        this.snackService = new Subject();
        if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {
            this.snackBarListner = this.nPubSubService.$sub('openSnackBar', (msg) => {
                this.openSnackBar(msg);
            });
        }
    }
    /**
     * @return {?}
     */
    get() {
        return this.snackService.asObservable();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    add(data) {
        this.snackService.next({
            action: 'add',
            data: data
        });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    remove(id) {
        this.snackService.next({ action: 'remove', id: id });
    }
    /**
     * @return {?}
     */
    clear() {
        this.snackService.next({ action: 'clear' });
    }
    /**
     * @param {?} message
     * @param {?=} timeout
     * @return {?}
     */
    openSnackBar(message, timeout) {
        this.add({
            msg: message,
            timeout: timeout || 5000,
            action: {
                text: 'Close',
                onClick: (snack) => {
                },
            },
            onAdd: (snack) => {
            },
            onRemove: (snack) => {
            }
        });
    }
}
NSnackbarService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
NSnackbarService.ctorParameters = () => [
    { type: NPubSubService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SnackComponent {
}
SnackComponent.decorators = [
    { type: Component, args: [{
                selector: 'n-snack',
                template: `
     <div class="snack" [ngStyle]="{background: background ? background : '#323232' , color: color ? color : '#fff'}" [ngClass]=" ['snackbar-layout', 'customClass' ]">
          <ng-content></ng-content>
       </div> 
  `,
                styles: [`.snack-action{cursor:pointer;color:#2196f3;font-weight:700}.container{display:flex;flex-direction:row;flex-wrap:wrap}.child{width:60%;flex:1 0;margin-right:.5em}.snackbars.bottom-center{align-items:middle;left:50%;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);bottom:1px;align-items:center}.snackbars{position:fixed;z-index:99999;max-width:100%;word-wrap:break-word;display:inline;font-family:Roboto;letter-spacing:1px}.snack{padding:1em;border-radius:.3em;max-height:50vh;overflow:auto}`]
            },] },
];
/** @nocollapse */
SnackComponent.propDecorators = {
    "background": [{ type: Input },],
    "color": [{ type: Input },],
    "customClass": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SnackbarComponent {
    /**
     * @param {?} snackbarService
     */
    constructor(snackbarService) {
        this.snackbarService = snackbarService;
        this.max = 1;
        this.onAdd = new EventEmitter();
        this.onRemove = new EventEmitter();
        this.onClear = new EventEmitter();
        this.snacks = [];
        this.snackbarService.get()
            .subscribe(snack => {
            if (snack.action === 'add') {
                this.add(snack.data);
            }
            else if (snack.action === 'remove') {
                this.remove(snack.id);
            }
            else if (snack.action === 'clear') {
                this.clear();
            }
        });
    }
    /**
     * @param {?} snack
     * @return {?}
     */
    add(snack) {
        let /** @type {?} */ timeout;
        const /** @type {?} */ id = this.uuid();
        if (this.max && this.max > 0 && this.snacks.length === this.max) {
            this.remove(this.snacks[0].id);
        }
        if (snack.timeout || this.timeout) {
            timeout = setTimeout(() => {
                this.remove(id);
            }, snack.timeout || this.timeout);
        }
        const /** @type {?} */ data = Object.assign({ id: id, timeoutObj: timeout }, snack);
        if (snack.action) {
            const /** @type {?} */ that = this;
            const /** @type {?} */ fcn = snack.action.onClick || new Function();
            snack.action.onClick = () => {
                fcn(data);
                that.remove(id);
            };
        }
        if (snack.onAdd) {
            snack.onAdd(data);
        }
        if (this.onAdd) {
            this.onAdd.emit(data);
        }
        this.snacks.push(data);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    remove(id) {
        const /** @type {?} */ snack = this.snacks.find(obj => obj.id === id);
        if (snack) {
            if (snack.onRemove) {
                snack.onRemove(snack);
            }
            if (this.onRemove) {
                this.onRemove.emit(snack);
            }
            if (snack.timeoutObj) {
                clearTimeout(snack.timeoutObj);
            }
        }
        this.snacks = this.snacks.filter(obj => obj.id !== id);
    }
    /**
     * @return {?}
     */
    clear() {
        // this.snacks.forEach(snack => {
        //   this.remove(snack.id);
        // });
        this.snacks = [];
        if (this.onClear) {
            this.onClear.emit(true);
        }
    }
    /**
     * @return {?}
     */
    uuid() {
        // tslint:disable:no-bitwise
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            const /** @type {?} */ r = Math.random() * 16 | 0, /** @type {?} */ v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        // tslint:enable:no-bitwise
    }
    /**
     * @param {?} background
     * @return {?}
     */
    calcTextColor(background) {
        if (!background) {
            return null;
        }
        /**
         * @param {?} hex
         * @return {?}
         */
        function hexToRgb(hex) {
            const /** @type {?} */ shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex, (m, r, g, b) => {
                return r + r + g + g + b + b;
            });
            const /** @type {?} */ result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }
        const /** @type {?} */ rgb = hexToRgb(background);
        if (!rgb) {
            return null;
        }
        const /** @type {?} */ color = [rgb.r / 255, rgb.g / 255, rgb.b / 255];
        for (let /** @type {?} */ i = 0; i < color.length; ++i) {
            if (color[i] <= 0.03928) {
                color[i] = color[i] / 12.92;
            }
            else {
                color[i] = Math.pow((color[i] + 0.055) / 1.055, 2.4);
            }
        }
        const /** @type {?} */ l = 0.2126 * color[0] + 0.7152 * color[1] + 0.0722 * color[2];
        if (l > 0.179) {
            return '#000';
        }
        else {
            return '#fff';
        }
    }
}
SnackbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'n-snackbar',
                template: `
      <div class="snackbars" [ngClass]="position || 'bottom-center'">
          <n-snack   *ngFor="let snackbar of snacks" [background]="snackbar.background || background"
                        [customClass]="snackbar.customClass || customClass"
                        [color]="snackbar.color || color || calcTextColor(snackbar.background || background)">
              <div class="container">
              <div class="snack-text child" >
                  {{snackbar.msg}}
              </div>
              <div *ngIf="snackbar.action.text" class="snack-action" (click)="snackbar.action.onClick()"
                   [ngStyle]="{color: snackbar.action.color || accent}">
                  {{snackbar.action.text}}
              </div>
              </div>
          </n-snack>
      </div>
  `,
                styles: [`.snack-action{cursor:pointer;color:#2196f3;font-weight:700}.container{display:flex;flex-direction:row;flex-wrap:wrap}.child{width:60%;flex:1 0;margin-right:.5em}.snackbars.bottom-center{align-items:middle;left:50%;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);bottom:1px;align-items:center}.snackbars{position:fixed;z-index:99999;max-width:100%;word-wrap:break-word;display:inline;font-family:Roboto;letter-spacing:1px}.snack{padding:1em;border-radius:.3em;max-height:50vh;overflow:auto}`]
            },] },
];
/** @nocollapse */
SnackbarComponent.ctorParameters = () => [
    { type: NSnackbarService, },
];
SnackbarComponent.propDecorators = {
    "position": [{ type: Input },],
    "max": [{ type: Input },],
    "background": [{ type: Input },],
    "accent": [{ type: Input },],
    "color": [{ type: Input },],
    "customClass": [{ type: Input },],
    "timeout": [{ type: Input },],
    "onAdd": [{ type: Output },],
    "onRemove": [{ type: Output },],
    "onClear": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} startupService
 * @return {?}
 */
function startupServiceFactory(startupService) {
    const /** @type {?} */ res = () => {
        // console.log('module before initstorage call');
        return startupService.initStorage();
    };
    return res;
}
class NeutrinosSeedServicesModule {
}
NeutrinosSeedServicesModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    HttpClientModule,
                    RouterModule,
                    HttpModule,
                    NgForageModule.forRoot()
                ],
                providers: [
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: NHttpService,
                        multi: true
                    },
                    {
                        // Provider for APP_INITIALIZER
                        provide: APP_INITIALIZER,
                        useFactory: startupServiceFactory,
                        deps: [NLocalStorageService],
                        multi: true
                    },
                    NAuthGuardService,
                    NDataModelService,
                    NHttpService,
                    NHTTPLoaderService,
                    NLocalStorageService,
                    NLoginService,
                    NLogoutService,
                    NNotificationService,
                    NSnackbarService,
                    NPubSubService,
                    NSessionStorageService,
                    NTokenService
                ],
                declarations: [
                    SnackComponent,
                    SnackbarComponent
                ],
                exports: [
                    SnackComponent,
                    SnackbarComponent
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NAuthGuardService, NDataModelService, NHttpService, NHTTPLoaderService, NLocalStorageService, NLoginService, NLogoutService, NNotificationService, NSnackbarService, NSystemService, NTokenService, NUtility, NPubSubService, NSessionStorageService, SnackbarComponent, startupServiceFactory, NeutrinosSeedServicesModule, SnackComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV1dHJpbm9zLXNlZWQtc2VydmljZXMuanMubWFwIiwic291cmNlcyI6WyJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL3NyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbi1zeXN0ZW0uc2VydmljZS50cyIsIm5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvc3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLXNlc3Npb25TdG9yYWdlLnNlcnZpY2UudHMiLCJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL3NyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbi11dGlsLnNlcnZpY2UudHMiLCJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL3NyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbi1sb2NhbFN0b3JhZ2Uuc2VydmljZS50cyIsIm5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvc3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLXRva2VuLnNlcnZpY2UudHMiLCJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL3NyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbi1wdWJTdWIuc2VydmljZS50cyIsIm5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvc3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLWxvZ291dC5zZXJ2aWNlLnRzIiwibmc6Ly9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9zcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tSFRUUExvYWRlci5zZXJ2aWNlLnRzIiwibmc6Ly9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9zcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tbm90aWZpY2F0aW9uLnNlcnZpY2UudHMiLCJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL3NyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbi1sb2dpbi5zZXJ2aWNlLnRzIiwibmc6Ly9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9zcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tYXV0aEdhdXJkLnNlcnZpY2UudHMiLCJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL3NyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvbi1kYXRhTW9kZWwuc2VydmljZS50cyIsIm5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvc3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLUhUVFAuc2VydmljZS50cyIsIm5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvc3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLXNuYWNrYmFyLnNlcnZpY2UudHMiLCJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL3NyYy9hcHAvbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvc25hY2tiYXIvc25hY2svc25hY2suY29tcG9uZW50LnRzIiwibmc6Ly9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9zcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL3NuYWNrYmFyL3NuYWNrYmFyL3NuYWNrYmFyLmNvbXBvbmVudC50cyIsIm5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvc3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHsgZW52aXJvbm1lbnQgfSBmcm9tICcuLi8uLi9lbnZpcm9ubWVudHMvZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgTlV0aWxpdHkgfSBmcm9tICcuL24tdXRpbC5zZXJ2aWNlJztcbmltcG9ydCB7IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvY2FsU3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIHBsYXRmb3JtIGZyb20gJ3BsYXRmb3JtJztcblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBOU3lzdGVtU2VydmljZSB7XG4gIHByaXZhdGUgc3RhdGljIGluc3RhbmNlOiBOU3lzdGVtU2VydmljZTtcblxuICBwcml2YXRlIF9kZXZpY2VUeXBlOiBzdHJpbmc7XG4gIC8vIHByaXZhdGUgX2RldmljZVVVSUQ7XG4gIHV1aWQ7XG4gIHByb3BlcnRpZXM7XG4gIHN0YXRpYyBlbnZQcm9wZXJ0aWVzO1xuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XG4gICAgaWYgKCF0aGlzLmluc3RhbmNlKSB7XG4gICAgICB0aGlzLmluc3RhbmNlID0gbmV3IE5TeXN0ZW1TZXJ2aWNlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmluc3RhbmNlO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9kZXZpY2VUeXBlID0gdGhpcy5jaGVja0RldmljZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldGVyIGFuZCBnZXR0ZXIgZm9yIHRoZSBlbnZpcm9ubWVudHNcbiAgICovXG5cbiAgLy8gc2V0IGVudmlyb25tZW50cyhwcm9wZXJ0aWVzKSB7XG4gIC8vICAgY29uc29sZS5sb2cocHJvcGVydGllcyk7XG4gIC8vICAgTlN5c3RlbVNlcnZpY2UuZW52UHJvcGVydGllcyA9IHByb3BlcnRpZXM7XG4gIC8vICAgdGhpcy5wcm9wZXJ0aWVzID0gdGhpcy5nZXRWYWwoJ3Byb3BlcnRpZXMnKTtcbiAgLy8gfVxuXG4gIC8vIGdldCBlbnZpcm9ubWVudHMoKSB7XG4gIC8vICAgcmV0dXJuIE5TeXN0ZW1TZXJ2aWNlLmVudlByb3BlcnRpZXM7XG4gIC8vIH1cblxuICAvKipcbiAgICogUmV0dXJuYSAnbW9iaWxlJyBvciAnYnJvd3NlcicgYmFzZWQgb24gdGhlIHBsYXRmb3JtXG4gICAqL1xuICBjaGVja0RldmljZSgpOiBzdHJpbmcge1xuICAgIGlmICh3aW5kb3dbJ2RldmljZSddICYmICh3aW5kb3dbJ2RldmljZSddWydwbGF0Zm9ybSddICE9ICdicm93c2VyJyB8fCB3aW5kb3dbJ2RldmljZSddWydwbGF0Zm9ybSddICE9ICdCcm93c2VyJykpIHtcbiAgICAgIHJldHVybiAnbW9iaWxlJztcbiAgICB9IGVsc2UgaWYgKHdpbmRvd1snZGV2aWNlJ10gJiYgKHdpbmRvd1snZGV2aWNlJ11bJ3BsYXRmb3JtJ10gPT0gJ2Jyb3dzZXInIHx8IHdpbmRvd1snZGV2aWNlJ11bJ3BsYXRmb3JtJ10gPT0gJ0Jyb3dzZXInKSkge1xuICAgICAgcmV0dXJuICdjb3Jkb3ZhX2Jyb3dzZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ2Jyb3dzZXInO1xuICAgIH1cbiAgfVxuXG5cbiAgcHVibGljIGdldCBkZXZpY2VUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9kZXZpY2VUeXBlO1xuICB9XG5cblxuXG4gIHB1YmxpYyBnZXRWYWwoa2V5KSB7XG4gICAgaWYgKCFOU3lzdGVtU2VydmljZS5lbnZQcm9wZXJ0aWVzKSB7XG4gICAgICBOU3lzdGVtU2VydmljZS5lbnZQcm9wZXJ0aWVzID0gd2luZG93WyduZXV0cmlub3MnXVsnZW52aXJvbm1lbnRzJ107XG4gICAgICB0aGlzLnByb3BlcnRpZXMgPSBOU3lzdGVtU2VydmljZS5lbnZQcm9wZXJ0aWVzLnByb3BlcnRpZXM7XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PSAncHJvcGVydGllcycpIHtcbiAgICAgIGlmIChOU3lzdGVtU2VydmljZS5lbnZQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHJldHVybiBOU3lzdGVtU2VydmljZS5lbnZQcm9wZXJ0aWVzLnByb3BlcnRpZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoTlN5c3RlbVNlcnZpY2UuZW52UHJvcGVydGllcyAmJiBOU3lzdGVtU2VydmljZS5lbnZQcm9wZXJ0aWVzLnByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIE5TeXN0ZW1TZXJ2aWNlLmVudlByb3BlcnRpZXMucHJvcGVydGllc1trZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH1cblxuICB9XG5cbiAgcHVibGljIGlzQW5kcm9pZCgpIHtcbiAgICBpZiAod2luZG93WydkZXZpY2UnXSAmJiB3aW5kb3dbJ2RldmljZSddWydwbGF0Zm9ybSddID09ICdBbmRyb2lkJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgaXNJT1MoKSB7XG4gICAgaWYgKHdpbmRvd1snZGV2aWNlJ10gJiYgd2luZG93WydkZXZpY2UnXVsncGxhdGZvcm0nXSA9PSAnaU9TJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0QW5kcm9pZFZlcnNpb24oKSB7XG4gICAgaWYgKHRoaXMuaXNBbmRyb2lkKCkpIHtcbiAgICAgIHJldHVybiB3aW5kb3dbJ2RldmljZSddWyd2ZXJzaW9uJ107XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0QXV0aFVybCgpIHtcbiAgICAvLyB0aGlzLnByb3BlcnRpZXMgPSB0aGlzLmdldFZhbCgncHJvcGVydGllcycpO1xuICAgIHJldHVybiB0aGlzLnByb3BlcnRpZXMuYmFzZVVybCArIHRoaXMucHJvcGVydGllcy50ZW5hbnROYW1lICsgJy9hdXRoLyc7XG4gIH1cbiAgcHVibGljIGdldFRlbmFudFVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmJhc2VVcmwgKyB0aGlzLnByb3BlcnRpZXMudGVuYW50TmFtZSArICcvJztcbiAgfVxuXG4gIHB1YmxpYyBnZXRBcHBVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5iYXNlVXJsICsgdGhpcy5wcm9wZXJ0aWVzLnRlbmFudE5hbWUgKyAnL3Byb3h5LycgKyB0aGlzLnByb3BlcnRpZXMuYXBwTmFtZSArICcvJztcbiAgfVxuXG4gIHB1YmxpYyBnZXRQcm94eVVybCgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wZXJ0aWVzLmJhc2VVcmwgKyB0aGlzLnByb3BlcnRpZXMudGVuYW50TmFtZSArICcvcHJveHkvJztcbiAgfVxuXG4gIHB1YmxpYyBnZXREYXRhTW9kZWxVcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5iYXNlVXJsICsgdGhpcy5wcm9wZXJ0aWVzLnRlbmFudE5hbWUgKyAnL2RhdGFtb2RlbC8nICsgdGhpcy5wcm9wZXJ0aWVzLmFwcERhdGFTb3VyY2UgKyAnLycgKyB0aGlzLnByb3BlcnRpZXMuYXBwTmFtZSArICcvJztcbiAgfVxuXG4gIHB1YmxpYyBnZXRGaWxlSU9VcmwoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvcGVydGllcy5iYXNlVXJsICsgdGhpcy5wcm9wZXJ0aWVzLnRlbmFudE5hbWUgKyAnL2ZpbGVpby8nICtcbiAgICAgIHRoaXMucHJvcGVydGllcy5hcHBEYXRhU291cmNlICsgJy8nICsgdGhpcy5wcm9wZXJ0aWVzLmFwcE5hbWUgKyAnLyc7XG4gIH1cblxuICBwdWJsaWMgZ2V0UGxhdGZvcm1EZXRhaWxzKHR5cGUpIHtcbiAgICBjb25zdCBwRGV0YWlscyA9IHtcbiAgICAgIHBsYXRmb3JtOiBwbGF0Zm9ybS5vcy5mYW1pbHksXG4gICAgICBwbGF0Zm9ybVZlcnNpb246IHBsYXRmb3JtLm9zLnZlcnNpb24sXG4gICAgfTtcbiAgICBpZiAodHlwZSA9PT0gJ2Jyb3dzZXInKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihwRGV0YWlscywge1xuICAgICAgICB0eXBlOiAnYnJvd3NlcicsXG4gICAgICAgIGJyb3dzZXI6IHBsYXRmb3JtLm5hbWUsXG4gICAgICAgIGJyb3dzZXJWZXJzaW9uOiBwbGF0Zm9ybS52ZXJzaW9uLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnbW9iaWxlJyB8fCB0eXBlID09PSAnY29yZG92YV9icm93c2VyJykge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24ocERldGFpbHMsIHtcbiAgICAgICAgdHlwZTogJ21vYmlsZScsXG4gICAgICAgIG1vZGVsOiB3aW5kb3dbJ2RldmljZSddLm1vZGVsLFxuICAgICAgICBtYW51ZmFjdHVyZXI6IHdpbmRvd1snZGV2aWNlJ10ubWFudWZhY3R1cmVyLFxuICAgICAgICBpc1ZpcnR1YWw6IHdpbmRvd1snZGV2aWNlJ10uaXNWaXJ0dWFsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uge1xuICBzdGF0aWMgc2Vzc2lvblN0b3JhZ2VDYWNoZTogYW55ID0ge307XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZSA9IHNlc3Npb25TdG9yYWdlO1xuICB9XG5cbiAgZ2V0U2Vzc2lvblN0b3JhZ2UoKSB7XG4gICAgcmV0dXJuIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZTtcbiAgfVxuXG4gIHNldFZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlLnNlc3Npb25TdG9yYWdlQ2FjaGVba2V5XSA9IHZhbHVlO1xuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oa2V5LCB2YWx1ZSlcbiAgfVxuXG4gIGdldFZhbHVlKGtleSkge1xuICAgIGlmICghTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlW2tleV0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3Qgb2JqID0gTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlW2tleV07XG4gICAgICByZXR1cm4gSlNPTi5wYXJzZShvYmopO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlKGtleSkge1xuICAgIGlmIChOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlLnNlc3Npb25TdG9yYWdlQ2FjaGUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgZGVsZXRlIE5TZXNzaW9uU3RvcmFnZVNlcnZpY2Uuc2Vzc2lvblN0b3JhZ2VDYWNoZVtrZXldO1xuICAgICAgc2Vzc2lvblN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFyU2Vzc2lvblN0b3JhZ2UoKSB7XG4gICAgTlNlc3Npb25TdG9yYWdlU2VydmljZS5zZXNzaW9uU3RvcmFnZUNhY2hlID0ge307XG4gICAgc2Vzc2lvblN0b3JhZ2UuY2xlYXIoKTtcbiAgfVxuXG59XG4iLCJleHBvcnQgY2xhc3MgTlV0aWxpdHkge1xuICBcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuICBcbiAgICBnZW5lcmF0ZVVVSUQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3M0KCkgKyB0aGlzLl9fczQoKSArICctJyArIHRoaXMuX19zNCgpICsgJy0nICsgdGhpcy5fX3M0KCkgKyAnLScgKyB0aGlzLl9fczQoKSArICctJyArIHRoaXMuX19zNCgpICsgdGhpcy5fX3M0KCkgKyB0aGlzLl9fczQoKTtcbiAgICB9XG4gIFxuICAgIF9fczQoKSB7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcigoMSArIE1hdGgucmFuZG9tKCkpICogMHgxMDAwMClcbiAgICAgICAgLnRvU3RyaW5nKDE2KVxuICAgICAgICAuc3Vic3RyaW5nKDEpO1xuICAgIH1cbiAgfSIsImltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGxvY2FsZm9yYWdlIGZyb20gJ2xvY2FsZm9yYWdlJztcbmltcG9ydCB7IE5nRm9yYWdlLCBOZ0ZvcmFnZUNhY2hlLCBOZ0ZvcmFnZUNvbmZpZywgQ2FjaGVkSXRlbSB9IGZyb20gJ25nZm9yYWdlJztcbmltcG9ydCB7IE5VdGlsaXR5IH0gZnJvbSAnLi9uLXV0aWwuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOTG9jYWxTdG9yYWdlU2VydmljZSB7XG5cbiAgc3RvcmFnZUNhY2hlOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBfZGV2aWNlVVVJRDtcbiAgcHJpdmF0ZSBuYXRpdmVTdG9yYWdlSTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ2ZDb25maWc/OiBOZ0ZvcmFnZUNvbmZpZywgcHJpdmF0ZSByZWFkb25seSBuZ2Y/OiBOZ0ZvcmFnZSwgcHJpdmF0ZSByZWFkb25seSBuZ2ZDYWNoZT86IE5nRm9yYWdlQ2FjaGUpIHtcbiAgfVxuXG5cblxuICBpbml0U3RvcmFnZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHdpbmRvd1snY29yZG92YSddKSB7XG4gICAgICAgIHRoaXMuaW5pdE5nRm9yYWdlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm5nZi5pdGVyYXRlKCh2YWx1ZSwga2V5LCBpdGVyYXRvbk51bWJlcikgPT4ge1xuICAgICAgICB0aGlzLnN0b3JhZ2VDYWNoZVtrZXldID0gdmFsdWU7XG4gICAgICB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIHRoaXMuY2hlY2tEZXZpY2VJZCgpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSgnaXRlcmF0aW9uIGlzIGNvbXBsZXRlZCcpXG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgZ2V0U3RvcmFnZSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yYWdlQ2FjaGU7XG4gIH1cblxuXG4gIHNldFZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICBpZiAod2luZG93Wydjb3Jkb3ZhJ10pIHtcbiAgICAgIHRoaXMuaW5pdE5nRm9yYWdlKCk7XG4gICAgfVxuICAgIHRoaXMuc3RvcmFnZUNhY2hlW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcy5uZ2Yuc2V0SXRlbShrZXksIHZhbHVlKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9KVxuICB9XG5cbiAgZ2V0VmFsdWUoa2V5KTogYW55IHwgUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAoIXRoaXMuc3RvcmFnZUNhY2hlW2tleV0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gdHJ5IHtcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMuc3RvcmFnZUNhY2hlW2tleV1cbiAgICAgIHJldHVybiBKU09OLnBhcnNlKG9iaik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VDYWNoZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZShrZXkpIHtcbiAgICBkZWxldGUgdGhpcy5zdG9yYWdlQ2FjaGVba2V5XTtcbiAgICBpZiAod2luZG93Wydjb3Jkb3ZhJ10pIHtcbiAgICAgIHRoaXMuaW5pdE5nRm9yYWdlKCk7XG4gICAgfVxuICAgIHRoaXMubmdmLnJlbW92ZUl0ZW0oa2V5KS50aGVuKGZ1bGZpbGxlZCA9PiB7XG4gICAgICBkZWxldGUgdGhpcy5uZ2Zba2V5XTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDb3VsZCBub3QgcmVtb3ZlJywga2V5KTtcbiAgICB9KVxuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5zdG9yYWdlQ2FjaGUgPSB7fTtcbiAgICB0aGlzLm5nZi5jbGVhcigpO1xuICB9XG5cbiAgcHJpdmF0ZSBwbHVnaW5DaGVjaygpIHtcbiAgICBpZiAod2luZG93Wydjb3Jkb3ZhJ10gJiYgd2luZG93WydOYXRpdmVTdG9yYWdlJ10pIHtcbiAgICAgIHRoaXMubmF0aXZlU3RvcmFnZUkgPSB3aW5kb3dbJ05hdGl2ZVN0b3JhZ2UnXTtcbiAgICAgIC8vIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyB0aGlzLmluaXRTdG9yYWdlKCk7XG4gIH1cblxuICBwcml2YXRlIGdldEl0ZW1OcyhrZXkpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHdpbmRvd1snY29yZG92YSddICYmIHdpbmRvd1snTmF0aXZlU3RvcmFnZSddKSB7XG4gICAgICAgIHRoaXMubmF0aXZlU3RvcmFnZUkuZ2V0SXRlbShrZXksIHJlc3VsdCA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBzZXRJdGVtTnMoa2V5LCB2YWx1ZSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAod2luZG93Wydjb3Jkb3ZhJ10gJiYgd2luZG93WydOYXRpdmVTdG9yYWdlJ10pIHtcbiAgICAgICAgdGhpcy5uYXRpdmVTdG9yYWdlSS5zZXRJdGVtKGtleSwgdmFsdWUsIHJlc3VsdCA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSByZW1vdmVJdGVtTnMoa2V5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh3aW5kb3dbJ2NvcmRvdmEnXSAmJiB3aW5kb3dbJ05hdGl2ZVN0b3JhZ2UnXSkge1xuICAgICAgICB0aGlzLm5hdGl2ZVN0b3JhZ2VJLnJlbW92ZShrZXksIChyZXN1bHQpID0+IHtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBwcml2YXRlIGNsZWFyTnMoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh3aW5kb3dbJ2NvcmRvdmEnXSAmJiB3aW5kb3dbJ05hdGl2ZVN0b3JhZ2UnXSkge1xuICAgICAgICB0aGlzLm5hdGl2ZVN0b3JhZ2VJLmNsZWFyKHJlc3VsdCA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBpbml0TmdGb3JhZ2UoKSB7XG4gICAgdGhpcy5uZ2ZDb25maWcuY29uZmlndXJlKHtcbiAgICAgIG5hbWU6ICdNeUFwcCcsXG4gICAgICBkcml2ZXI6IFtcbiAgICAgICAgTmdGb3JhZ2VDb25maWcuRFJJVkVSX1dFQlNRTCxcbiAgICAgIF1cbiAgICB9KTtcblxuICB9XG5cbiAgcHJpdmF0ZSBwcm9taXNlUmVmbGVjdChwcm9taXNlKSB7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbihyZXNvbHZlZCA9PiB7IHJldHVybiB7IHY6IHJlc29sdmVkLCBzdGF0dXM6ICdyZXNvbHZlZCcgfSB9LCBlcnJvciA9PiB7IHJldHVybiB7IGU6IGVycm9yLCBzdGF0dXM6ICdyZWplY3RlZCcgfSB9KVxuICB9XG5cbiAgY2xlYXJMb2NhbFN0b3JhZ2UoKSB7XG4gICAgdGhpcy5yZW1vdmUoJ3VzZXJPYmonKTtcbiAgICB0aGlzLnJlbW92ZSgnYWNjZXNzVG9rZW4nKTtcbiAgICB0aGlzLnJlbW92ZSgncmVmcmVzaFRva2VuJyk7XG4gICAgdGhpcy5yZW1vdmUoJ3JlZ2lzdHJhdGlvbklkJyk7XG4gIH1cblxuICAvKipcbiAgICogRHVlIHRvIHRpbWluZyBpc3N1ZXMgYW5kIGNpcmN1bGFyIGRlcGVuZGVuY3kgY2hlY2tEZXZpY2VJZCBpcyBtb3ZlZCBmcm9tIE5TeXN0ZW1TZXJ2aWNlXG4gICovXG5cbiAgY2hlY2tEZXZpY2VJZCgpIHtcbiAgICBpZiAoTlN5c3RlbVNlcnZpY2UuZ2V0SW5zdGFuY2UoKS5jaGVja0RldmljZSgpID09PSAnYnJvd3NlcicpIHtcbiAgICAgIHRoaXMuX2RldmljZVVVSUQgPSB0aGlzLmdldFZhbHVlKCd1dWlkJyk7XG5cbiAgICAgIGlmICghdGhpcy5fZGV2aWNlVVVJRCkge1xuICAgICAgICB0aGlzLl9kZXZpY2VVVUlEID0gbmV3IE5VdGlsaXR5KCkuZ2VuZXJhdGVVVUlEKCk7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUoJ3V1aWQnLCB0aGlzLl9kZXZpY2VVVUlEKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93WydwbHVnaW5zJ10udW5pcXVlRGV2aWNlSUQuZ2V0KCh1dWlkKSA9PiB7XG4gICAgICAgIHRoaXMuX2RldmljZVVVSUQgPSB1dWlkO1xuICAgICAgICB0aGlzLnNldFZhbHVlKCd1dWlkJywgdGhpcy5fZGV2aWNlVVVJRCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2RldmljZVVVSUQ7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGRldmljZVVVSUQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RldmljZVVVSUQ7XG4gIH1cbn1cbiIsImltcG9ydCB7IE5TZXNzaW9uU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL24tc2Vzc2lvblN0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBOTG9jYWxTdG9yYWdlU2VydmljZSB9IGZyb20gJy4vbi1sb2NhbFN0b3JhZ2Uuc2VydmljZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOVG9rZW5TZXJ2aWNlIHtcblxuICBuU2Vzc2lvblN0b3JhZ2U7XG4gIC8vIG5Mb2NhbFN0b3JhZ2VTZXJ2aWNlOiBOTG9jYWxTdG9yYWdlU2VydmljZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5Mb2NhbFN0b3JhZ2VTZXJ2aWNlOiBOTG9jYWxTdG9yYWdlU2VydmljZSkge1xuICAgIHRoaXMublNlc3Npb25TdG9yYWdlID0gbmV3IE5TZXNzaW9uU3RvcmFnZVNlcnZpY2UoKTtcbiAgICAvLyB0aGlzLm5Mb2NhbFN0b3JhZ2VTZXJ2aWNlID0gbmV3IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlKCk7XG4gIH1cblxuICB1cGRhdGVUb2tlbnModG9rZW5zT2JqLCBpc1JlbWVtYmVyPzogQm9vbGVhbikge1xuICAgIGxldCB1c2VyT2JqID0gdGhpcy5kZWNvZGVUb2tlbih0b2tlbnNPYmpbJ2FjY2Vzc1Rva2VuJ10pXG4gICAgdGhpcy5uU2Vzc2lvblN0b3JhZ2Uuc2V0VmFsdWUoJ2FjY2Vzc1Rva2VuJywgdG9rZW5zT2JqWydhY2Nlc3NUb2tlbiddKTtcbiAgICB0aGlzLm5TZXNzaW9uU3RvcmFnZS5zZXRWYWx1ZSgncmVmcmVzaFRva2VuJywgdG9rZW5zT2JqWydyZWZyZXNoVG9rZW4nXSk7XG4gICAgdGhpcy5uU2Vzc2lvblN0b3JhZ2Uuc2V0VmFsdWUoJ3VzZXJPYmonLCBKU09OLnN0cmluZ2lmeSh1c2VyT2JqKSk7XG5cbiAgICBpZiAoKGlzUmVtZW1iZXIgfHwgdGhpcy5uTG9jYWxTdG9yYWdlU2VydmljZS5nZXRWYWx1ZSgnYWNjZXNzVG9rZW4nKSkpIHtcbiAgICAgIHRoaXMubkxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0VmFsdWUoJ2FjY2Vzc1Rva2VuJywgdG9rZW5zT2JqWydhY2Nlc3NUb2tlbiddKTtcbiAgICAgIHRoaXMubkxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0VmFsdWUoJ3JlZnJlc2hUb2tlbicsIHRva2Vuc09ialsncmVmcmVzaFRva2VuJ10pO1xuICAgICAgdGhpcy5uTG9jYWxTdG9yYWdlU2VydmljZS5zZXRWYWx1ZSgndXNlck9iaicsIEpTT04uc3RyaW5naWZ5KHVzZXJPYmopKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVTZXNzaW9uU3RvcmFnZSgpIHtcbiAgICB0aGlzLnVwZGF0ZVRva2Vucyh0aGlzLm5Mb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldFN0b3JhZ2UoKSwgdHJ1ZSk7XG4gIH1cblxuICBwdWJsaWMgdXJsQmFzZTY0RGVjb2RlKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgb3V0cHV0ID0gc3RyLnJlcGxhY2UoLy0vZywgJysnKS5yZXBsYWNlKC9fL2csICcvJyk7XG4gICAgc3dpdGNoIChvdXRwdXQubGVuZ3RoICUgNCkge1xuICAgICAgY2FzZSAwOiB7IGJyZWFrOyB9XG4gICAgICBjYXNlIDI6IHsgb3V0cHV0ICs9ICc9PSc7IGJyZWFrOyB9XG4gICAgICBjYXNlIDM6IHsgb3V0cHV0ICs9ICc9JzsgYnJlYWs7IH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgdGhyb3cgJ0lsbGVnYWwgYmFzZTY0dXJsIHN0cmluZyEnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5iNjREZWNvZGVVbmljb2RlKG91dHB1dCk7XG4gIH1cblxuICAvLyBjcmVkaXRzIGZvciBkZWNvZGVyIGdvZXMgdG8gaHR0cHM6Ly9naXRodWIuY29tL2F0a1xuICBwcml2YXRlIGI2NGRlY29kZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcbiAgICBsZXQgb3V0cHV0OiBzdHJpbmcgPSAnJztcblxuICAgIHN0ciA9IFN0cmluZyhzdHIpLnJlcGxhY2UoLz0rJC8sICcnKTtcblxuICAgIGlmIChzdHIubGVuZ3RoICUgNCA9PSAxKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCInYXRvYicgZmFpbGVkOiBUaGUgc3RyaW5nIHRvIGJlIGRlY29kZWQgaXMgbm90IGNvcnJlY3RseSBlbmNvZGVkLlwiKTtcbiAgICB9XG5cbiAgICBmb3IgKFxuICAgICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJzXG4gICAgICBsZXQgYmM6IG51bWJlciA9IDAsIGJzOiBhbnksIGJ1ZmZlcjogYW55LCBpZHg6IG51bWJlciA9IDA7XG4gICAgICAvLyBnZXQgbmV4dCBjaGFyYWN0ZXJcbiAgICAgIGJ1ZmZlciA9IHN0ci5jaGFyQXQoaWR4KyspO1xuICAgICAgLy8gY2hhcmFjdGVyIGZvdW5kIGluIHRhYmxlPyBpbml0aWFsaXplIGJpdCBzdG9yYWdlIGFuZCBhZGQgaXRzIGFzY2lpIHZhbHVlO1xuICAgICAgfmJ1ZmZlciAmJiAoYnMgPSBiYyAlIDQgPyBicyAqIDY0ICsgYnVmZmVyIDogYnVmZmVyLFxuICAgICAgICAvLyBhbmQgaWYgbm90IGZpcnN0IG9mIGVhY2ggNCBjaGFyYWN0ZXJzLFxuICAgICAgICAvLyBjb252ZXJ0IHRoZSBmaXJzdCA4IGJpdHMgdG8gb25lIGFzY2lpIGNoYXJhY3RlclxuICAgICAgICBiYysrICUgNCkgPyBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgyNTUgJiBicyA+PiAoLTIgKiBiYyAmIDYpKSA6IDBcbiAgICApIHtcbiAgICAgIC8vIHRyeSB0byBmaW5kIGNoYXJhY3RlciBpbiB0YWJsZSAoMC02Mywgbm90IGZvdW5kID0+IC0xKVxuICAgICAgYnVmZmVyID0gY2hhcnMuaW5kZXhPZihidWZmZXIpO1xuICAgIH1cbiAgICByZXR1cm4gb3V0cHV0O1xuICB9XG5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvQVBJL1dpbmRvd0Jhc2U2NC9CYXNlNjRfZW5jb2RpbmdfYW5kX2RlY29kaW5nI1RoZV9Vbmljb2RlX1Byb2JsZW1cbiAgcHJpdmF0ZSBiNjREZWNvZGVVbmljb2RlKHN0cjogYW55KSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChBcnJheS5wcm90b3R5cGUubWFwLmNhbGwodGhpcy5iNjRkZWNvZGUoc3RyKSwgKGM6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuICclJyArICgnMDAnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpO1xuICAgIH0pLmpvaW4oJycpKTtcbiAgfVxuXG4gIHB1YmxpYyBkZWNvZGVUb2tlbih0b2tlbjogc3RyaW5nKTogYW55IHtcbiAgICBsZXQgcGFydHMgPSB0b2tlbi5zcGxpdCgnLicpO1xuXG4gICAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdKV1QgbXVzdCBoYXZlIDMgcGFydHMnKTtcbiAgICB9XG5cbiAgICBsZXQgZGVjb2RlZCA9IHRoaXMudXJsQmFzZTY0RGVjb2RlKHBhcnRzWzFdKTtcbiAgICBpZiAoIWRlY29kZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGRlY29kZSB0aGUgdG9rZW4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gSlNPTi5wYXJzZShkZWNvZGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUb2tlbkV4cGlyYXRpb25EYXRlKHRva2VuOiBzdHJpbmcpOiBEYXRlIHtcbiAgICBsZXQgZGVjb2RlZDogYW55O1xuICAgIGRlY29kZWQgPSB0aGlzLmRlY29kZVRva2VuKHRva2VuKTtcblxuICAgIGlmICghZGVjb2RlZC5oYXNPd25Qcm9wZXJ0eSgnZXhwJykpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGxldCBkYXRlID0gbmV3IERhdGUoMCk7IC8vIFRoZSAwIGhlcmUgaXMgdGhlIGtleSwgd2hpY2ggc2V0cyB0aGUgZGF0ZSB0byB0aGUgZXBvY2hcbiAgICBkYXRlLnNldFVUQ1NlY29uZHMoZGVjb2RlZC5leHApO1xuXG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cblxuICBwdWJsaWMgaXNUb2tlbkV4cGlyZWQodG9rZW46IHN0cmluZywgb2Zmc2V0U2Vjb25kcz86IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGxldCBkYXRlID0gdGhpcy5nZXRUb2tlbkV4cGlyYXRpb25EYXRlKHRva2VuKTtcbiAgICBvZmZzZXRTZWNvbmRzID0gb2Zmc2V0U2Vjb25kcyB8fCAwO1xuXG4gICAgaWYgKGRhdGUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRva2VuIGV4cGlyZWQ/XG4gICAgcmV0dXJuICEoZGF0ZS52YWx1ZU9mKCkgPiAobmV3IERhdGUoKS52YWx1ZU9mKCkgKyAob2Zmc2V0U2Vjb25kcyAqIDEwMDApKSk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMvU3ViamVjdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMvU3Vic2NyaXB0aW9uJztcblxuY29uc3QgU2VydmljZU5hbWU6IHN0cmluZyA9IFwiUHViU3ViIFNlcnZpY2VcIjtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5QdWJTdWJTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBldmVudHMgPSB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIHB1YmxpYyAkc3ViKGV2ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XG4gIHB1YmxpYyAkc3ViKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcjogKGVycm9yOiBhbnkpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XG4gIHB1YmxpYyAkc3ViKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgZXJyb3I6IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZTogKCkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s/OiAodmFsdWU6IGFueSkgPT4gdm9pZCwgZXJyb3I/OiAoZXJyb3I6IGFueSkgPT4gdm9pZCwgY29tcGxldGU/OiAoKSA9PiB2b2lkKSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbJHtTZXJ2aWNlTmFtZX1dID0+IFN1YnNjcmlwdGlvbiBtZXRob2QgbXVzdCBnZXQgZXZlbnQgbmFtZS5gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZXZlbnRzW2V2ZW50XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzW2V2ZW50XS5hc09ic2VydmFibGUoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZXZlbnRzW2V2ZW50XS5hc09ic2VydmFibGUoKS5zdWJzY3JpYmUoY2FsbGJhY2ssIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgICB9XG4gIH1cblxuICBwdWJsaWMgJHB1YihldmVudDogc3RyaW5nLCBldmVudE9iamVjdD86IGFueSkge1xuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgWyR7U2VydmljZU5hbWV9XSA9PiBQdWJsaXNoIG1ldGhvZCBtdXN0IGdldCBldmVudCBuYW1lLmApO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5ldmVudHNbZXZlbnRdKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLm5leHQoZXZlbnRPYmplY3QpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVB1YlN1YlNlcnZpY2Uge1xuICAkcHViKGV2ZW50OiBzdHJpbmcsIGV2ZW50T2JqZWN0PzogYW55KTtcbiAgJHN1YihldmVudDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+O1xuICAkc3ViKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbiAgJHN1YihldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQsIGVycm9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbiAgJHN1YihldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQsIGVycm9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZCwgY29tcGxldGU6ICgpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XG59XG5cbmludGVyZmFjZSBJJHN1YiB7XG4gIChldmVudDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+O1xuICAoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xuICAoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcjogKGVycm9yOiBhbnkpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XG4gIChldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQsIGVycm9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZCwgY29tcGxldGU6ICgpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLXNlc3Npb25TdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkxvY2FsU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL24tbG9jYWxTdG9yYWdlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTkxvZ291dFNlcnZpY2Uge1xuXG4gIG5TZXNzaW9uU3RvcmFnZSA9IG5ldyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlKCk7XG4gIC8vIG5Mb2NhbFN0b3JhZ2VTZXJ2aWNlID0gbmV3IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlKCk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbkxvY2FsU3RvcmFnZVNlcnZpY2U6IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlKSB7IH1cblxuICBsb2dvdXQoKSB7XG4gICAgdGhpcy5uU2Vzc2lvblN0b3JhZ2UuY2xlYXJTZXNzaW9uU3RvcmFnZSgpO1xuICAgIHRoaXMubkxvY2FsU3RvcmFnZVNlcnZpY2UuY2xlYXJMb2NhbFN0b3JhZ2UoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0Jztcbi8vIGltcG9ydCB7IE5TbmFja2JhclNlcnZpY2UgfSBmcm9tICcuL24tc25hY2tiYXIuc2VydmljZSc7XG5pbXBvcnQgeyBOTG9nb3V0U2VydmljZSB9IGZyb20gJy4vbi1sb2dvdXQuc2VydmljZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anMvT2JzZXJ2YWJsZVwiO1xuaW1wb3J0IHsgTlN5c3RlbVNlcnZpY2UgfSBmcm9tICcuL24tc3lzdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlB1YlN1YlNlcnZpY2UgfSBmcm9tICcuL24tcHViU3ViLnNlcnZpY2UnO1xuLy8gaW1wb3J0IHsgTlNuYWNrYmFyU2VydmljZSB9IGZyb20gJy4vc25hY2tiYXIvc2VydmljZS9zbmFja2Jhci5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5IVFRQTG9hZGVyU2VydmljZSB7XG4gIHB1YmxpYyBwZW5kaW5nUmVxdWVzdHMgPSAwO1xuICBwdWJsaWMgc2hvd0xvYWRpbmcgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfaXNIVFRQUmVxdWVzdEluUHJvZ3Jlc3MgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuICBfaXNIVFRQUmVxdWVzdEluUHJvZ3Jlc3MkID0gdGhpcy5faXNIVFRQUmVxdWVzdEluUHJvZ3Jlc3MuYXNPYnNlcnZhYmxlKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuTG9nb3V0U2VydmljZTogTkxvZ291dFNlcnZpY2UsIHByaXZhdGUgblB1YlN1YlNlcnZpY2U6IE5QdWJTdWJTZXJ2aWNlKSB7XG5cbiAgfVxuXG4gIGlzSFRUUFJlcXVlc3RJblByb2dyZXNzKGJvb2wpIHtcbiAgICBpZiAoYm9vbCkge1xuICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdHMrKztcbiAgICAgIGlmICghdGhpcy5zaG93TG9hZGluZykge1xuICAgICAgICB0aGlzLl9pc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcy5uZXh0KGJvb2wpO1xuICAgICAgfVxuICAgICAgdGhpcy5zaG93TG9hZGluZyA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhpcy5wZW5kaW5nUmVxdWVzdHMtLTtcbiAgICAgIGlmICh0aGlzLnBlbmRpbmdSZXF1ZXN0cyA8PSAwKSB7XG4gICAgICAgIGlmICh0aGlzLnNob3dMb2FkaW5nKSB7XG4gICAgICAgICAgdGhpcy5faXNIVFRQUmVxdWVzdEluUHJvZ3Jlc3MubmV4dChib29sKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNob3dMb2FkaW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYWxlcnRFcnJvcihlcnJvcikge1xuICAgIGlmIChlcnJvci5zdGF0dXMgPCAyMDAgfHwgZXJyb3Iuc3RhdHVzID4gNTAwKSB7XG4gICAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSAwKSB7XG4gICAgICAgIHRoaXMublB1YlN1YlNlcnZpY2UuJHB1Yignb3BlblNuYWNrQmFyJywgJ0Nvbm5lY3Rpdml0eSBpc3N1ZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCAnUmVzcG9uc2UgZmFpbHVyZScpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlcnJvci5zdGF0dXMgPT09IDQwMSkge1xuICAgICAgdGhpcy5uTG9nb3V0U2VydmljZS5sb2dvdXQoKTtcbiAgICAgIGlmIChlcnJvci5lcnJvcikge1xuICAgICAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRwdWIoJ29wZW5TbmFja0JhcicsIGVycm9yLmVycm9yKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCBlcnJvcilcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVycm9yLmVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IuZXJyb3IgaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCBlcnJvci5lcnJvci5tZXNzYWdlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCBlcnJvci5lcnJvcilcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5uUHViU3ViU2VydmljZS4kcHViKCdvcGVuU25hY2tCYXInLCAnUmVzcG9uc2UgZmFpbHVyZScpXG4gICAgfVxuICB9XG5cbn1cblxuXG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTlN5c3RlbVNlcnZpY2UgfSBmcm9tICcuL24tc3lzdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMvT2JzZXJ2YWJsZSc7XG5kZWNsYXJlIHZhciBQdXNoTm90aWZpY2F0aW9uOiBhbnk7XG5kZWNsYXJlIHZhciBBUE5TUHVzaE5vdGlmaWNhdGlvbjogYW55O1xuaW1wb3J0IHsgTkxvY2FsU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL24tbG9jYWxTdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0ICogYXMgZmlyZWJhc2UgZnJvbSAnZmlyZWJhc2UnO1xuaW1wb3J0IHsgTlB1YlN1YlNlcnZpY2UgfSBmcm9tICcuL24tcHViU3ViLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE5TZXNzaW9uU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL24tc2Vzc2lvblN0b3JhZ2Uuc2VydmljZSc7XG4vLyBpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTkhUVFBMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9uLUhUVFBMb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBlbnZpcm9ubWVudCB9IGZyb20gJy4uLy4uL2Vudmlyb25tZW50cy9lbnZpcm9ubWVudC5wcm9kJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTk5vdGlmaWNhdGlvblNlcnZpY2Uge1xuICAvLyBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTk5vdGlmaWNhdGlvblNlcnZpY2U7XG4gIHByaXZhdGUgc3lzdGVtU2VydmljZTogTlN5c3RlbVNlcnZpY2UgPSBOU3lzdGVtU2VydmljZS5nZXRJbnN0YW5jZSgpO1xuICBwcml2YXRlIGZpcmViYXNlU2VuZGVySWQ6IHN0cmluZztcbiAgcHJpdmF0ZSBpc05vdGlmaWNhdGlvbkVuYWJsZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgZGV2aWNlVHlwZTsgc3RyaW5nO1xuICBwcml2YXRlIHJlc0RldGFpbHM7XG4gIHByaXZhdGUgZGV2aWNlVVVJRDogc3RyaW5nO1xuICBwcml2YXRlIHBvc3NpYmxlUHVzaFR5cGVzOiBzdHJpbmdbXSA9IFsnQVBOUycsJ0ZDTSddO1xuICBsb2dpblN1YnNjcmliZTtcbiAgc2Vzc2lvblN0b3JhZ2U6IE5TZXNzaW9uU3RvcmFnZVNlcnZpY2U7XG4gIGFwcE5hbWU7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYWxTdG9yYWdlU2VydmljZTogTkxvY2FsU3RvcmFnZVNlcnZpY2UsIHByaXZhdGUgcHViU3ViU2VydmljZTogTlB1YlN1YlNlcnZpY2UsXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIGJIdHRwTG9hZGVyOiBOSFRUUExvYWRlclNlcnZpY2UpIHtcbiAgICB0aGlzLmZpcmViYXNlU2VuZGVySWQgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0VmFsKCdmaXJlYmFzZVNlbmRlcklkJyk7XG4gICAgdGhpcy5pc05vdGlmaWNhdGlvbkVuYWJsZWQgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0VmFsKCdpc05vdGlmaWNhdGlvbkVuYWJsZWQnKTtcbiAgICB0aGlzLmFwcE5hbWUgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0VmFsKCdhcHBOYW1lJyk7XG4gICAgdGhpcy5kZXZpY2VUeXBlID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmRldmljZVR5cGU7XG4gICAgdGhpcy5zZXNzaW9uU3RvcmFnZSA9IG5ldyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlKCk7XG4gICAgdGhpcy5sb2dpblN1YnNjcmliZSA9IHRoaXMucHViU3ViU2VydmljZS4kc3ViKCdmaXJlYmFzZVJlZ2lzdGVyJywgKCkgPT4ge1xuICAgICAgdGhpcy5lbmFibGVOb3RpZmljYXRpb24oKTtcbiAgICB9KVxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxuXG4gIGVuYWJsZU5vdGlmaWNhdGlvbigpIHtcbiAgICBsZXQgcHVzaFR5cGUgPSB0aGlzLmdldFB1c2hUeXBlKHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ3B1c2hUeXBlJykpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZXJlYWR5JywgZXZlbnQgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNOb3RpZmljYXRpb25FbmFibGVkKSB7XG4gICAgICAgIGlmICh0aGlzLmRldmljZVR5cGUgJiYgdGhpcy5kZXZpY2VUeXBlICE9ICdicm93c2VyJykge1xuICAgICAgICAgIHRoaXMuZGV2aWNlVHlwZSA9IHRoaXMuc3lzdGVtU2VydmljZS5kZXZpY2VUeXBlO1xuICAgICAgICAgIHRoaXMuY2hlY2tQZXJtaXNzaW9uKHB1c2hUeXBlKS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZU5vdGlmaWNhdGlvbnMocHVzaFR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRoaXMuaXNOb3RpZmljYXRpb25FbmFibGVkICYmIHB1c2hUeXBlICE9PSAnQVBOUycpIHtcbiAgICAgIGlmICh0aGlzLmRldmljZVR5cGUgJiYgdGhpcy5kZXZpY2VUeXBlID09ICdicm93c2VyJyAmJiB3aW5kb3dbJ05vdGlmaWNhdGlvbiddKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbGlzZVdlYlB1c2goKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpbml0aWFsaXNlV2ViUHVzaCgpIHtcbiAgICBjb25zdCBfX3RoaXMgPSB0aGlzO1xuICAgIGNvbnN0IG1lc3NhZ2luZyA9IGZpcmViYXNlLm1lc3NhZ2luZygpO1xuXG4gICAgbWVzc2FnaW5nLnJlcXVlc3RQZXJtaXNzaW9uKClcbiAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2luZy5nZXRUb2tlbigpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKGZ1bmN0aW9uICh0b2tlbikge1xuICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICBfX3RoaXMuc2VuZFJlZ0RldGFpbHModG9rZW4pO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgX190aGlzLmJIdHRwTG9hZGVyLmFsZXJ0RXJyb3IoZXJyKTtcbiAgICAgIH0pO1xuXG4gICAgbWVzc2FnaW5nLm9uTWVzc2FnZShmdW5jdGlvbiAocGF5bG9hZCkge1xuICAgICAgaWYgKHBheWxvYWRbJ25vdGlmaWNhdGlvbiddKSB7XG4gICAgICAgIGxldCBub3RpZmljYXRpb25PYmogPSBwYXlsb2FkWydub3RpZmljYXRpb24nXTtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgYm9keTogbm90aWZpY2F0aW9uT2JqLmJvZHksXG4gICAgICAgICAgaWNvbjogbm90aWZpY2F0aW9uT2JqLmljb25cbiAgICAgICAgfVxuICAgICAgICAvLyBjcmVhdGluZyBhIG5hdGl2ZSBicm93c2VyIG1lc3NhZ2VcbiAgICAgICAgbGV0IG5vdGlmaWNhdGlvblVJID0gbmV3IE5vdGlmaWNhdGlvbihub3RpZmljYXRpb25PYmoudGl0bGUsIG9wdGlvbnMpO1xuICAgICAgICBub3RpZmljYXRpb25VSS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHdpbmRvdy5mb2N1cygpOyAvLyB3aW5kb3cgaXMgZm9jdXNlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyB0aGUgbm90aWZpY2F0aW9uIHVzaW5nIHRoaXNcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgY2hlY2tQZXJtaXNzaW9uKHB1c2hUeXBlPykge1xuICAgIC8vIEFuZHJvaWQgJiBpT1Mgb25seVxuICAgIC8vIENoZWNrcyB3aGV0aGVyIHRoZSBwdXNoIG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9uIGhhcyBiZWVuIGdyYW50ZWQuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBwdXNoVHlwZSA9IHRoaXMuZ2V0UHVzaFR5cGUocHVzaFR5cGUpO1xuICAgICAgaWYgKCh0aGlzLmRldmljZVR5cGUgPT09ICdBbmRyb2lkJyB8fCB0aGlzLmRldmljZVR5cGUgPT09ICdpT1MnKSAmJiAocHVzaFR5cGUgPT09ICdGQ00nICkpIHtcbiAgICAgICAgUHVzaE5vdGlmaWNhdGlvbi5oYXNQZXJtaXNzaW9uKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZGF0YS5pc0VuYWJsZWQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kZXZpY2VUeXBlID09PSAnaU9TJyAmJiBwdXNoVHlwZSA9PT0gJ0FQTlMnKSB7XG4gICAgICAgICBBUE5TUHVzaE5vdGlmaWNhdGlvbi5oYXNQZXJtaXNzaW9uKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoZGF0YS5pc0VuYWJsZWQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaW5pdGlhbGl6ZU5vdGlmaWNhdGlvbnMocHVzaFR5cGU/KSB7XG4gICAgLy9wdXNoVHlwZSA9IHB1c2hUeXBlID8gcHVzaFR5cGUgOiAnRkNNJztcbiAgICBwdXNoVHlwZSA9IHRoaXMuZ2V0UHVzaFR5cGUocHVzaFR5cGUpO1xuXG4gICAgbGV0IHB1c2g7XG4gICAgLy8gRGVmYXVsdCBpZiBmb3IgRkNNXG4gICAgaWYgKHB1c2hUeXBlID09PSAnRkNNJykge1xuICAgICAgcHVzaCA9IHdpbmRvd1snUHVzaE5vdGlmaWNhdGlvbiddLmluaXQoe1xuICAgICAgICBhbmRyb2lkOiB7XG4gICAgICAgICAgc2VuZGVySUQ6IHRoaXMuZmlyZWJhc2VTZW5kZXJJZFxuICAgICAgICB9LFxuICAgICAgICBpb3M6IHtcbiAgICAgICAgICBhbGVydDogXCJ0cnVlXCIsXG4gICAgICAgICAgYmFkZ2U6IFwidHJ1ZVwiLFxuICAgICAgICAgIHNvdW5kOiBcInRydWVcIixcbiAgICAgICAgICBzZW5kZXJJRDogdGhpcy5maXJlYmFzZVNlbmRlcklkXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gTmV3IEFQTlMgcGx1Z2luIGluaXRcbiAgICBlbHNlIGlmIChwdXNoVHlwZSA9PT0gJ0FQTlMnKSB7XG4gICAgICBwdXNoID0gd2luZG93WydBUE5TUHVzaE5vdGlmaWNhdGlvbiddLmluaXQoe1xuICAgICAgICBpb3M6IHtcbiAgICAgICAgICBhbGVydDogXCJ0cnVlXCIsXG4gICAgICAgICAgYmFkZ2U6IFwidHJ1ZVwiLFxuICAgICAgICAgIHNvdW5kOiBcInRydWVcIlxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgcHVzaC5vbigncmVnaXN0cmF0aW9uJywgKGRhdGEpID0+IHtcbiAgICAgIC8vIGRhdGEucmVnaXN0cmF0aW9uSWRcbiAgICAgIHRoaXMuc2VuZFJlZ0RldGFpbHMoZGF0YS5yZWdpc3RyYXRpb25JZCk7XG4gICAgfSk7XG5cbiAgICAvLyBUb0RvIENocmlzdHkgZ2V0IGNhbGwgYmFjayBmdW5jdGlvbiBmcm9tIGFwcCB1c2VyIHRvIGNoYW5nZSB3aGF0IGhhcHBlbnMgb25jZSBhIG5vdGlmaWNhdGlvbiBhcnJpdmVzXG4gICAgcHVzaC5vbignbm90aWZpY2F0aW9uJywgKGRhdGEpID0+IHtcbiAgICAgIHdpbmRvd1snY29yZG92YSddLnBsdWdpbnMubm90aWZpY2F0aW9uLmxvY2FsLnNjaGVkdWxlKHtcbiAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXG4gICAgICAgIHRleHQ6IGRhdGEubWVzc2FnZSxcbiAgICAgICAgc291bmQ6IGRhdGEuc291bmQsXG4gICAgICAgIGF0OiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBwdXNoLm9uKCdlcnJvcicsIChlKSA9PiB7XG4gICAgICAvLyBlLm1lc3NhZ2VcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfSk7XG4gIH1cblxuICBzZW5kUmVnRGV0YWlscyhyZWdpc3RyYXRpb25JZCkge1xuICAgIHRoaXMubG9jYWxTdG9yYWdlU2VydmljZS5zZXRWYWx1ZSgncmVnaXN0cmF0aW9uSWQnLCByZWdpc3RyYXRpb25JZCk7XG4gICAgdmFyIHVybCA9IHRoaXMuc3lzdGVtU2VydmljZS5nZXRUZW5hbnRVcmwoKSArICdub3RpZmljYXRpb24vJyArIHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ2FwcE5hbWUnKSArICcvcmVnaXN0ZXInO1xuICAgIGxldCBwdXNoVHlwZSA9IHRoaXMuZ2V0UHVzaFR5cGUodGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgncHVzaFR5cGUnKSk7XG4gICAgdGhpcy5odHRwLnBvc3QodXJsLCB7XG4gICAgICAna2V5JzogdGhpcy5zZXNzaW9uU3RvcmFnZS5nZXRWYWx1ZSgndXNlck9iaicpWyd1c2VyS2V5J10sXG4gICAgICAndXVpZCc6IHRoaXMubG9jYWxTdG9yYWdlU2VydmljZS5nZXRWYWx1ZSgndXVpZCcpLCBcbiAgICAgICdmYnJlZ2lkJzogcmVnaXN0cmF0aW9uSWQsXG4gICAgICAncHVzaFR5cGUnOiBwdXNoVHlwZVxuICAgIH0pLnN1YnNjcmliZShyZXN1bHQgPT4ge1xuICAgICAgLy8gdGhpcy5wdWJTdWJTZXJ2aWNlLiRwdWIoJ0ZCUmVnQ29tcCcpO1xuICAgIH0sIGVycm9yID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9KVxuICB9XG5cbiAgZ2V0UHVzaFR5cGUgKGN1cnJQdXNoVHlwZSkge1xuICAgIGxldCBpc1ZhbGlkUHVzaCA9IHR5cGVvZiBjdXJyUHVzaFR5cGUgIT09ICd1bmRlZmluZWQnICYmIHRoaXMucG9zc2libGVQdXNoVHlwZXMuaW5jbHVkZXMoY3VyclB1c2hUeXBlLnRvVXBwZXJDYXNlKCkpO1xuICAgIGxldCBwdXNoVHlwZSA9IGlzVmFsaWRQdXNoID8gY3VyclB1c2hUeXBlLnRvVXBwZXJDYXNlKCkgOiAnRkNNJztcbiAgICByZXR1cm4gcHVzaFR5cGU7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLmxvZ2luU3Vic2NyaWJlLnVuU3Vic2NyaWJlKCk7XG4gIH1cbiAgXG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IE5Ub2tlblNlcnZpY2UgfSBmcm9tICcuL24tdG9rZW4uc2VydmljZSc7XG5pbXBvcnQgeyBOUHViU3ViU2VydmljZSB9IGZyb20gJy4vbi1wdWJTdWIuc2VydmljZSc7XG5pbXBvcnQgeyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLXNlc3Npb25TdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkxvY2FsU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL24tbG9jYWxTdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTk5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL24tbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tYXAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL09ic2VydmFibGVcIjtcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTkxvZ2luU2VydmljZSB7XG4gIGxvZ2luVXJsO1xuICBhcHBQcm9wZXJ0aWVzO1xuICBzeXN0ZW1TZXJ2aWNlO1xuICBuU2Vzc2lvblN0b3JhZ2U7XG4gIHV1aWQ7XG4gIGRldGFpbHM6IGFueTtcblxuICBAT3V0cHV0KCkgbG9naW5Db21wbGV0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBwdWJTdWJTZXJ2aWNlOiBOUHViU3ViU2VydmljZSwgcHJpdmF0ZSBub3RpZmljYXRpb25TZXJ2aWNlOiBOTm90aWZpY2F0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIG5Mb2NhbFN0b3JhZ2VTZXJ2aWNlOiBOTG9jYWxTdG9yYWdlU2VydmljZSwgcHJpdmF0ZSBuVG9rZW5TZXJ2aWNlOiBOVG9rZW5TZXJ2aWNlKSB7XG4gICAgdGhpcy5zeXN0ZW1TZXJ2aWNlID0gTlN5c3RlbVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcbiAgICAvLyB0aGlzLm5Ub2tlblNlcnZpY2UgPSBuZXcgTlRva2VuU2VydmljZSgpO1xuICAgIHRoaXMublNlc3Npb25TdG9yYWdlID0gbmV3IE5TZXNzaW9uU3RvcmFnZVNlcnZpY2UoKTtcbiAgICAvLyB0aGlzLm5Mb2NhbFN0b3JhZ2VTZXJ2aWNlID0gbmV3IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlKCk7XG4gIH1cblxuXG4gIGxvZ2luKHVzZXJOYW1lLCBwYXNzd29yZCwgaXNSZW1lbWJlcj8pIHtcbiAgICB0aGlzLmFwcFByb3BlcnRpZXMgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0VmFsKCdwcm9wZXJ0aWVzJyk7XG4gICAgdGhpcy5sb2dpblVybCA9IHRoaXMuc3lzdGVtU2VydmljZS5nZXRBdXRoVXJsKCkgKyB0aGlzLmFwcFByb3BlcnRpZXMuYXBwTmFtZTtcbiAgICB0aGlzLnV1aWQgPSB0aGlzLm5Mb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldFZhbHVlKCd1dWlkJyk7XG4gICAgaWYgKCF0aGlzLnV1aWQpIHtcbiAgICAgIHRoaXMudXVpZCA9IHRoaXMubkxvY2FsU3RvcmFnZVNlcnZpY2UuY2hlY2tEZXZpY2VJZCgpO1xuICAgIH1cbiAgICB0aGlzLmRldGFpbHMgPSB7XG4gICAgICB1c2VybmFtZTogdXNlck5hbWUsXG4gICAgICBwYXNzd29yZDogcGFzc3dvcmQsXG4gICAgfTtcbiAgICB0aGlzLmRldGFpbHMucGxhdGZvcm1EZXRhaWxzID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFBsYXRmb3JtRGV0YWlscyh0aGlzLnN5c3RlbVNlcnZpY2UuY2hlY2tEZXZpY2UoKSk7XG4gICAgdGhpcy5kZXRhaWxzLnBsYXRmb3JtRGV0YWlsc1sndXVpZCddID0gdGhpcy51dWlkO1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLmxvZ2luVXJsLCBKU09OLnN0cmluZ2lmeSh0aGlzLmRldGFpbHMpKS5tYXAocmVzdWx0ID0+IHtcbiAgICAgIGNvbnN0IHRva2Vuc09iaiA9IHJlc3VsdDtcbiAgICAgIGlmICh0b2tlbnNPYmopIHtcbiAgICAgICAgdGhpcy5uVG9rZW5TZXJ2aWNlLnVwZGF0ZVRva2Vucyh0b2tlbnNPYmosIGlzUmVtZW1iZXIpO1xuICAgICAgfVxuICAgICAgLy8gVE9ETyBjaHJpcyBhcnJheSBvZiBzdXBwb3J0ZWQgcHVzaGVzIGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgQVBOUyBhbmQgRmlyZWJhc2VcbiAgICAgIGlmICgodGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgnZmlyZWJhc2VTZW5kZXJJZCcpICE9ICdGSVJFQkFTRV9TRU5ERVJfSUQnICYmIHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ2ZpcmViYXNlQXV0aEtleScpICE9ICdGSVJFQkFTRV9BVVRIX0tFWScpIFxuICAgICAgICAgICB8fCAodGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgncHVzaFR5cGUnKSA9PT0gJ0FQTlMnICYmIHRoaXMuc3lzdGVtU2VydmljZS5pc0lPUygpKSkge1xuICAgICAgICB0aGlzLnB1YlN1YlNlcnZpY2UuJHB1YignZmlyZWJhc2VSZWdpc3RlcicpO1xuICAgICAgfVxuICAgICAgdGhpcy5wdWJTdWJTZXJ2aWNlLiRwdWIoJ2xvZ2luQ29tcGxldGUnKTtcbiAgICAgIHJldHVybiAocmVzdWx0KTtcbiAgICB9LCBlcnJvciA9PiB7XG4gICAgICByZXR1cm4gKGVycm9yKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzTG9nZ2VkSW4oKSB7XG4gICAgcmV0dXJuIHRoaXMubkxvY2FsU3RvcmFnZVNlcnZpY2UuaW5pdFN0b3JhZ2UoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBpZiAodGhpcy5uU2Vzc2lvblN0b3JhZ2UuZ2V0VmFsdWUoJ2FjY2Vzc1Rva2VuJykgJiYgdGhpcy5uU2Vzc2lvblN0b3JhZ2UuZ2V0VmFsdWUoJ3JlZnJlc2hUb2tlbicpICYmXG4gICAgICAgIHRoaXMublNlc3Npb25TdG9yYWdlLmdldFZhbHVlKCdhY2Nlc3NUb2tlbicpICE9ICdudWxsJyAmJiB0aGlzLm5TZXNzaW9uU3RvcmFnZS5nZXRWYWx1ZSgncmVmcmVzaFRva2VuJykgIT0gJ251bGwnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcblxuICB9XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQ2FuQWN0aXZhdGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTkxvZ2luU2VydmljZSB9IGZyb20gJy4vbi1sb2dpbi5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5BdXRoR3VhcmRTZXJ2aWNlIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbkxvZ2luU2VydmljZTogTkxvZ2luU2VydmljZSwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikgeyB9XG5cbiAgY2FuQWN0aXZhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubkxvZ2luU2VydmljZS5pc0xvZ2dlZEluKCkudGhlbihyZXN1bHQgPT4ge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsndW5hdXRob3JpemVkJ10pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSlcblxuICB9XG5cbn1cbiIsImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5EYXRhTW9kZWxTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBzeXN0ZW1TZXJ2aWNlOiBOU3lzdGVtU2VydmljZTtcbiAgcHJpdmF0ZSBkbVVybDogc3RyaW5nO1xuICBwcml2YXRlIGludmFsaWREYXRhTW9kZWxOYW1lOiBzdHJpbmcgPSAnSW52YWxpZCBkYXRhIG1vZGVsIG5hbWUuJztcbiAgcHJpdmF0ZSBpbnZhbGlkRGF0YU1vZGVsSWQ6IHN0cmluZyA9ICdJbnZhbGlkIGRhdGEgbW9kZWwgaWQuJztcbiAgcHJpdmF0ZSBpbnZhbGlkRGF0YU1vZGVsT2JqOiBzdHJpbmcgPSAnSW52YWxpZCBkYXRhIG1vZGVsIG9iamVjdC4nO1xuICBwcml2YXRlIGRtRHM7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHRoaXMuc3lzdGVtU2VydmljZSA9IE5TeXN0ZW1TZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gIH1cblxuICAvLyBHRVQgL3t0ZW5hbnROYW1lfS9kYXRhbW9kZWwve2RhdGFzb3VyY2V9L3thcHBOYW1lfS97ZGF0YU1vZGVsTmFtZX1cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhTW9kZWxOYW1lXG4gICAqIEBwYXJhbSBmaWx0ZXIgVGhlIGZpbHRlciBxdWVyeSBwYXJhbWV0ZXIgYWxsb3dzIHRvIHNwZWNpZnkgY29uZGl0aW9ucyBvbiB0aGUgZG9jdW1lbnRzIHRvIHJldHVybi5cbiAgICogVGhlIGZpbHRlciBxcGFyYW0gdmFsdWUgaXMgYW55IG1vbmdvZGIgcXVlcnnDosKAwqYgRGVmYXVsdHMgdG8ge31cbiAgICogQHBhcmFtIGtleXMgUHJvamVjdGlvbnMgdG8gYmUgYXBwbGl0ZWQgb24gbW9uZ28gZGIuXG4gICAqIEBwYXJhbSBzb3J0IHNvcnQgdG8gYmUgYXBwbGllZCBvbiB0aGUgcXVlcnkgcmVzdWx0cy4gRGVmYXVsdHMgdG8ge31cbiAgICogQHBhcmFtIHBhZ2VudW1iZXIgUGFnZSBudW1iZXIgZm9yIHBhZ2luYXRlZCBxdWVyaWVzLiBEZWZhdWx0cyB0byAxXG4gICAqIEBwYXJhbSBwYWdlc2l6ZSBTaXplIG9mIGVhY2ggcGFnZSB0byBiZSByZXR1cm5lZC4gRGVmYXVsdHMgdG8gMTAwLlxuICAgKi9cbiAgZ2V0KGRhdGFNb2RlbE5hbWUsIGZpbHRlcj8sIGtleXM/LCBzb3J0PywgcGFnZW51bWJlcj8sIHBhZ2VzaXplPyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKGRhdGFNb2RlbE5hbWUpIHtcbiAgICAgIC8vIGxldCBtb2RlbE5hbWVVcmwgPSBgJHt0aGlzLmdldERhdGFTb3VyY2VVUkwoZGF0YU1vZGVsTmFtZSl9JHtkYXRhTW9kZWxOYW1lfWA7XG4gICAgICBsZXQgbW9kZWxOYW1lVXJsID0gdGhpcy5nZXREYXRhU291cmNlVVJMKGRhdGFNb2RlbE5hbWUpICsgZGF0YU1vZGVsTmFtZTtcbiAgICAgIGlmICh0aGlzLmNoZWNrSWZWYWxpZChmaWx0ZXIpIHx8IHRoaXMuY2hlY2tJZlZhbGlkKGtleXMpIHx8IHRoaXMuY2hlY2tJZlZhbGlkKHNvcnQpIHx8XG4gICAgICAgIHRoaXMuY2hlY2tJZlZhbGlkKHBhZ2VudW1iZXIpIHx8IHRoaXMuY2hlY2tJZlZhbGlkKHBhZ2VzaXplKSkge1xuICAgICAgICBsZXQgcXVlcnlTdHJpbmcgPSBgJHt0aGlzLnRvUXVlcnlTdHJpbmcoe1xuICAgICAgICAgICdmaWx0ZXInOiBmaWx0ZXIsXG4gICAgICAgICAgJ2tleXMnOiBrZXlzLFxuICAgICAgICAgICdzb3J0Jzogc29ydCxcbiAgICAgICAgICAncGFnZW51bWJlcic6IHBhZ2VudW1iZXIsXG4gICAgICAgICAgJ3BhZ2VzaXplJzogcGFnZXNpemVcbiAgICAgICAgfSl9YDtcbiAgICAgICAgaWYgKHF1ZXJ5U3RyaW5nID09PSAnJykge1xuICAgICAgICAgIHF1ZXJ5U3RyaW5nICs9ICc/ZmlsdGVyPXt9JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBxdWVyeVN0cmluZyA9ICc/Jy5jb25jYXQocXVlcnlTdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIG1vZGVsTmFtZVVybCArPSBxdWVyeVN0cmluZztcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KG1vZGVsTmFtZVVybCkubWFwKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvcik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3cobmV3IEVycm9yKGBDb3VsZCBub3QgZ2V0ICR7ZGF0YU1vZGVsTmFtZX0uICR7dGhpcy5pbnZhbGlkRGF0YU1vZGVsTmFtZX1gKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUFVUIC97dGVuYW50TmFtZX0vZGF0YW1vZGVsL3tkYXRhc291cmNlfS97YXBwTmFtZX0ve2RhdGFNb2RlbE5hbWV9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YU1vZGVsTmFtZSBEYXRhIG1vZGVsIG5hbWUgb2YgdGhlIGFwcFxuICAgKiBAcGFyYW0gZGF0YU1vZGVsT2JqIERhdGEgTW9kZWwgb2JqZWN0IHdoaWNoIGlzIHRvIGJlIGluc2VydGVkXG4gICAqL1xuICBwdXQoZGF0YU1vZGVsTmFtZSwgZGF0YU1vZGVsT2JqKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBpZiAoZGF0YU1vZGVsTmFtZSkge1xuICAgICAgaWYgKGRhdGFNb2RlbE9iaikge1xuICAgICAgICAvLyBjb25zdCBtb2RlbE5hbWVVcmwgPSBgJHt0aGlzLmdldERhdGFTb3VyY2VVUkwoZGF0YU1vZGVsTmFtZSl9JHtkYXRhTW9kZWxOYW1lfWA7XG4gICAgICAgIGNvbnN0IG1vZGVsTmFtZVVybCA9IHRoaXMuZ2V0RGF0YVNvdXJjZVVSTChkYXRhTW9kZWxOYW1lKSArIGRhdGFNb2RlbE5hbWU7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucHV0KG1vZGVsTmFtZVVybCwgZGF0YU1vZGVsT2JqKS5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yKTtcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KG5ldyBFcnJvcihgQ291bGQgbm90IHB1dCAke2RhdGFNb2RlbE9ian0gaW4gJHtkYXRhTW9kZWxOYW1lfS4gJHt0aGlzLmludmFsaWREYXRhTW9kZWxPYmp9YCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhuZXcgRXJyb3IoYENvdWxkIG5vdCBwdXQgJHtkYXRhTW9kZWxPYmp9IGluICR7ZGF0YU1vZGVsTmFtZX0uICR7dGhpcy5pbnZhbGlkRGF0YU1vZGVsTmFtZX1gKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gREVMRVRFIC97dGVuYW50TmFtZX0vZGF0YW1vZGVsL3tkYXRhc291cmNlfS97YXBwTmFtZX0ve2RhdGFNb2RlbE5hbWV9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YU1vZGVsTmFtZVxuICAgKiBAcGFyYW0gZmlsdGVyXG4gICAqL1xuICBkZWxldGUoZGF0YU1vZGVsTmFtZSwgZmlsdGVyKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBsZXQgbW9kZWxOYW1lVXJsO1xuICAgIGlmIChkYXRhTW9kZWxOYW1lKSB7XG4gICAgICAvLyBtb2RlbE5hbWVVcmwgPSBgJHt0aGlzLmdldERhdGFTb3VyY2VVUkwoZGF0YU1vZGVsTmFtZSl9JHtkYXRhTW9kZWxOYW1lfWA7XG4gICAgICBtb2RlbE5hbWVVcmwgPSB0aGlzLmdldERhdGFTb3VyY2VVUkwoZGF0YU1vZGVsTmFtZSkgKyBkYXRhTW9kZWxOYW1lO1xuXG4gICAgICBpZiAodGhpcy5jaGVja0lmVmFsaWQoZmlsdGVyKSAmJiBmaWx0ZXIgIT0gJycpIHtcbiAgICAgICAgbW9kZWxOYW1lVXJsICs9IGA/ZmlsdGVyPSR7ZmlsdGVyfWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtb2RlbE5hbWVVcmwgKz0gJz9maWx0ZXI9e30nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUobW9kZWxOYW1lVXJsKS5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yKTtcbiAgICAgIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KG5ldyBFcnJvcihgQ291bGQgbm90IGRlbGV0ZSAke2RhdGFNb2RlbE5hbWV9LiAke3RoaXMuaW52YWxpZERhdGFNb2RlbE5hbWV9YCkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBBVENIIC97dGVuYW50TmFtZX0vZGF0YW1vZGVsL3tkYXRhc291cmNlfS97YXBwTmFtZX0ve2RhdGFNb2RlbE5hbWV9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YU1vZGVsTmFtZSBEYXRhIG1vZGVsIG5hbWUgd2hpY2ggaXMgdG8gYmUgdXBkYXRlZFxuICAgKiBAcGFyYW0gZGF0YU1vZGVsT2JqIE5ldyBkYXRhIG1vZGVsIG9iamVjdFxuICAgKi9cbiAgdXBkYXRlKGRhdGFNb2RlbE5hbWUsIHVwZGF0ZU9iamVjdCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKGRhdGFNb2RlbE5hbWUgJiYgdXBkYXRlT2JqZWN0KSB7XG4gICAgICAvLyBjb25zdCBtb2RlbE5hbWVVcmwgPSBgJHt0aGlzLmdldERhdGFTb3VyY2VVUkwoZGF0YU1vZGVsTmFtZSl9JHtkYXRhTW9kZWxOYW1lfWA7XG4gICAgICBjb25zdCBtb2RlbE5hbWVVcmwgPSB0aGlzLmdldERhdGFTb3VyY2VVUkwoZGF0YU1vZGVsTmFtZSkgKyBkYXRhTW9kZWxOYW1lO1xuICAgICAgcmV0dXJuIHRoaXMuaHR0cC5wYXRjaChtb2RlbE5hbWVVcmwsIHVwZGF0ZU9iamVjdCkubWFwKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfSkuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvcik7XG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhuZXcgRXJyb3IoYENvdWxkIG5vdCB1cGRhdGUgJHtkYXRhTW9kZWxOYW1lfS4gJHt0aGlzLmludmFsaWREYXRhTW9kZWxOYW1lfWApKTtcbiAgICB9XG4gIH1cblxuICAvLyBHRVQgL3t0ZW5hbnROYW1lfS9kYXRhbW9kZWwve2RhdGFzb3VyY2V9L3thcHBOYW1lfS97ZGF0YU1vZGVsTmFtZX0ve2RhdGFNb2RlbElkfVxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGRhdGFNb2RlbE5hbWUgRGF0YSBtb2RlbCBuYW1lIHdoaWNoIGlzIHRvIGJlIHVwZGF0ZWRcbiAgICogQHBhcmFtIGRhdGFNb2RlbElkIERhdGEgbW9kZWwgaWQgd2hpY2ggaXMgdG8gYmUgdXBkYXRlZFxuICAgKi9cbiAgZ2V0QnlJZChkYXRhTW9kZWxOYW1lLCBkYXRhTW9kZWxJZCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKGRhdGFNb2RlbE5hbWUpIHtcbiAgICAgIGlmIChkYXRhTW9kZWxJZCkge1xuICAgICAgICAvLyBjb25zdCBtb2RlbE5hbWVVcmwgPSBgJHt0aGlzLmdldERhdGFTb3VyY2VVUkwoZGF0YU1vZGVsTmFtZSl9JHtkYXRhTW9kZWxOYW1lfS8ke2RhdGFNb2RlbElkfWA7XG4gICAgICAgIGNvbnN0IG1vZGVsTmFtZVVybCA9IHRoaXMuZ2V0RGF0YVNvdXJjZVVSTChkYXRhTW9kZWxOYW1lKSArIGRhdGFNb2RlbE5hbWUgKyBcIi9cIiArIGRhdGFNb2RlbElkO1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChtb2RlbE5hbWVVcmwpLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IpO1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JzZXJ2YWJsZS50aHJvdyhuZXcgRXJyb3IoYENvdWxkIG5vdCBnZXQgJHtkYXRhTW9kZWxOYW1lfSBieSBpZCAke2RhdGFNb2RlbElkfS4gJHt0aGlzLmludmFsaWREYXRhTW9kZWxJZH1gKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIE9ic2VydmFibGUudGhyb3cobmV3IEVycm9yKGBDb3VsZCBub3QgZ2V0ICR7ZGF0YU1vZGVsTmFtZX0gYnkgaWQgJHtkYXRhTW9kZWxJZH0uICR7dGhpcy5pbnZhbGlkRGF0YU1vZGVsTmFtZX1gKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gREVMRVRFIC97dGVuYW50TmFtZX0vZGF0YW1vZGVsL3tkYXRhc291cmNlfS97YXBwTmFtZX0ve2RhdGFNb2RlbE5hbWV9L3tkYXRhTW9kZWxJZH1cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhTW9kZWxOYW1lIERhdGEgbW9kZWwgbmFtZSB3aGljaCBpcyB0byBiZSBkZWxldGVkXG4gICAqIEBwYXJhbSBkYXRhTW9kZWxJZCBEYXRhIG1vZGVsIGlkIHdoaWNoIGlzIHRvIGJlIGRlbGV0ZWRcbiAgICovXG4gIGRlbGV0ZUJ5SWQoZGF0YU1vZGVsTmFtZSwgZGF0YU1vZGVsSWQpIHtcbiAgICBpZiAoZGF0YU1vZGVsTmFtZSkge1xuICAgICAgaWYgKGRhdGFNb2RlbElkKSB7XG4gICAgICAgIC8vIGNvbnN0IG1vZGVsTmFtZVVybCA9IGAke3RoaXMuZ2V0RGF0YVNvdXJjZVVSTChkYXRhTW9kZWxOYW1lKX0ke2RhdGFNb2RlbE5hbWV9LyR7ZGF0YU1vZGVsSWR9YDtcbiAgICAgICAgY29uc3QgbW9kZWxOYW1lVXJsID0gdGhpcy5nZXREYXRhU291cmNlVVJMKGRhdGFNb2RlbE5hbWUpICsgZGF0YU1vZGVsTmFtZSArIFwiL1wiICsgZGF0YU1vZGVsSWQ7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZGVsZXRlKG1vZGVsTmFtZVVybCkubWFwKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvcik7XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBPYnNlcnZhYmxlLnRocm93KG5ldyBFcnJvcihgQ291bGQgbm90IGdldCAke2RhdGFNb2RlbE5hbWV9IGJ5IGlkICR7ZGF0YU1vZGVsSWR9LiAke3RoaXMuaW52YWxpZERhdGFNb2RlbElkfWApKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3cobmV3IEVycm9yKGBDb3VsZCBub3QgZGVsZXRlICR7ZGF0YU1vZGVsTmFtZX0gYnkgaWQgJHtkYXRhTW9kZWxJZH0uICR7dGhpcy5pbnZhbGlkRGF0YU1vZGVsTmFtZX1gKSk7XG4gICAgfVxuICB9XG5cbiAgLy9QQVRDSCAve3RlbmFudE5hbWV9L2RhdGFtb2RlbC97ZGF0YXNvdXJjZX0ve2FwcE5hbWV9L3tkYXRhTW9kZWxOYW1lfS97ZGF0YU1vZGVsSWR9XG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZGF0YU1vZGVsTmFtZSBEYXRhIG1vZGVsIG5hbWUgd2hpY2ggaXMgdG8gYmUgdXBkYXRlXG4gICAqIEBwYXJhbSBkYXRhTW9kZWxJZCBEYXRhIG1vZGVsIGlkIHdoaWNoIGlzIHRvIGJlIHVwZGF0ZWRcbiAgICogQHBhcmFtIGRhdGFNb2RlbE9iaiBEYXRhIE1vZGVsIG9iamVjdCB3aGljaCBpcyB0byBiZSBpbnNlcnRlZFxuICAgKi9cbiAgdXBkYXRlQnlJZChkYXRhTW9kZWxOYW1lLCBkYXRhTW9kZWxJZCwgZGF0YU1vZGVsT2JqKSB7XG4gICAgaWYgKGRhdGFNb2RlbE5hbWUpIHtcbiAgICAgIGlmIChkYXRhTW9kZWxJZCkge1xuICAgICAgICAvLyBjb25zdCBtb2RlbE5hbWVVcmwgPSBgJHt0aGlzLmdldERhdGFTb3VyY2VVUkwoZGF0YU1vZGVsTmFtZSl9JHtkYXRhTW9kZWxOYW1lfS8ke2RhdGFNb2RlbElkfWA7XG4gICAgICAgIGNvbnN0IG1vZGVsTmFtZVVybCA9IHRoaXMuZ2V0RGF0YVNvdXJjZVVSTChkYXRhTW9kZWxOYW1lKSArIGRhdGFNb2RlbE5hbWUgKyBcIi9cIiArIGRhdGFNb2RlbElkO1xuICAgICAgICB2YXIgZG1PYmogPSBPYmplY3QuYXNzaWduKHt9LCBkYXRhTW9kZWxPYmopO1xuICAgICAgICBkZWxldGUgZG1PYmpbJ19pZCddO1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBhdGNoKG1vZGVsTmFtZVVybCwgZG1PYmopLm1hcCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IpO1xuICAgICAgICB9KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgT2JzZXJ2YWJsZS50aHJvdyhuZXcgRXJyb3IoYENvdWxkIG5vdCBnZXQgJHtkYXRhTW9kZWxOYW1lfSBieSBpZCAke2RhdGFNb2RlbElkfS4gJHt0aGlzLmludmFsaWREYXRhTW9kZWxJZH1gKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KG5ldyBFcnJvcihgQ291bGQgbm90IGRlbGV0ZSAke2RhdGFNb2RlbE5hbWV9IGJ5IGlkICR7ZGF0YU1vZGVsSWR9LiAke3RoaXMuaW52YWxpZERhdGFNb2RlbE5hbWV9YCkpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdG9RdWVyeVN0cmluZyhvYmopIHtcbiAgICBjb25zdCBwYXJ0cyA9IFtdO1xuICAgIGZvciAoY29uc3QgaSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkoaSkgJiYgdGhpcy5jaGVja0lmVmFsaWQob2JqW2ldKSkge1xuICAgICAgICBwYXJ0cy5wdXNoKChpKSArICc9JyArIEpTT04uc3RyaW5naWZ5KG9ialtpXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFydHMuam9pbignJicpO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja0lmVmFsaWQodmFsdWU6IGFueSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXREYXRhU291cmNlVVJMKGRhdGFNb2RlbE5hbWUpIHtcbiAgICBpZiAoIXRoaXMuZG1Ecykge1xuICAgICAgdGhpcy5kbURzID0gd2luZG93WyduZXV0cmlub3MnXVsnZGF0YVNvdXJjZSddO1xuICAgIH1cbiAgICBjb25zdCBkc0RtID0gdGhpcy5kbURzW2RhdGFNb2RlbE5hbWVdO1xuICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLnN5c3RlbVNlcnZpY2UucHJvcGVydGllcztcbiAgICBpZiAoZHNEbSkge1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMuYmFzZVVybCArIHByb3BlcnRpZXMudGVuYW50TmFtZSArICcvZGF0YW1vZGVsLycgKyBkc0RtICsgJy8nICsgcHJvcGVydGllcy5hcHBOYW1lICsgJy8nO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldERhdGFNb2RlbFVybCgpO1xuICAgIH1cbiAgfVxuXG5cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBIdHRwRXZlbnQsXG4gIEh0dHBJbnRlcmNlcHRvcixcbiAgSHR0cEhhbmRsZXIsXG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwSGVhZGVycyxcbiAgSHR0cFJlc3BvbnNlLFxuICBIdHRwRXJyb3JSZXNwb25zZSxcbiAgSHR0cENsaWVudFxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzL1J4JztcbmltcG9ydCB7IE5IVFRQTG9hZGVyU2VydmljZSB9IGZyb20gJy4vbi1IVFRQTG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlN5c3RlbVNlcnZpY2UgfSBmcm9tICcuL24tc3lzdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlNlc3Npb25TdG9yYWdlU2VydmljZSB9IGZyb20gJy4vbi1zZXNzaW9uU3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvY2FsU3RvcmFnZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5Ub2tlblNlcnZpY2UgfSBmcm9tICcuL24tdG9rZW4uc2VydmljZSc7XG5pbXBvcnQgeyBOUHViU3ViU2VydmljZSB9IGZyb20gJy4vbi1wdWJTdWIuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOSHR0cFNlcnZpY2Uge1xuICB0aW1lb3V0ID0gOTAwMDA7XG4gIHN5c3RlbVNlcnZpY2U7XG4gIG5TZXNzaW9uU3RvcmFnZTtcbiAgYXBwUHJvcGVydGllcztcbiAgaXNSZWZyZXNoaW5nVG9rZW4gPSBmYWxzZTtcbiAgblB1YlN1YlNlcnZpY2U7XG4gIHRva2VuU3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PHN0cmluZz4obnVsbCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuSFRUUExvYWRlcjogTkhUVFBMb2FkZXJTZXJ2aWNlLCBwcml2YXRlIGluajogSW5qZWN0b3IsXG4gICAgcHJpdmF0ZSBuTG9jYWxTdG9yYWdlU2VydmljZTogTkxvY2FsU3RvcmFnZVNlcnZpY2UsIHByaXZhdGUgblRva2VuU2VydmljZTogTlRva2VuU2VydmljZSkge1xuICAgIHRoaXMuc3lzdGVtU2VydmljZSA9IE5TeXN0ZW1TZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgdGhpcy5uU2Vzc2lvblN0b3JhZ2UgPSBuZXcgTlNlc3Npb25TdG9yYWdlU2VydmljZSgpO1xuICAgIHRoaXMuYXBwUHJvcGVydGllcyA9IHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ3Byb3BlcnRpZXMnKTtcbiAgICB0aGlzLm5QdWJTdWJTZXJ2aWNlID0gbmV3IE5QdWJTdWJTZXJ2aWNlKCk7XG4gIH1cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICB0aGlzLnJlcXVlc3RJbnRlcmNlcHRvcigpO1xuXG4gICAgLy8gUGFzcyBvbiB0aGUgY2xvbmVkIHJlcXVlc3QgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgcmVxdWVzdC5cbiAgICByZXR1cm4gbmV4dC5oYW5kbGUodGhpcy5yZXF1ZXN0T3B0aW9ucyhyZXEpKVxuICAgICAgLnRpbWVvdXQodGhpcy50aW1lb3V0KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHRoaXMub25DYXRjaChlcnJvciwgcmVxLCBuZXh0KSlcbiAgICAgIC5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgdGhpcy5vbkZpbmFsbHkoKTtcbiAgICAgIH0pO1xuICB9O1xuXG4gIHVwZGF0ZVRva2VuKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSwgcmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IGFueSB7XG4gICAgaWYgKHRoaXMuYXBwUHJvcGVydGllcy5hcHBBdXRoZW50aWNhdGlvblN0cmF0ZWd5ID09PSAnYWN0aXZlRGlyZWN0b3J5JyB8fFxuICAgICAgdGhpcy5hcHBQcm9wZXJ0aWVzLmFwcEF1dGhlbnRpY2F0aW9uU3RyYXRlZ3kgPT09ICdsb2NhbEF1dGgnKSB7XG4gICAgICBpZiAoIXRoaXMuaXNSZWZyZXNoaW5nVG9rZW4pIHtcbiAgICAgICAgdGhpcy5pc1JlZnJlc2hpbmdUb2tlbiA9IHRydWU7XG5cbiAgICAgICAgLy8gUmVzZXQgaGVyZSBzbyB0aGF0IHRoZSBmb2xsb3dpbmcgcmVxdWVzdHMgd2FpdCB1bnRpbCB0aGUgdG9rZW5cbiAgICAgICAgLy8gY29tZXMgYmFjayBmcm9tIHRoZSByZWZyZXNoVG9rZW4gY2FsbC5cbiAgICAgICAgdGhpcy50b2tlblN1YmplY3QubmV4dChudWxsKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoVG9rZW4oKVxuICAgICAgICAgIC5zd2l0Y2hNYXAoKHRva2Vuc09iajogT2JqZWN0KSA9PiB7XG4gICAgICAgICAgICBpZiAodG9rZW5zT2JqKSB7XG4gICAgICAgICAgICAgIHRoaXMublRva2VuU2VydmljZS51cGRhdGVUb2tlbnModG9rZW5zT2JqKTtcbiAgICAgICAgICAgICAgY29uc3QgbmV3VG9rZW4gPSB0b2tlbnNPYmpbJ2FjY2Vzc1Rva2VuJ107XG4gICAgICAgICAgICAgIHRoaXMudG9rZW5TdWJqZWN0Lm5leHQobmV3VG9rZW4pO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dC5oYW5kbGUodGhpcy5yZXF1ZXN0T3B0aW9ucyhyZXEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KG5ldyBFcnJvcignQ2FuXFwndCByZWZyZXNoIHRoZSB0b2tlbicpKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChlcnIgPT4gdGhpcy5vbkNhdGNoRXJyb3IoZXJyKSlcbiAgICAgICAgICAuZmluYWxseSgoKSA9PiB0aGlzLmlzUmVmcmVzaGluZ1Rva2VuID0gZmFsc2UpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tlblN1YmplY3RcbiAgICAgICAgICAuZmlsdGVyKHRva2VuID0+IHRva2VuICE9IG51bGwpXG4gICAgICAgICAgLnRha2UoMSlcbiAgICAgICAgICAuc3dpdGNoTWFwKHRva2VuID0+IG5leHQuaGFuZGxlKHRoaXMucmVxdWVzdE9wdGlvbnMocmVxKSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5vbkNhdGNoRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIHJlZnJlc2hUb2tlbigpIHtcbiAgICBjb25zdCBodHRwID0gdGhpcy5pbmouZ2V0KEh0dHBDbGllbnQpO1xuICAgIGNvbnN0IGFwcFByb3BlcnRpZXMgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0VmFsKCdwcm9wZXJ0aWVzJyk7XG4gICAgY29uc3QgcmVmcmVzaFVybCA9IHRoaXMuc3lzdGVtU2VydmljZS5nZXRBdXRoVXJsKCkgKyBhcHBQcm9wZXJ0aWVzLmFwcE5hbWUgKyAnL3JlZnJlc2gnO1xuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAncGxhdGZvcm1EZXRhaWxzJzogdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFBsYXRmb3JtRGV0YWlscyh0aGlzLnN5c3RlbVNlcnZpY2UuY2hlY2tEZXZpY2UoKSksXG4gICAgICAndXNlcktleSc6IHRoaXMublNlc3Npb25TdG9yYWdlLmdldFZhbHVlKCd1c2VyT2JqJylbJ3VzZXJLZXknXSxcbiAgICAgICdyZWZyZXNoVG9rZW4nOiB0aGlzLm5TZXNzaW9uU3RvcmFnZS5nZXRWYWx1ZSgncmVmcmVzaFRva2VuJylcbiAgICB9O1xuICAgIGJvZHkucGxhdGZvcm1EZXRhaWxzWyd1dWlkJ10gPSB0aGlzLm5Mb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldFZhbHVlKCd1dWlkJyk7XG4gICAgcmV0dXJuIGh0dHAucG9zdChyZWZyZXNoVXJsLCBib2R5KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIFJlcXVlc3Qgb3B0aW9ucy5cbiAgICogQHBhcmFtIG9wdGlvbnNcbiAgICogQHJldHVybnMgSHR0cFJlcXVlc3RcbiAgICovXG4gIHByaXZhdGUgcmVxdWVzdE9wdGlvbnMocmVxPzogSHR0cFJlcXVlc3Q8YW55Pikge1xuICAgIGxldCBoZWFkZXJzID0gcmVxLmhlYWRlcnM7XG4gICAgaWYgKHJlcS5oZWFkZXJzID09IG51bGwpIHtcbiAgICAgIGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcbiAgICB9XG4gICAgcmVxID0gcmVxLmNsb25lKHtcbiAgICAgIHVybDogdGhpcy5nZXRGdWxsVXJsKHJlcS51cmwpLFxuICAgICAgaGVhZGVyczogaGVhZGVyc1xuICAgIH0pO1xuICAgIGNvbnN0IGJhc2VVcmwgPSBOU3lzdGVtU2VydmljZS5nZXRJbnN0YW5jZSgpLmdldFZhbCgnYmFzZVVybCcpO1xuICAgIGNvbnN0IGlzQXJ0ID0gKGJhc2VVcmwgIT09ICcnICYmIHJlcS51cmwuaW5jbHVkZXMoYmFzZVVybCkpO1xuICAgIHJldHVybiAgaXNBcnQgPyB0aGlzLmFkZERlZmF1bHRIZWFkZXJzKHJlcSkgOiByZXE7XG4gIH1cblxuXG4gIC8qKlxuICAqIERlZmF1bHQgb3B0aW9ucy5cbiAgKiBAcGFyYW0gb3B0aW9uc1xuICAqIEByZXR1cm5zIEh0dHBIZWFkZWRyc1xuICAqL1xuICBwcml2YXRlIGFkZERlZmF1bHRIZWFkZXJzKHJlcTogYW55KSB7XG4gICAgLyoqXG4gICAgICogVE9ETzogQWRkIGFsbCBkZWZhdWx0IEhlYWRlcnMgb3ZlciBoZXJlXG4gICAgICovXG4gICAgaWYgKCFyZXEuaGVhZGVycy5oYXMoJ0FjY2Vzcy1Db250cm9sLUFsbG93LU9yaWdpbicpKSB7XG4gICAgICByZXEuaGVhZGVycyA9IHJlcS5oZWFkZXJzLnNldCgnQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luJywgJyonKTtcbiAgICB9XG5cbiAgICBpZiAoIXJlcS5oZWFkZXJzLmhhcygnQ29udGVudC1UeXBlJykpIHtcbiAgICAgIHJlcS5oZWFkZXJzID0gcmVxLmhlYWRlcnMuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgIH0gZWxzZSBpZiAocmVxLmhlYWRlcnMuaGFzKCdDb250ZW50LVR5cGUnKSAmJiAocmVxLmhlYWRlcnMuZ2V0KCdDb250ZW50LVR5cGUnKSA9PT0gJ25vLWNvbnRlbnQnKSkge1xuICAgICAgcmVxLmhlYWRlcnMgPSByZXEuaGVhZGVycy5kZWxldGUoJ0NvbnRlbnQtVHlwZScpO1xuICAgIH1cblxuICAgIGlmICghcmVxLmhlYWRlcnMuaGFzKCdBY2NlcHQnKSkge1xuICAgICAgcmVxLmhlYWRlcnMgPSByZXEuaGVhZGVycy5zZXQoJ0FjY2VwdCcsICdhcHBsaWNhdGlvbi9qc29uJyk7XG4gICAgfVxuXG4gICAgaWYgKCFyZXEuaGVhZGVycy5oYXMoJ0F1dGhvcml6YXRpb24nKSkge1xuICAgICAgdGhpcy5hcHBQcm9wZXJ0aWVzID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgncHJvcGVydGllcycpO1xuICAgICAgaWYgKHRoaXMuYXBwUHJvcGVydGllcyAmJiB0aGlzLmFwcFByb3BlcnRpZXMuYXBwQXV0aGVudGljYXRpb25TdHJhdGVneSA9PT0gJ2Jhc2ljQXV0aCcpIHtcbiAgICAgICAgbGV0IHVzZXJuYW1lLCBwYXNzd29yZDtcbiAgICAgICAgaWYgKHRoaXMuYXBwUHJvcGVydGllcy5iYXNpY0F1dGhVc2VyICYmIHRoaXMuYXBwUHJvcGVydGllcy5iYXNpY0F1dGhQYXNzd29yZCkge1xuICAgICAgICAgIHVzZXJuYW1lID0gdGhpcy5hcHBQcm9wZXJ0aWVzLmJhc2ljQXV0aFVzZXI7XG4gICAgICAgICAgcGFzc3dvcmQgPSB0aGlzLmFwcFByb3BlcnRpZXMuYmFzaWNBdXRoUGFzc3dvcmQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdXNlcm5hbWUgPSBcImJoaXZlLWFydC1wcm94eXVzZXJcIjtcbiAgICAgICAgICBwYXNzd29yZCA9IFwicGFzc3dvcmRcIjtcbiAgICAgICAgICBjb25zb2xlLndhcm4oXCJBdXRoZW50aWNhdGlvbiBzdHJhdGVneTogQmFzaWMgQXV0aC4gYmFzaWNBdXRoVXNlciBhbmQgYmFzaWNBdXRoUGFzc3dvcmQgYXJlIG5vdCBjb25maWd1cmVkIGluIGVudmlyb25tZW50LiBTZXR0aW5nIGRlZmF1bHQgdmFsdWVzLlwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXEuaGVhZGVycyA9IHJlcS5oZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArIFwiOlwiICsgcGFzc3dvcmQpKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5hcHBQcm9wZXJ0aWVzICYmICh0aGlzLmFwcFByb3BlcnRpZXMuYXBwQXV0aGVudGljYXRpb25TdHJhdGVneSA9PT0gJ2FjdGl2ZURpcmVjdG9yeScgfHxcbiAgICAgICAgdGhpcy5hcHBQcm9wZXJ0aWVzLmFwcEF1dGhlbnRpY2F0aW9uU3RyYXRlZ3kgPT09ICdsb2NhbEF1dGgnKSkge1xuICAgICAgICBpZiAodGhpcy5uU2Vzc2lvblN0b3JhZ2UuZ2V0VmFsdWUoJ2FjY2Vzc1Rva2VuJykpIHtcbiAgICAgICAgICByZXEuaGVhZGVycyA9IHJlcS5oZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCZWFyZXIgJyArIHRoaXMublNlc3Npb25TdG9yYWdlLmdldFZhbHVlKCdhY2Nlc3NUb2tlbicpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVxO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIEFQSSB1cmwuXG4gICAqIEBwYXJhbSB1cmxcbiAgICogQHJldHVybnMgc3RyaW5nXG4gICAqL1xuICBwcml2YXRlIGdldEZ1bGxVcmwodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIC8vIHJldHVybiBmdWxsIFVSTCB0byBBUEkgaGVyZVxuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICAvKipcbiAgICogUmVxdWVzdCBpbnRlcmNlcHRvci5cbiAgICovXG4gIHByaXZhdGUgcmVxdWVzdEludGVyY2VwdG9yKCk6IHZvaWQge1xuICAgIHRoaXMubkhUVFBMb2FkZXIuaXNIVFRQUmVxdWVzdEluUHJvZ3Jlc3ModHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzcG9uc2UgaW50ZXJjZXB0b3IuXG4gICAqL1xuICBwcml2YXRlIHJlc3BvbnNlSW50ZXJjZXB0b3IoKTogdm9pZCB7XG4gICAgdGhpcy5uSFRUUExvYWRlci5pc0hUVFBSZXF1ZXN0SW5Qcm9ncmVzcyhmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICAqIEVycm9yIGhhbmRsZXIuXG4gICAgKiBAcGFyYW0gZXJyb3JcbiAgICAqIEBwYXJhbSBjYXVnaHRcbiAgICAqIEByZXR1cm5zIEVycm9yT2JzZXJ2YWJsZVxuICAgICovXG4gIHByaXZhdGUgb25DYXRjaChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UsIHJlcTogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgICBpZiAoKDxIdHRwRXJyb3JSZXNwb25zZT5lcnJvcikuc3RhdHVzID09PSA0MDMgJiYgKDxIdHRwRXJyb3JSZXNwb25zZT5lcnJvcikuZXJyb3IubWVzc2FnZSA9PT0gJ2p3dCBleHBpcmVkJykge1xuICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVUb2tlbihlcnJvciwgcmVxLCBuZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9uU3Vic2NyaWJlRXJyb3IoZXJyb3IpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5vblN1YnNjcmliZUVycm9yKGVycm9yKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogb25TdWJzY3JpYmVFcnJvclxuICAgKiBAcGFyYW0gZXJyb3JcbiAgICovXG4gIHByaXZhdGUgb25TdWJzY3JpYmVFcnJvcihlcnI6IEh0dHBFcnJvclJlc3BvbnNlKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICB0aGlzLm5IVFRQTG9hZGVyLmFsZXJ0RXJyb3IoZXJyKTtcbiAgICByZXR1cm4gdGhpcy5vbkNhdGNoRXJyb3IoZXJyKTtcbiAgfVxuICAvKipcbiAgICogb25GaW5hbGx5XG4gICAqL1xuICBwcml2YXRlIG9uRmluYWxseSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlc3BvbnNlSW50ZXJjZXB0b3IoKTtcbiAgfVxuXG4gIHByaXZhdGUgb25DYXRjaEVycm9yKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIE9ic2VydmFibGUudGhyb3coZXJyb3IpO1xuICB9XG5cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8vIGltcG9ydCB7IE1hdFNuYWNrQmFyIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMvU3ViamVjdCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcbmltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IE5QdWJTdWJTZXJ2aWNlIH0gZnJvbSAnLi9uLXB1YlN1Yi5zZXJ2aWNlJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTlNuYWNrYmFyU2VydmljZSB7XG4gIHNuYWNrQmFyTGlzdG5lcjtcbiAgcHJpdmF0ZSBzbmFja1NlcnZpY2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgblB1YlN1YlNlcnZpY2U6IE5QdWJTdWJTZXJ2aWNlKSB7XG4gICAgaWYgKE5TeXN0ZW1TZXJ2aWNlLmdldEluc3RhbmNlKCkuZ2V0VmFsKCd1c2VEZWZhdWx0RXhjZXB0aW9uVUknKSkge1xuICAgICAgdGhpcy5zbmFja0Jhckxpc3RuZXIgPSB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRzdWIoJ29wZW5TbmFja0JhcicsIChtc2cpID0+IHtcbiAgICAgICAgdGhpcy5vcGVuU25hY2tCYXIobXNnKTtcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLnNuYWNrU2VydmljZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG5cblxuICBhZGQoZGF0YToge1xuICAgIG1zZzogc3RyaW5nLCB0aW1lb3V0PzogbnVtYmVyLCBiYWNrZ3JvdW5kPzogc3RyaW5nLCBjb2xvcj86IHN0cmluZywgY3VzdG9tQ2xhc3M/OiBhbnksXG4gICAgYWN0aW9uPzogeyB0ZXh0OiBzdHJpbmcsIG9uQ2xpY2s/OiBGdW5jdGlvbiwgY29sb3I/OiBzdHJpbmcgfSwgb25BZGQ/OiBGdW5jdGlvbiwgb25SZW1vdmU/OiBGdW5jdGlvblxuICB9KSB7XG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7XG4gICAgICBhY3Rpb246ICdhZGQnLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNuYWNrU2VydmljZS5uZXh0KHsgYWN0aW9uOiAncmVtb3ZlJywgaWQ6IGlkIH0pO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7IGFjdGlvbjogJ2NsZWFyJyB9KTtcbiAgfVxuXG4gIG9wZW5TbmFja0JhcihtZXNzYWdlLCB0aW1lb3V0PywgKSB7XG4gICAgdGhpcy5hZGQoe1xuICAgICAgbXNnOiBtZXNzYWdlLFxuICAgICAgdGltZW91dDogdGltZW91dCB8fCA1MDAwLFxuICAgICAgYWN0aW9uOiB7XG4gICAgICAgIHRleHQ6ICdDbG9zZScsXG4gICAgICAgIG9uQ2xpY2s6IChzbmFjaykgPT4ge1xuICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgb25BZGQ6IChzbmFjaykgPT4ge1xuICAgICAgfSxcbiAgICAgIG9uUmVtb3ZlOiAoc25hY2spID0+IHtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ24tc25hY2snLFxuICB0ZW1wbGF0ZTogYFxuICAgICA8ZGl2IGNsYXNzPVwic25hY2tcIiBbbmdTdHlsZV09XCJ7YmFja2dyb3VuZDogYmFja2dyb3VuZCA/IGJhY2tncm91bmQgOiAnIzMyMzIzMicgLCBjb2xvcjogY29sb3IgPyBjb2xvciA6ICcjZmZmJ31cIiBbbmdDbGFzc109XCIgWydzbmFja2Jhci1sYXlvdXQnLCAnY3VzdG9tQ2xhc3MnIF1cIj5cbiAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICAgPC9kaXY+IFxuICBgLFxuICBzdHlsZXM6IFtgLnNuYWNrLWFjdGlvbntjdXJzb3I6cG9pbnRlcjtjb2xvcjojMjE5NmYzO2ZvbnQtd2VpZ2h0OjcwMH0uY29udGFpbmVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC13cmFwOndyYXB9LmNoaWxke3dpZHRoOjYwJTtmbGV4OjEgMDttYXJnaW4tcmlnaHQ6LjVlbX0uc25hY2tiYXJzLmJvdHRvbS1jZW50ZXJ7YWxpZ24taXRlbXM6bWlkZGxlO2xlZnQ6NTAlOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwwKTtib3R0b206MXB4O2FsaWduLWl0ZW1zOmNlbnRlcn0uc25hY2tiYXJze3Bvc2l0aW9uOmZpeGVkO3otaW5kZXg6OTk5OTk7bWF4LXdpZHRoOjEwMCU7d29yZC13cmFwOmJyZWFrLXdvcmQ7ZGlzcGxheTppbmxpbmU7Zm9udC1mYW1pbHk6Um9ib3RvO2xldHRlci1zcGFjaW5nOjFweH0uc25hY2t7cGFkZGluZzoxZW07Ym9yZGVyLXJhZGl1czouM2VtO21heC1oZWlnaHQ6NTB2aDtvdmVyZmxvdzphdXRvfWBdXG59KVxuZXhwb3J0IGNsYXNzIFNuYWNrQ29tcG9uZW50IHtcbiAgQElucHV0KCkgYmFja2dyb3VuZDtcbiAgQElucHV0KCkgY29sb3I7XG4gIEBJbnB1dCgpIGN1c3RvbUNsYXNzO1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5TbmFja2JhclNlcnZpY2UgfSBmcm9tICcuLi8uLi9uLXNuYWNrYmFyLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduLXNuYWNrYmFyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJzbmFja2JhcnNcIiBbbmdDbGFzc109XCJwb3NpdGlvbiB8fCAnYm90dG9tLWNlbnRlcidcIj5cbiAgICAgICAgICA8bi1zbmFjayAgICpuZ0Zvcj1cImxldCBzbmFja2JhciBvZiBzbmFja3NcIiBbYmFja2dyb3VuZF09XCJzbmFja2Jhci5iYWNrZ3JvdW5kIHx8IGJhY2tncm91bmRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2N1c3RvbUNsYXNzXT1cInNuYWNrYmFyLmN1c3RvbUNsYXNzIHx8IGN1c3RvbUNsYXNzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtjb2xvcl09XCJzbmFja2Jhci5jb2xvciB8fCBjb2xvciB8fCBjYWxjVGV4dENvbG9yKHNuYWNrYmFyLmJhY2tncm91bmQgfHwgYmFja2dyb3VuZClcIj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic25hY2stdGV4dCBjaGlsZFwiID5cbiAgICAgICAgICAgICAgICAgIHt7c25hY2tiYXIubXNnfX1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJzbmFja2Jhci5hY3Rpb24udGV4dFwiIGNsYXNzPVwic25hY2stYWN0aW9uXCIgKGNsaWNrKT1cInNuYWNrYmFyLmFjdGlvbi5vbkNsaWNrKClcIlxuICAgICAgICAgICAgICAgICAgIFtuZ1N0eWxlXT1cIntjb2xvcjogc25hY2tiYXIuYWN0aW9uLmNvbG9yIHx8IGFjY2VudH1cIj5cbiAgICAgICAgICAgICAgICAgIHt7c25hY2tiYXIuYWN0aW9uLnRleHR9fVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9uLXNuYWNrPlxuICAgICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlczogW2Auc25hY2stYWN0aW9ue2N1cnNvcjpwb2ludGVyO2NvbG9yOiMyMTk2ZjM7Zm9udC13ZWlnaHQ6NzAwfS5jb250YWluZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6d3JhcH0uY2hpbGR7d2lkdGg6NjAlO2ZsZXg6MSAwO21hcmdpbi1yaWdodDouNWVtfS5zbmFja2JhcnMuYm90dG9tLWNlbnRlcnthbGlnbi1pdGVtczptaWRkbGU7bGVmdDo1MCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLDApO2JvdHRvbToxcHg7YWxpZ24taXRlbXM6Y2VudGVyfS5zbmFja2JhcnN7cG9zaXRpb246Zml4ZWQ7ei1pbmRleDo5OTk5OTttYXgtd2lkdGg6MTAwJTt3b3JkLXdyYXA6YnJlYWstd29yZDtkaXNwbGF5OmlubGluZTtmb250LWZhbWlseTpSb2JvdG87bGV0dGVyLXNwYWNpbmc6MXB4fS5zbmFja3twYWRkaW5nOjFlbTtib3JkZXItcmFkaXVzOi4zZW07bWF4LWhlaWdodDo1MHZoO292ZXJmbG93OmF1dG99YF1cbn0pXG5leHBvcnQgY2xhc3MgU25hY2tiYXJDb21wb25lbnQge1xuICBASW5wdXQoKSBwb3NpdGlvbjogJ3RvcC1sZWZ0JyB8ICd0b3AtY2VudGVyJyB8ICd0b3AtcmlnaHQnIHwgJ2JvdHRvbS1sZWZ0JyB8ICdib3R0b20tY2VudGVyJyB8ICdib3R0b20tcmlnaHQnO1xuICBASW5wdXQoKSBtYXg6IG51bWJlciA9IDE7XG4gIEBJbnB1dCgpIGJhY2tncm91bmQ6IHN0cmluZztcbiAgQElucHV0KCkgYWNjZW50OiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNvbG9yOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGN1c3RvbUNsYXNzOiBhbnk7XG4gIEBJbnB1dCgpIHRpbWVvdXQ6IG51bWJlcjtcblxuICBAT3V0cHV0KCkgcHVibGljIG9uQWRkOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgcHVibGljIG9uUmVtb3ZlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuICBAT3V0cHV0KCkgcHVibGljIG9uQ2xlYXI6IEV2ZW50RW1pdHRlcjxib29sZWFuPiA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICBzbmFja3M6IEFycmF5PHtcbiAgICBpZDogc3RyaW5nLCBtc2c6IHN0cmluZywgdGltZW91dD86IG51bWJlciwgY29sb3I/OiBzdHJpbmcsIGJhY2tncm91bmQ/OiBzdHJpbmcsIGN1c3RvbUNsYXNzPzogYW55LCBhY3Rpb24/OiB7XG4gICAgICB0ZXh0OiBzdHJpbmcsIG9uQ2xpY2s/OiBGdW5jdGlvbiwgY29sb3I/OiBzdHJpbmdcbiAgICB9LCBvbkFkZD86IEZ1bmN0aW9uLCBvblJlbW92ZT86IEZ1bmN0aW9uLCB0aW1lb3V0T2JqPzogYW55XG4gIH0+ID0gW107XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzbmFja2JhclNlcnZpY2U6IE5TbmFja2JhclNlcnZpY2UpIHtcbiAgICB0aGlzLnNuYWNrYmFyU2VydmljZS5nZXQoKVxuICAgICAgLnN1YnNjcmliZShzbmFjayA9PiB7XG4gICAgICAgIGlmIChzbmFjay5hY3Rpb24gPT09ICdhZGQnKSB7XG4gICAgICAgICAgdGhpcy5hZGQoc25hY2suZGF0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc25hY2suYWN0aW9uID09PSAncmVtb3ZlJykge1xuICAgICAgICAgIHRoaXMucmVtb3ZlKHNuYWNrLmlkKTtcbiAgICAgICAgfSBlbHNlIGlmIChzbmFjay5hY3Rpb24gPT09ICdjbGVhcicpIHtcbiAgICAgICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICB9XG5cbiAgYWRkKHNuYWNrKSB7XG4gICAgbGV0IHRpbWVvdXQ7XG4gICAgY29uc3QgaWQgPSB0aGlzLnV1aWQoKTtcblxuICAgIGlmICh0aGlzLm1heCAmJiB0aGlzLm1heCA+IDAgJiYgdGhpcy5zbmFja3MubGVuZ3RoID09PSB0aGlzLm1heCkge1xuICAgICAgdGhpcy5yZW1vdmUodGhpcy5zbmFja3NbMF0uaWQpO1xuICAgIH1cblxuICAgIGlmIChzbmFjay50aW1lb3V0IHx8IHRoaXMudGltZW91dCkge1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnJlbW92ZShpZCk7XG4gICAgICB9LCBzbmFjay50aW1lb3V0IHx8IHRoaXMudGltZW91dClcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gT2JqZWN0LmFzc2lnbih7IGlkOiBpZCwgdGltZW91dE9iajogdGltZW91dCB9LCBzbmFjayk7XG5cbiAgICBpZiAoc25hY2suYWN0aW9uKSB7XG4gICAgICBjb25zdCB0aGF0ID0gdGhpcztcbiAgICAgIGNvbnN0IGZjbiA9IHNuYWNrLmFjdGlvbi5vbkNsaWNrIHx8IG5ldyBGdW5jdGlvbigpO1xuICAgICAgc25hY2suYWN0aW9uLm9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgICAgIGZjbihkYXRhKTtcbiAgICAgICAgdGhhdC5yZW1vdmUoaWQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoc25hY2sub25BZGQpIHtcbiAgICAgIHNuYWNrLm9uQWRkKGRhdGEpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9uQWRkKSB7XG4gICAgICB0aGlzLm9uQWRkLmVtaXQoZGF0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5zbmFja3MucHVzaChkYXRhKTtcbiAgfVxuXG4gIHJlbW92ZShpZCkge1xuICAgIGNvbnN0IHNuYWNrID0gdGhpcy5zbmFja3MuZmluZChvYmogPT4gb2JqLmlkID09PSBpZCk7XG5cbiAgICBpZiAoc25hY2spIHtcbiAgICAgIGlmIChzbmFjay5vblJlbW92ZSkge1xuICAgICAgICBzbmFjay5vblJlbW92ZShzbmFjayk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm9uUmVtb3ZlKSB7XG4gICAgICAgIHRoaXMub25SZW1vdmUuZW1pdChzbmFjayk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzbmFjay50aW1lb3V0T2JqKSB7XG4gICAgICAgIGNsZWFyVGltZW91dChzbmFjay50aW1lb3V0T2JqKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNuYWNrcyA9IHRoaXMuc25hY2tzLmZpbHRlcihvYmogPT4gb2JqLmlkICE9PSBpZCk7XG4gIH1cblxuICBjbGVhcigpIHtcbiAgICAvLyB0aGlzLnNuYWNrcy5mb3JFYWNoKHNuYWNrID0+IHtcbiAgICAvLyAgIHRoaXMucmVtb3ZlKHNuYWNrLmlkKTtcbiAgICAvLyB9KTtcblxuICAgIHRoaXMuc25hY2tzID0gW107XG5cbiAgICBpZiAodGhpcy5vbkNsZWFyKSB7XG4gICAgICB0aGlzLm9uQ2xlYXIuZW1pdCh0cnVlKTtcbiAgICB9XG4gIH1cblxuICB1dWlkKCkge1xuICAgIC8vIHRzbGludDpkaXNhYmxlOm5vLWJpdHdpc2VcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgICAgY29uc3QgciA9IE1hdGgucmFuZG9tKCkgKiAxNiB8IDAsIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMgfCAweDgpO1xuICAgICAgcmV0dXJuIHYudG9TdHJpbmcoMTYpO1xuICAgIH0pO1xuICAgIC8vIHRzbGludDplbmFibGU6bm8tYml0d2lzZVxuICB9XG5cbiAgY2FsY1RleHRDb2xvcihiYWNrZ3JvdW5kKSB7XG4gICAgaWYgKCFiYWNrZ3JvdW5kKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoZXhUb1JnYihoZXgpIHtcbiAgICAgIGNvbnN0IHNob3J0aGFuZFJlZ2V4ID0gL14jPyhbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKSQvaTtcbiAgICAgIGhleCA9IGhleC5yZXBsYWNlKHNob3J0aGFuZFJlZ2V4LCAobSwgciwgZywgYikgPT4ge1xuICAgICAgICByZXR1cm4gciArIHIgKyBnICsgZyArIGIgKyBiO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IC9eIz8oW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkkL2kuZXhlYyhoZXgpO1xuICAgICAgcmV0dXJuIHJlc3VsdCA/IHtcbiAgICAgICAgcjogcGFyc2VJbnQocmVzdWx0WzFdLCAxNiksXG4gICAgICAgIGc6IHBhcnNlSW50KHJlc3VsdFsyXSwgMTYpLFxuICAgICAgICBiOiBwYXJzZUludChyZXN1bHRbM10sIDE2KVxuICAgICAgfSA6IG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcmdiID0gaGV4VG9SZ2IoYmFja2dyb3VuZCk7XG4gICAgaWYgKCFyZ2IpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbG9yID0gW3JnYi5yIC8gMjU1LCByZ2IuZyAvIDI1NSwgcmdiLmIgLyAyNTVdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb2xvci5sZW5ndGg7ICsraSkge1xuICAgICAgaWYgKGNvbG9yW2ldIDw9IDAuMDM5MjgpIHtcbiAgICAgICAgY29sb3JbaV0gPSBjb2xvcltpXSAvIDEyLjkyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sb3JbaV0gPSBNYXRoLnBvdygoY29sb3JbaV0gKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBsID0gMC4yMTI2ICogY29sb3JbMF0gKyAwLjcxNTIgKiBjb2xvclsxXSArIDAuMDcyMiAqIGNvbG9yWzJdO1xuXG4gICAgaWYgKGwgPiAwLjE3OSkge1xuICAgICAgcmV0dXJuICcjMDAwJztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuICcjZmZmJztcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBBUFBfSU5JVElBTElaRVIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG4vLyBpbXBvcnQgeyBCcm93c2VyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmltcG9ydCB7IEhUVFBfSU5URVJDRVBUT1JTIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuLy8gaW1wb3J0IHsgQnJvd3NlckFuaW1hdGlvbnNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyL2FuaW1hdGlvbnMnO1xuLy8gaW1wb3J0IHsgTWF0U25hY2tCYXIgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWxcIjtcbmltcG9ydCB7IE5BdXRoR3VhcmRTZXJ2aWNlIH0gZnJvbSAnLi9uLWF1dGhHYXVyZC5zZXJ2aWNlJ1xuaW1wb3J0IHsgTkRhdGFNb2RlbFNlcnZpY2UgfSBmcm9tICcuL24tZGF0YU1vZGVsLnNlcnZpY2UnO1xuLy8gaW1wb3J0IHsgTkRhdGFTb3VyY2VTZXJ2aWNlIH0gZnJvbSAnLi9uLWRhdGFTb3VyY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBOSHR0cFNlcnZpY2UgfSBmcm9tICcuL24tSFRUUC5zZXJ2aWNlJztcbmltcG9ydCB7IE5IVFRQTG9hZGVyU2VydmljZSB9IGZyb20gJy4vbi1IVFRQTG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkxvY2FsU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL24tbG9jYWxTdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkxvZ2luU2VydmljZSB9IGZyb20gJy4vbi1sb2dpbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5Mb2dvdXRTZXJ2aWNlIH0gZnJvbSAnLi9uLWxvZ291dC5zZXJ2aWNlJztcbmltcG9ydCB7IE5Ob3RpZmljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9uLW5vdGlmaWNhdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5TbmFja2JhclNlcnZpY2UgfSBmcm9tICcuL24tc25hY2tiYXIuc2VydmljZSc7XG5pbXBvcnQgeyBOU3lzdGVtU2VydmljZSB9IGZyb20gJy4vbi1zeXN0ZW0uc2VydmljZSc7XG5pbXBvcnQgeyBOUHViU3ViU2VydmljZSB9IGZyb20gJy4vbi1wdWJTdWIuc2VydmljZSc7XG5pbXBvcnQgeyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLXNlc3Npb25TdG9yYWdlLnNlcnZpY2UnXG5pbXBvcnQgeyBOVG9rZW5TZXJ2aWNlIH0gZnJvbSAnLi9uLXRva2VuLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cENsaWVudE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbi8vIGltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUsIFJvdXRlcyB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBIdHRwTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5pbXBvcnQgeyBOZ0ZvcmFnZU1vZHVsZSB9IGZyb20gJ25nZm9yYWdlJztcblxuaW1wb3J0IHsgU25hY2tDb21wb25lbnQgfSBmcm9tICcuL3NuYWNrYmFyL3NuYWNrL3NuYWNrLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTbmFja2JhckNvbXBvbmVudCB9IGZyb20gJy4vc25hY2tiYXIvc25hY2tiYXIvc25hY2tiYXIuY29tcG9uZW50Jztcbi8vIGltcG9ydCB7U2FmZUh0bWxQaXBlfSBmcm9tICcuL3NuYWNrYmFyL3BpcGUvc2FmZS1odG1sLnBpcGUnO1xuXG5cbi8vIGV4cG9ydCBmdW5jdGlvbiB1cGRhdGVFbnZQcm9wZXJ0aWVzKGVudikge1xuLy8gICBjb25zb2xlLmxvZyhlbnYpO1xuLy8gICBOU3lzdGVtU2VydmljZS5nZXRJbnN0YW5jZSgpLmVudmlyb25tZW50cyA9IGVudjtcbi8vIH1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0dXBTZXJ2aWNlRmFjdG9yeShzdGFydHVwU2VydmljZTogTkxvY2FsU3RvcmFnZVNlcnZpY2UpIHtcbiAgY29uc3QgcmVzID0gKCkgPT4ge1xuICAgIC8vIGNvbnNvbGUubG9nKCdtb2R1bGUgYmVmb3JlIGluaXRzdG9yYWdlIGNhbGwnKTtcbiAgICByZXR1cm4gc3RhcnR1cFNlcnZpY2UuaW5pdFN0b3JhZ2UoKTtcblxuICB9XG4gIHJldHVybiByZXM7XG59XG5cblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBIdHRwQ2xpZW50TW9kdWxlLFxuICAgIFJvdXRlck1vZHVsZSxcbiAgICBIdHRwTW9kdWxlLFxuICAgIE5nRm9yYWdlTW9kdWxlLmZvclJvb3QoKVxuICAgIC8vIEJyb3dzZXJNb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogSFRUUF9JTlRFUkNFUFRPUlMsXG4gICAgICB1c2VDbGFzczogTkh0dHBTZXJ2aWNlLFxuICAgICAgbXVsdGk6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIFByb3ZpZGVyIGZvciBBUFBfSU5JVElBTElaRVJcbiAgICAgIHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcbiAgICAgIHVzZUZhY3Rvcnk6IHN0YXJ0dXBTZXJ2aWNlRmFjdG9yeSxcbiAgICAgIGRlcHM6IFtOTG9jYWxTdG9yYWdlU2VydmljZV0sXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH0sXG4gICAgTkF1dGhHdWFyZFNlcnZpY2UsXG4gICAgTkRhdGFNb2RlbFNlcnZpY2UsXG4gICAgLy8gTkRhdGFTb3VyY2VTZXJ2aWNlLFxuICAgIE5IdHRwU2VydmljZSxcbiAgICBOSFRUUExvYWRlclNlcnZpY2UsXG4gICAgTkxvY2FsU3RvcmFnZVNlcnZpY2UsXG4gICAgTkxvZ2luU2VydmljZSxcbiAgICBOTG9nb3V0U2VydmljZSxcbiAgICBOTm90aWZpY2F0aW9uU2VydmljZSxcbiAgICBOU25hY2tiYXJTZXJ2aWNlLFxuICAgIE5QdWJTdWJTZXJ2aWNlLFxuICAgIC8vICAgICBOU3lzdGVtU2VydmljZSxcbiAgICBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlLFxuICAgIE5Ub2tlblNlcnZpY2VcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbXG4gICAgU25hY2tDb21wb25lbnQsXG4gICAgU25hY2tiYXJDb21wb25lbnRcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIFNuYWNrQ29tcG9uZW50LFxuICAgIFNuYWNrYmFyQ29tcG9uZW50XG4gIF1cblxufSlcbmV4cG9ydCBjbGFzcyBOZXV0cmlub3NTZWVkU2VydmljZXNNb2R1bGUge1xuXG59XG4iXSwibmFtZXMiOlsicGxhdGZvcm0ub3MiLCJwbGF0Zm9ybS5uYW1lIiwicGxhdGZvcm0udmVyc2lvbiIsIm1lc3NhZ2luZyIsImZpcmViYXNlLm1lc3NhZ2luZyIsIk9ic2VydmFibGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBSUE7Ozs7SUFXRSxPQUFPLFdBQVc7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLGNBQWMsRUFBRSxDQUFDO1NBQ3RDO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0tBQ3RCOztRQUdDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDOzs7Ozs7SUFvQnhDLFdBQVc7UUFDVCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxDQUFDLElBQUksU0FBUyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxTQUFTLENBQUMsRUFBRTtZQUNoSCxPQUFPLFFBQVEsQ0FBQztTQUNqQjthQUFNLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxVQUFVLENB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
{"version":3,"sources":["ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-system.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-sessionStorage.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-util.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-localStorage.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-token.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-pubSub.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-logout.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-HTTPLoader.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-notification.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-login.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-authGaurd.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-dataModel.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-HTTP.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/n-snackbar.service.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/snackbar/snack/snack.component.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/snackbar/snackbar/snackbar.component.ts","ng://neutrinos-seed-services/src/app/neutrinos-seed-services/neutrinos-seed-services.module.ts"],"names":["NSystemService","this","_deviceType","checkDevice","getInstance","instance","prototype","window","getVal","key","envProperties","properties","undefined","isAndroid","isIOS","getAndroidVersion","getAuthUrl","baseUrl","tenantName","getTenantUrl","getAppUrl","appName","getProxyUrl","getDataModelUrl","appDataSource","getFileIOUrl","getPlatformDetails","type","pDetails","platform","platform.os","family","platformVersion","version","Object","assign","browser","platform.name","browserVersion","platform.version","model","manufacturer","isVirtual","NSessionStorageService","sessionStorageCache","sessionStorage","getSessionStorage","setValue","value","setItem","getValue","obj","JSON","parse","error","remove","hasOwnProperty","removeItem","clearSessionStorage","clear","Injectable","NUtility","generateUUID","__s4","Math","floor","random","toString","substring","NLocalStorageService","ngfConfig","ngf","ngfCache","initStorage","_this","Promise","resolve","reject","initNgForage","iterate","iteratonNumber","storageCache","then","result","checkDeviceId","catch","getStorage","console","log","fulfilled","pluginCheck","nativeStorageI","getItemNs","getItem","setItemNs","removeItemNs","clearNs","configure","name","driver","NgForageConfig","DRIVER_WEBSQL","promiseReflect","promise","resolved","v","status","e","clearLocalStorage","_deviceUUID","uniqueDeviceID","get","uuid","NgForage","NgForageCache","NTokenService","nLocalStorageService","nSessionStorage","updateTokens","tokensObj","isRemember","userObj","decodeToken","stringify","updateSessionStorage","urlBase64Decode","str","output","replace","length","b64DecodeUnicode","b64decode","String","Error","bc","bs","buffer","idx","charAt","fromCharCode","indexOf","decodeURIComponent","Array","map","call","c","charCodeAt","slice","join","token","parts","split","decoded","getTokenExpirationDate","date","Date","setUTCSeconds","exp","isTokenExpired","offsetSeconds","valueOf","ServiceName","NPubSubService","$sub","event","callback","complete","events","Subject","asObservable","subscribe","$pub","eventObject","next","NLogoutService","logout","NHTTPLoaderService","nLogoutService","nPubSubService","_isHTTPRequestInProgress","isHTTPRequestInProgress","bool","pendingRequests","showLoading","alertError","message","NNotificationService","localStorageService","pubSubService","http","bHttpLoader","firebaseSenderId","systemService","isNotificationEnabled","deviceType","loginSubscribe","enableNotification","ngOnInit","pushType","getPushType","document","addEventListener","checkPermission","res","initializeNotifications","initialiseWebPush","__this","messaging","firebase.messaging","requestPermission","getToken","sendRegDetails","err","onMessage","payload","notificationObj","options","body","icon","Notification","title","onclick","focus","APNSPushNotification","hasPermission","data","isEnabled","PushNotification","push","init","android","senderID","ios","alert","badge","sound","on","registrationId","plugins","notification","local","schedule","text","at","getTime","url","post","fbregid","currPushType","possiblePushTypes","includes","toUpperCase","ngOnDestroy","unSubscribe","HttpClient","NLoginService","notificationService","nTokenService","EventEmitter","login","userName","password","appProperties","loginUrl","details","username","platformDetails","isLoggedIn","Output","NAuthGuardService","nLoginService","router","canActivate","navigate","Router","NDataModelService","dataModelName","filter","keys","sort","pagenumber","pagesize","modelNameUrl","getDataSourceURL","checkIfValid","queryString","toQueryString","concat","index","Observable","throw","invalidDataModelName","put","dataModelObj","invalidDataModelObj","delete","update","updateObject","patch","getById","dataModelId","invalidDataModelId","deleteById","updateById","dmObj","i","dmDs","dsDm","NHttpService","nHTTPLoader","inj","BehaviorSubject","intercept","req","requestInterceptor","handle","requestOptions","timeout","onCatch","finally","onFinally","updateToken","appAuthenticationStrategy","isRefreshingToken","tokenSubject","take","switchMap","refreshToken","newToken","onCatchError","refreshUrl","userKey","headers","HttpHeaders","clone","getFullUrl","addDefaultHeaders","has","set","basicAuthUser","basicAuthPassword","warn","btoa","responseInterceptor","HttpErrorResponse","onSubscribeError","Injector","NSnackbarService","snackBarListner","msg","openSnackBar","snackService","add","action","id","onClick","snack","onAdd","onRemove","SnackComponent","Component","args","selector","template","styles","Input","SnackbarComponent","snackbarService","max","snacks","setTimeout","timeoutObj","that_1","fcn_1","Function","emit","find","clearTimeout","onClear","r","calcTextColor","background","rgb","hexToRgb","hex","m","g","b","exec","parseInt","color","pow","startupServiceFactory","startupService","NgModule","imports","CommonModule","HttpClientModule","RouterModule","HttpModule","NgForageModule","forRoot","providers","provide","HTTP_INTERCEPTORS","useClass","multi","APP_INITIALIZER","useFactory","deps","declarations","exports"],"mappings":"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","sourcesContent":["// import { environment } from '../../environments/environment';\nimport { NUtility } from './n-util.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { Injectable } from '@angular/core';\nimport * as platform from 'platform';\n\n// @dynamic\nexport class NSystemService {\n  private static instance: NSystemService;\n\n  private _deviceType: string;\n  // private _deviceUUID;\n  uuid;\n  properties;\n  static envProperties;\n  static getInstance() {\n    if (!this.instance) {\n      this.instance = new NSystemService();\n    }\n    return this.instance;\n  }\n\n  private constructor() {\n    this._deviceType = this.checkDevice();\n  }\n\n  /**\n   * Seter and getter for the environments\n   */\n\n  // set environments(properties) {\n  //   console.log(properties);\n  //   NSystemService.envProperties = properties;\n  //   this.properties = this.getVal('properties');\n  // }\n\n  // get environments() {\n  //   return NSystemService.envProperties;\n  // }\n\n  /**\n   * Returna 'mobile' or 'browser' based on the platform\n   */\n  checkDevice(): string {\n    if (window['device'] && (window['device']['platform'] != 'browser' || window['device']['platform'] != 'Browser')) {\n      return 'mobile';\n    } else if (window['device'] && (window['device']['platform'] == 'browser' || window['device']['platform'] == 'Browser')) {\n      return 'cordova_browser';\n    } else {\n      return 'browser';\n    }\n  }\n\n\n  public get deviceType() {\n    return this._deviceType;\n  }\n\n\n\n  public getVal(key) {\n    if (!NSystemService.envProperties) {\n      NSystemService.envProperties = window['neutrinos']['environments'];\n      this.properties = NSystemService.envProperties.properties;\n    }\n\n    if (key == 'properties') {\n      if (NSystemService.envProperties) {\n        return NSystemService.envProperties.properties;\n      } else {\n        return undefined;\n      }\n    } else {\n      if (NSystemService.envProperties && NSystemService.envProperties.properties) {\n        return NSystemService.envProperties.properties[key];\n      } else {\n        return undefined;\n      }\n\n    }\n\n  }\n\n  public isAndroid() {\n    if (window['device'] && window['device']['platform'] == 'Android') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public isIOS() {\n    if (window['device'] && window['device']['platform'] == 'iOS') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  public getAndroidVersion() {\n    if (this.isAndroid()) {\n      return window['device']['version'];\n    } else {\n      return '';\n    }\n  }\n\n  public getAuthUrl() {\n    // this.properties = this.getVal('properties');\n    return this.properties.baseUrl + this.properties.tenantName + '/auth/';\n  }\n  public getTenantUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/';\n  }\n\n  public getAppUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/proxy/' + this.properties.appName + '/';\n  }\n\n  public getProxyUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/proxy/';\n  }\n\n  public getDataModelUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/datamodel/' + this.properties.appDataSource + '/' + this.properties.appName + '/';\n  }\n\n  public getFileIOUrl() {\n    return this.properties.baseUrl + this.properties.tenantName + '/fileio/' +\n      this.properties.appDataSource + '/' + this.properties.appName + '/';\n  }\n\n  public getPlatformDetails(type) {\n    const pDetails = {\n      platform: platform.os.family,\n      platformVersion: platform.os.version,\n    };\n    if (type === 'browser') {\n      return Object.assign(pDetails, {\n        type: 'browser',\n        browser: platform.name,\n        browserVersion: platform.version,\n      });\n    } else if (type === 'mobile' || type === 'cordova_browser') {\n      return Object.assign(pDetails, {\n        type: 'mobile',\n        model: window['device'].model,\n        manufacturer: window['device'].manufacturer,\n        isVirtual: window['device'].isVirtual\n      });\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NSessionStorageService {\n  static sessionStorageCache: any = {};\n  constructor() {\n    NSessionStorageService.sessionStorageCache = sessionStorage;\n  }\n\n  getSessionStorage() {\n    return NSessionStorageService.sessionStorageCache;\n  }\n\n  setValue(key, value) {\n    NSessionStorageService.sessionStorageCache[key] = value;\n    sessionStorage.setItem(key, value)\n  }\n\n  getValue(key) {\n    if (!NSessionStorageService.sessionStorageCache[key]) {\n      return null;\n    }\n    try {\n      const obj = NSessionStorageService.sessionStorageCache[key];\n      return JSON.parse(obj);\n    } catch (error) {\n      return NSessionStorageService.sessionStorageCache[key];\n    }\n  }\n\n  remove(key) {\n    if (NSessionStorageService.sessionStorageCache.hasOwnProperty(key)) {\n      delete NSessionStorageService.sessionStorageCache[key];\n      sessionStorage.removeItem(key);\n    }\n  }\n\n  clearSessionStorage() {\n    NSessionStorageService.sessionStorageCache = {};\n    sessionStorage.clear();\n  }\n\n}\n","export class NUtility {\n  \n    constructor() { }\n  \n    generateUUID() {\n      return this.__s4() + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + this.__s4() + this.__s4();\n    }\n  \n    __s4() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n  }","import { NSystemService } from './n-system.service';\nimport { Injectable } from '@angular/core';\nimport * as localforage from 'localforage';\nimport { NgForage, NgForageCache, NgForageConfig, CachedItem } from 'ngforage';\nimport { NUtility } from './n-util.service';\n\n@Injectable()\nexport class NLocalStorageService {\n\n  storageCache: any = {};\n  private _deviceUUID;\n  private nativeStorageI;\n  constructor(private ngfConfig?: NgForageConfig, private readonly ngf?: NgForage, private readonly ngfCache?: NgForageCache) {\n  }\n\n\n\n  initStorage() {\n    return new Promise((resolve, reject) => {\n      if (window['cordova']) {\n        this.initNgForage();\n      }\n      this.ngf.iterate((value, key, iteratonNumber) => {\n        this.storageCache[key] = value;\n      }).then(result => {\n        this.checkDeviceId();\n        return resolve('iteration is completed')\n      }).catch(error => {\n        return reject(error);\n      })\n    })\n  }\n\n  getStorage() {\n    return this.storageCache;\n  }\n\n\n  setValue(key, value) {\n    if (window['cordova']) {\n      this.initNgForage();\n    }\n    this.storageCache[key] = value;\n    return this.ngf.setItem(key, value).then(result => {\n      return result;\n    }, error => {\n      console.log(error);\n    })\n  }\n\n  getValue(key): any | Promise<any> {\n    if (!this.storageCache[key]) {\n      return null;\n    } try {\n      const obj = this.storageCache[key]\n      return JSON.parse(obj);\n    } catch (error) {\n      return this.storageCache[key];\n    }\n  }\n\n  remove(key) {\n    delete this.storageCache[key];\n    if (window['cordova']) {\n      this.initNgForage();\n    }\n    this.ngf.removeItem(key).then(fulfilled => {\n      delete this.ngf[key];\n    }).catch(error => {\n      console.error('Could not remove', key);\n    })\n  }\n\n  clear() {\n    this.storageCache = {};\n    this.ngf.clear();\n  }\n\n  private pluginCheck() {\n    if (window['cordova'] && window['NativeStorage']) {\n      this.nativeStorageI = window['NativeStorage'];\n      // return true;\n    }\n    // this.initStorage();\n  }\n\n  private getItemNs(key) {\n    return new Promise((resolve, reject) => {\n      if (window['cordova'] && window['NativeStorage']) {\n        this.nativeStorageI.getItem(key, result => {\n          resolve(result);\n        }, error => {\n          reject(error);\n        })\n      }\n    })\n  }\n\n  private setItemNs(key, value) {\n    return new Promise((resolve, reject) => {\n      if (window['cordova'] && window['NativeStorage']) {\n        this.nativeStorageI.setItem(key, value, result => {\n          resolve(result);\n        }, error => {\n          reject(error);\n        })\n      }\n    })\n  }\n\n  private removeItemNs(key) {\n    return new Promise((resolve, reject) => {\n      if (window['cordova'] && window['NativeStorage']) {\n        this.nativeStorageI.remove(key, (result) => {\n          resolve(result);\n        }, (error) => {\n          reject(error);\n        });\n      }\n    })\n  }\n\n  private clearNs() {\n    return new Promise((resolve, reject) => {\n      if (window['cordova'] && window['NativeStorage']) {\n        this.nativeStorageI.clear(result => {\n          resolve(result);\n        }, error => {\n          reject(error);\n        })\n      }\n    })\n  }\n\n  private initNgForage() {\n    this.ngfConfig.configure({\n      name: 'MyApp',\n      driver: [\n        NgForageConfig.DRIVER_WEBSQL,\n      ]\n    });\n\n  }\n\n  private promiseReflect(promise) {\n    return promise.then(resolved => { return { v: resolved, status: 'resolved' } }, error => { return { e: error, status: 'rejected' } })\n  }\n\n  clearLocalStorage() {\n    this.remove('userObj');\n    this.remove('accessToken');\n    this.remove('refreshToken');\n    this.remove('registrationId');\n  }\n\n  /**\n   * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService\n  */\n\n  checkDeviceId() {\n    if (NSystemService.getInstance().checkDevice() === 'browser') {\n      this._deviceUUID = this.getValue('uuid');\n\n      if (!this._deviceUUID) {\n        this._deviceUUID = new NUtility().generateUUID();\n        this.setValue('uuid', this._deviceUUID);\n      }\n    } else {\n      window['plugins'].uniqueDeviceID.get((uuid) => {\n        this._deviceUUID = uuid;\n        this.setValue('uuid', this._deviceUUID);\n      });\n    }\n    return this._deviceUUID;\n  }\n\n  public get deviceUUID() {\n    return this._deviceUUID;\n  }\n}\n","import { NSessionStorageService } from './n-sessionStorage.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class NTokenService {\n\n  nSessionStorage;\n  // nLocalStorageService: NLocalStorageService;\n\n  constructor(private nLocalStorageService: NLocalStorageService) {\n    this.nSessionStorage = new NSessionStorageService();\n    // this.nLocalStorageService = new NLocalStorageService();\n  }\n\n  updateTokens(tokensObj, isRemember?: Boolean) {\n    let userObj = this.decodeToken(tokensObj['accessToken'])\n    this.nSessionStorage.setValue('accessToken', tokensObj['accessToken']);\n    this.nSessionStorage.setValue('refreshToken', tokensObj['refreshToken']);\n    this.nSessionStorage.setValue('userObj', JSON.stringify(userObj));\n\n    if ((isRemember || this.nLocalStorageService.getValue('accessToken'))) {\n      this.nLocalStorageService.setValue('accessToken', tokensObj['accessToken']);\n      this.nLocalStorageService.setValue('refreshToken', tokensObj['refreshToken']);\n      this.nLocalStorageService.setValue('userObj', JSON.stringify(userObj));\n    }\n  }\n\n  updateSessionStorage() {\n    this.updateTokens(this.nLocalStorageService.getStorage(), true);\n  }\n\n  public urlBase64Decode(str: string): string {\n    let output = str.replace(/-/g, '+').replace(/_/g, '/');\n    switch (output.length % 4) {\n      case 0: { break; }\n      case 2: { output += '=='; break; }\n      case 3: { output += '='; break; }\n      default: {\n        throw 'Illegal base64url string!';\n      }\n    }\n    return this.b64DecodeUnicode(output);\n  }\n\n  // credits for decoder goes to https://github.com/atk\n  private b64decode(str: string): string {\n    let chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n    let output: string = '';\n\n    str = String(str).replace(/=+$/, '');\n\n    if (str.length % 4 == 1) {\n      throw new Error(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n    }\n\n    for (\n      // initialize result and counters\n      let bc: number = 0, bs: any, buffer: any, idx: number = 0;\n      // get next character\n      buffer = str.charAt(idx++);\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n        // and if not first of each 4 characters,\n        // convert the first 8 bits to one ascii character\n        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  }\n\n  // https://developer.mozilla.org/en/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#The_Unicode_Problem\n  private b64DecodeUnicode(str: any) {\n    return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), (c: any) => {\n      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n  }\n\n  public decodeToken(token: string): any {\n    let parts = token.split('.');\n\n    if (parts.length !== 3) {\n      throw new Error('JWT must have 3 parts');\n    }\n\n    let decoded = this.urlBase64Decode(parts[1]);\n    if (!decoded) {\n      throw new Error('Cannot decode the token');\n    }\n\n    return JSON.parse(decoded);\n  }\n\n  public getTokenExpirationDate(token: string): Date {\n    let decoded: any;\n    decoded = this.decodeToken(token);\n\n    if (!decoded.hasOwnProperty('exp')) {\n      return null;\n    }\n\n    let date = new Date(0); // The 0 here is the key, which sets the date to the epoch\n    date.setUTCSeconds(decoded.exp);\n\n    return date;\n  }\n\n  public isTokenExpired(token: string, offsetSeconds?: number): boolean {\n    let date = this.getTokenExpirationDate(token);\n    offsetSeconds = offsetSeconds || 0;\n\n    if (date == null) {\n      return false;\n    }\n\n    // Token expired?\n    return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\n\nconst ServiceName: string = \"PubSub Service\";\n\n@Injectable()\nexport class NPubSubService {\n  private events = {};\n\n  constructor() { }\n\n  public $sub(event: string): Observable<any>;\n  public $sub(event: string, callback: (value: any) => void): Subscription;\n  public $sub(event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;\n  public $sub(event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;\n  public $sub(event: string, callback?: (value: any) => void, error?: (error: any) => void, complete?: () => void) {\n      if (!event) {\n          throw new Error(`[${ServiceName}] => Subscription method must get event name.`);\n      }\n\n      if (this.events[event] === undefined) {\n          this.events[event] = new Subject<any>();\n      }\n\n      if (typeof callback !== 'function') {\n          return this.events[event].asObservable();\n      } else {\n          return this.events[event].asObservable().subscribe(callback, error, complete);\n      }\n  }\n\n  public $pub(event: string, eventObject?: any) {\n      if (!event) {\n          throw new Error(`[${ServiceName}] => Publish method must get event name.`);\n      } else if (!this.events[event]) {\n          return;\n      }\n      this.events[event].next(eventObject);\n  }\n}\n\nexport interface IPubSubService {\n  $pub(event: string, eventObject?: any);\n  $sub(event: string): Observable<any>;\n  $sub(event: string, callback: (value: any) => void): Subscription;\n  $sub(event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;\n  $sub(event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;\n}\n\ninterface I$sub {\n  (event: string): Observable<any>;\n  (event: string, callback: (value: any) => void): Subscription;\n  (event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;\n  (event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;\n}\n","import { Injectable } from '@angular/core';\nimport { NSessionStorageService } from './n-sessionStorage.service';\nimport { NLocalStorageService } from './n-localStorage.service';\n\n@Injectable()\nexport class NLogoutService {\n\n  nSessionStorage = new NSessionStorageService();\n  // nLocalStorageService = new NLocalStorageService();\n  constructor(private nLocalStorageService: NLocalStorageService) { }\n\n  logout() {\n    this.nSessionStorage.clearSessionStorage();\n    this.nLocalStorageService.clearLocalStorage();\n    return true;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\n// import { NSnackbarService } from './n-snackbar.service';\nimport { NLogoutService } from './n-logout.service';\nimport { Observable } from \"rxjs/Observable\";\nimport { NSystemService } from './n-system.service';\nimport { NPubSubService } from './n-pubSub.service';\n// import { NSnackbarService } from './snackbar/service/snackbar.service';\n\n@Injectable()\nexport class NHTTPLoaderService {\n  public pendingRequests = 0;\n  public showLoading = false;\n  private _isHTTPRequestInProgress = new Subject<boolean>();\n  _isHTTPRequestInProgress$ = this._isHTTPRequestInProgress.asObservable();\n\n  constructor(private nLogoutService: NLogoutService, private nPubSubService: NPubSubService) {\n\n  }\n\n  isHTTPRequestInProgress(bool) {\n    if (bool) {\n      this.pendingRequests++;\n      if (!this.showLoading) {\n        this._isHTTPRequestInProgress.next(bool);\n      }\n      this.showLoading = true;\n    }\n    else {\n      this.pendingRequests--;\n      if (this.pendingRequests <= 0) {\n        if (this.showLoading) {\n          this._isHTTPRequestInProgress.next(bool);\n        }\n        this.showLoading = false;\n      }\n    }\n  }\n\n  alertError(error) {\n    if (error.status < 200 || error.status > 500) {\n      if (error.status === 0) {\n        this.nPubSubService.$pub('openSnackBar', 'Connectivity issue');\n      } else {\n        this.nPubSubService.$pub('openSnackBar', 'Response failure')\n      }\n    } else if (error.status === 401) {\n      this.nLogoutService.logout();\n      if (error.error) {\n        this.nPubSubService.$pub('openSnackBar', error.error)\n      } else {\n        this.nPubSubService.$pub('openSnackBar', error)\n      }\n    } else if (error.error) {\n      if (error.error instanceof Object) {\n        this.nPubSubService.$pub('openSnackBar', error.error.message)\n      } else {\n        this.nPubSubService.$pub('openSnackBar', error.error)\n      }\n    } else {\n      this.nPubSubService.$pub('openSnackBar', 'Response failure')\n    }\n  }\n\n}\n\n\n","import { Injectable, OnInit, OnDestroy } from '@angular/core';\nimport { NSystemService } from './n-system.service';\nimport { Observable } from 'rxjs/Observable';\ndeclare var PushNotification: any;\ndeclare var APNSPushNotification: any;\nimport { NLocalStorageService } from './n-localStorage.service';\nimport * as firebase from 'firebase';\nimport { NPubSubService } from './n-pubSub.service';\nimport { HttpClient } from '@angular/common/http';\nimport { NSessionStorageService } from './n-sessionStorage.service';\n// import { Router } from '@angular/router';\nimport { NHTTPLoaderService } from './n-HTTPLoader.service';\nimport { environment } from '../../environments/environment.prod';\n\n\n@Injectable()\nexport class NNotificationService {\n  // private static instance: NNotificationService;\n  private systemService: NSystemService = NSystemService.getInstance();\n  private firebaseSenderId: string;\n  private isNotificationEnabled: boolean;\n  private deviceType; string;\n  private resDetails;\n  private deviceUUID: string;\n  private possiblePushTypes: string[] = ['APNS','FCM'];\n  loginSubscribe;\n  sessionStorage: NSessionStorageService;\n  appName;\n  constructor(private localStorageService: NLocalStorageService, private pubSubService: NPubSubService,\n    private http: HttpClient, private bHttpLoader: NHTTPLoaderService) {\n    this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');\n    this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');\n    this.appName = this.systemService.getVal('appName');\n    this.deviceType = this.systemService.deviceType;\n    this.sessionStorage = new NSessionStorageService();\n    this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', () => {\n      this.enableNotification();\n    })\n  }\n\n  ngOnInit() {\n  }\n\n\n  enableNotification() {\n    let pushType = this.getPushType(this.systemService.getVal('pushType'));\n    document.addEventListener('deviceready', event => {\n      if (this.isNotificationEnabled) {\n        if (this.deviceType && this.deviceType != 'browser') {\n          this.deviceType = this.systemService.deviceType;\n          this.checkPermission(pushType).then(res => {\n            if (res) {\n              this.initializeNotifications(pushType);\n            }\n          });\n        }\n      }\n    });\n    if (this.isNotificationEnabled && pushType !== 'APNS') {\n      if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {\n        this.initialiseWebPush();\n      }\n    }\n  }\n\n  initialiseWebPush() {\n    const __this = this;\n    const messaging = firebase.messaging();\n\n    messaging.requestPermission()\n      .then(function () {\n        return messaging.getToken();\n      })\n      .then(function (token) {\n        if (token) {\n          __this.sendRegDetails(token);\n        }\n      })\n      .catch(function (err) {\n        __this.bHttpLoader.alertError(err);\n      });\n\n    messaging.onMessage(function (payload) {\n      if (payload['notification']) {\n        let notificationObj = payload['notification'];\n        let options = {\n          body: notificationObj.body,\n          icon: notificationObj.icon\n        }\n        // creating a native browser message\n        let notificationUI = new Notification(notificationObj.title, options);\n        notificationUI.onclick = function () {\n          window.focus(); // window is focused when the user clicks the notification using this\n        }\n      }\n    });\n  }\n\n  checkPermission(pushType?) {\n    // Android & iOS only\n    // Checks whether the push notification permission has been granted.\n    return new Promise((resolve) => {\n      pushType = this.getPushType(pushType);\n      if ((this.deviceType === 'Android' || this.deviceType === 'iOS') && (pushType === 'FCM' )) {\n        PushNotification.hasPermission(function (data) {\n          return resolve(data.isEnabled);\n        });\n      } else if (this.deviceType === 'iOS' && pushType === 'APNS') {\n         APNSPushNotification.hasPermission(function (data) {\n          return resolve(data.isEnabled);\n        });\n      } else {\n        return resolve(true);\n      }\n    });\n  }\n\n  initializeNotifications(pushType?) {\n    //pushType = pushType ? pushType : 'FCM';\n    pushType = this.getPushType(pushType);\n\n    let push;\n    // Default if for FCM\n    if (pushType === 'FCM') {\n      push = window['PushNotification'].init({\n        android: {\n          senderID: this.firebaseSenderId\n        },\n        ios: {\n          alert: \"true\",\n          badge: \"true\",\n          sound: \"true\",\n          senderID: this.firebaseSenderId\n        },\n      });\n    }\n    // New APNS plugin init\n    else if (pushType === 'APNS') {\n      push = window['APNSPushNotification'].init({\n        ios: {\n          alert: \"true\",\n          badge: \"true\",\n          sound: \"true\"\n        }\n      });\n    }\n    \n    push.on('registration', (data) => {\n      // data.registrationId\n      this.sendRegDetails(data.registrationId);\n    });\n\n    // ToDo Christy get call back function from app user to change what happens once a notification arrives\n    push.on('notification', (data) => {\n      window['cordova'].plugins.notification.local.schedule({\n        title: data.title,\n        text: data.message,\n        sound: data.sound,\n        at: new Date().getTime()\n      });\n    });\n\n    push.on('error', (e) => {\n      // e.message\n      console.error(e);\n    });\n  }\n\n  sendRegDetails(registrationId) {\n    this.localStorageService.setValue('registrationId', registrationId);\n    var url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';\n    let pushType = this.getPushType(this.systemService.getVal('pushType'));\n    this.http.post(url, {\n      'key': this.sessionStorage.getValue('userObj')['userKey'],\n      'uuid': this.localStorageService.getValue('uuid'), \n      'fbregid': registrationId,\n      'pushType': pushType\n    }).subscribe(result => {\n      // this.pubSubService.$pub('FBRegComp');\n    }, error => {\n      console.log(error);\n    })\n  }\n\n  getPushType (currPushType) {\n    let isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());\n    let pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';\n    return pushType;\n  }\n\n  ngOnDestroy() {\n    this.loginSubscribe.unSubscribe();\n  }\n  \n}\n","import { Injectable, EventEmitter, Output } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { NSystemService } from './n-system.service';\nimport { NTokenService } from './n-token.service';\nimport { NPubSubService } from './n-pubSub.service';\nimport { NSessionStorageService } from './n-sessionStorage.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { NNotificationService } from './n-notification.service';\nimport 'rxjs/add/operator/map';\nimport { Observable } from \"rxjs/Observable\";\n\n\n@Injectable()\nexport class NLoginService {\n  loginUrl;\n  appProperties;\n  systemService;\n  nSessionStorage;\n  uuid;\n  details: any;\n\n  @Output() loginCompleted = new EventEmitter();\n  constructor(private http: HttpClient, private pubSubService: NPubSubService, private notificationService: NNotificationService,\n    private nLocalStorageService: NLocalStorageService, private nTokenService: NTokenService) {\n    this.systemService = NSystemService.getInstance();\n    // this.nTokenService = new NTokenService();\n    this.nSessionStorage = new NSessionStorageService();\n    // this.nLocalStorageService = new NLocalStorageService();\n  }\n\n\n  login(userName, password, isRemember?) {\n    this.appProperties = this.systemService.getVal('properties');\n    this.loginUrl = this.systemService.getAuthUrl() + this.appProperties.appName;\n    this.uuid = this.nLocalStorageService.getValue('uuid');\n    if (!this.uuid) {\n      this.uuid = this.nLocalStorageService.checkDeviceId();\n    }\n    this.details = {\n      username: userName,\n      password: password,\n    };\n    this.details.platformDetails = this.systemService.getPlatformDetails(this.systemService.checkDevice());\n    this.details.platformDetails['uuid'] = this.uuid;\n    return this.http.post(this.loginUrl, JSON.stringify(this.details)).map(result => {\n      const tokensObj = result;\n      if (tokensObj) {\n        this.nTokenService.updateTokens(tokensObj, isRemember);\n      }\n      // TODO chris array of supported pushes currently only support APNS and Firebase\n      if ((this.systemService.getVal('firebaseSenderId') != 'FIREBASE_SENDER_ID' && this.systemService.getVal('firebaseAuthKey') != 'FIREBASE_AUTH_KEY') \n           || (this.systemService.getVal('pushType') === 'APNS' && this.systemService.isIOS())) {\n        this.pubSubService.$pub('firebaseRegister');\n      }\n      this.pubSubService.$pub('loginComplete');\n      return (result);\n    }, error => {\n      return (error);\n    });\n  }\n\n  isLoggedIn() {\n    return this.nLocalStorageService.initStorage().then(result => {\n      if (this.nSessionStorage.getValue('accessToken') && this.nSessionStorage.getValue('refreshToken') &&\n        this.nSessionStorage.getValue('accessToken') != 'null' && this.nSessionStorage.getValue('refreshToken') != 'null') {\n        return true;\n      }\n      return false;\n    }).catch(error => {\n      return false;\n    });\n\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CanActivate } from '@angular/router';\nimport { NLoginService } from './n-login.service';\n\n@Injectable()\nexport class NAuthGuardService implements CanActivate {\n\n  constructor(private nLoginService: NLoginService, private router: Router) { }\n\n  canActivate() {\n    return this.nLoginService.isLoggedIn().then(result => {\n      if (result) {\n        return true;\n      } else {\n        this.router.navigate(['unauthorized']);\n        return false;\n      }\n    })\n\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs/Observable';\nimport { Injectable } from '@angular/core';\nimport { NSystemService } from './n-system.service';\n\n@Injectable()\nexport class NDataModelService {\n  private systemService: NSystemService;\n  private dmUrl: string;\n  private invalidDataModelName: string = 'Invalid data model name.';\n  private invalidDataModelId: string = 'Invalid data model id.';\n  private invalidDataModelObj: string = 'Invalid data model object.';\n  private dmDs;\n  constructor(private http: HttpClient) {\n    this.systemService = NSystemService.getInstance();\n  }\n\n  // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n  /**\n   *\n   * @param dataModelName\n   * @param filter The filter query parameter allows to specify conditions on the documents to return.\n   * The filter qparam value is any mongodb queryâ¦ Defaults to {}\n   * @param keys Projections to be applited on mongo db.\n   * @param sort sort to be applied on the query results. Defaults to {}\n   * @param pagenumber Page number for paginated queries. Defaults to 1\n   * @param pagesize Size of each page to be returned. Defaults to 100.\n   */\n  get(dataModelName, filter?, keys?, sort?, pagenumber?, pagesize?): Observable<any> {\n    if (dataModelName) {\n      // let modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n      let modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n      if (this.checkIfValid(filter) || this.checkIfValid(keys) || this.checkIfValid(sort) ||\n        this.checkIfValid(pagenumber) || this.checkIfValid(pagesize)) {\n        let queryString = `${this.toQueryString({\n          'filter': filter,\n          'keys': keys,\n          'sort': sort,\n          'pagenumber': pagenumber,\n          'pagesize': pagesize\n        })}`;\n        if (queryString === '') {\n          queryString += '?filter={}';\n        } else {\n          queryString = '?'.concat(queryString);\n        }\n        modelNameUrl += queryString;\n      }\n      return this.http.get(modelNameUrl).map((value, index) => {\n        return value;\n      }).catch(error => {\n        return Observable.throw(error);\n      });\n    } else {\n      return Observable.throw(new Error(`Could not get ${dataModelName}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // PUT /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n  /**\n   *\n   * @param dataModelName Data model name of the app\n   * @param dataModelObj Data Model object which is to be inserted\n   */\n  put(dataModelName, dataModelObj): Observable<any> {\n    if (dataModelName) {\n      if (dataModelObj) {\n        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n        const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n        return this.http.put(modelNameUrl, dataModelObj).map((value, index) => {\n          return value;\n        }).catch(error => {\n          return Observable.throw(error);\n        })\n      } else {\n        return Observable.throw(new Error(`Could not put ${dataModelObj} in ${dataModelName}. ${this.invalidDataModelObj}`));\n      }\n    } else {\n      return Observable.throw(new Error(`Could not put ${dataModelObj} in ${dataModelName}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n  /**\n   *\n   * @param dataModelName\n   * @param filter\n   */\n  delete(dataModelName, filter): Observable<any> {\n    let modelNameUrl;\n    if (dataModelName) {\n      // modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n      modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n\n      if (this.checkIfValid(filter) && filter != '') {\n        modelNameUrl += `?filter=${filter}`;\n      } else {\n        modelNameUrl += '?filter={}';\n      }\n      return this.http.delete(modelNameUrl).map((value, index) => {\n        return value;\n      }).catch(error => {\n        return Observable.throw(error);\n      })\n    } else {\n      return Observable.throw(new Error(`Could not delete ${dataModelName}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}\n  /**\n   *\n   * @param dataModelName Data model name which is to be updated\n   * @param dataModelObj New data model object\n   */\n  update(dataModelName, updateObject): Observable<any> {\n    if (dataModelName && updateObject) {\n      // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;\n      const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;\n      return this.http.patch(modelNameUrl, updateObject).map((value, index) => {\n        return value;\n      }).catch(error => {\n        return Observable.throw(error);\n      })\n    } else {\n      return Observable.throw(new Error(`Could not update ${dataModelName}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}\n  /**\n   *\n   * @param dataModelName Data model name which is to be updated\n   * @param dataModelId Data model id which is to be updated\n   */\n  getById(dataModelName, dataModelId): Observable<any> {\n    if (dataModelName) {\n      if (dataModelId) {\n        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;\n        const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + \"/\" + dataModelId;\n        return this.http.get(modelNameUrl).map((value, index) => {\n          return value;\n        }).catch(error => {\n          return Observable.throw(error);\n        })\n      } else {\n        Observable.throw(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelId}`));\n      }\n    } else {\n      Observable.throw(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}\n  /**\n   *\n   * @param dataModelName Data model name which is to be deleted\n   * @param dataModelId Data model id which is to be deleted\n   */\n  deleteById(dataModelName, dataModelId) {\n    if (dataModelName) {\n      if (dataModelId) {\n        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;\n        const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + \"/\" + dataModelId;\n        return this.http.delete(modelNameUrl).map((value, index) => {\n          return value;\n        }).catch(error => {\n          return Observable.throw(error);\n        })\n      } else {\n        Observable.throw(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelId}`));\n      }\n    } else {\n      return Observable.throw(new Error(`Could not delete ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  //PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}\n  /**\n   *\n   * @param dataModelName Data model name which is to be update\n   * @param dataModelId Data model id which is to be updated\n   * @param dataModelObj Data Model object which is to be inserted\n   */\n  updateById(dataModelName, dataModelId, dataModelObj) {\n    if (dataModelName) {\n      if (dataModelId) {\n        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;\n        const modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + \"/\" + dataModelId;\n        var dmObj = Object.assign({}, dataModelObj);\n        delete dmObj['_id'];\n        return this.http.patch(modelNameUrl, dmObj).map((value, index) => {\n          return value;\n        }).catch(error => {\n          return Observable.throw(error);\n        })\n      } else {\n        Observable.throw(new Error(`Could not get ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelId}`));\n      }\n    } else {\n      return Observable.throw(new Error(`Could not delete ${dataModelName} by id ${dataModelId}. ${this.invalidDataModelName}`));\n    }\n  }\n\n  private toQueryString(obj) {\n    const parts = [];\n    for (const i in obj) {\n      if (obj.hasOwnProperty(i) && this.checkIfValid(obj[i])) {\n        parts.push((i) + '=' + JSON.stringify(obj[i]));\n      }\n    }\n    return parts.join('&');\n  }\n\n  private checkIfValid(value: any) {\n    if (value === undefined || value == null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  private getDataSourceURL(dataModelName) {\n    if (!this.dmDs) {\n      this.dmDs = window['neutrinos']['dataSource'];\n    }\n    const dsDm = this.dmDs[dataModelName];\n    const properties = this.systemService.properties;\n    if (dsDm) {\n      return properties.baseUrl + properties.tenantName + '/datamodel/' + dsDm + '/' + properties.appName + '/';\n    } else {\n      return this.systemService.getDataModelUrl();\n    }\n  }\n\n\n}\n","import { Injectable, Injector } from '@angular/core';\nimport {\n  HttpEvent,\n  HttpInterceptor,\n  HttpHandler,\n  HttpRequest,\n  HttpHeaders,\n  HttpResponse,\n  HttpErrorResponse,\n  HttpClient\n} from '@angular/common/http';\nimport { Observable, BehaviorSubject } from 'rxjs/Rx';\nimport { NHTTPLoaderService } from './n-HTTPLoader.service';\nimport { NSystemService } from './n-system.service';\nimport { NSessionStorageService } from './n-sessionStorage.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { NTokenService } from './n-token.service';\nimport { NPubSubService } from './n-pubSub.service';\n\n@Injectable()\nexport class NHttpService {\n  timeout = 90000;\n  systemService;\n  nSessionStorage;\n  appProperties;\n  isRefreshingToken = false;\n  nPubSubService;\n  tokenSubject: BehaviorSubject<string> = new BehaviorSubject<string>(null);\n\n  constructor(private nHTTPLoader: NHTTPLoaderService, private inj: Injector,\n    private nLocalStorageService: NLocalStorageService, private nTokenService: NTokenService) {\n    this.systemService = NSystemService.getInstance();\n    this.nSessionStorage = new NSessionStorageService();\n    this.appProperties = this.systemService.getVal('properties');\n    this.nPubSubService = new NPubSubService();\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.requestInterceptor();\n\n    // Pass on the cloned request instead of the original request.\n    return next.handle(this.requestOptions(req))\n      .timeout(this.timeout)\n      .catch(error => this.onCatch(error, req, next))\n      .finally(() => {\n        this.onFinally();\n      });\n  };\n\n  updateToken(error: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler): any {\n    if (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||\n      this.appProperties.appAuthenticationStrategy === 'localAuth') {\n      if (!this.isRefreshingToken) {\n        this.isRefreshingToken = true;\n\n        // Reset here so that the following requests wait until the token\n        // comes back from the refreshToken call.\n        this.tokenSubject.next(null);\n\n        return this.refreshToken()\n          .switchMap((tokensObj: Object) => {\n            if (tokensObj) {\n              this.nTokenService.updateTokens(tokensObj);\n              const newToken = tokensObj['accessToken'];\n              this.tokenSubject.next(newToken);\n              return next.handle(this.requestOptions(req));\n            }\n            return Observable.throw(new Error('Can\\'t refresh the token'));\n          })\n          .catch(err => this.onCatchError(err))\n          .finally(() => this.isRefreshingToken = false)\n      } else {\n        return this.tokenSubject\n          .filter(token => token != null)\n          .take(1)\n          .switchMap(token => next.handle(this.requestOptions(req)));\n      }\n    } else {\n      return this.onCatchError(error);\n    }\n  }\n\n  refreshToken() {\n    const http = this.inj.get(HttpClient);\n    const appProperties = this.systemService.getVal('properties');\n    const refreshUrl = this.systemService.getAuthUrl() + appProperties.appName + '/refresh';\n    const body = {\n      'platformDetails': this.systemService.getPlatformDetails(this.systemService.checkDevice()),\n      'userKey': this.nSessionStorage.getValue('userObj')['userKey'],\n      'refreshToken': this.nSessionStorage.getValue('refreshToken')\n    };\n    body.platformDetails['uuid'] = this.nLocalStorageService.getValue('uuid');\n    return http.post(refreshUrl, body);\n  }\n\n\n  /**\n   * Request options.\n   * @param options\n   * @returns HttpRequest\n   */\n  private requestOptions(req?: HttpRequest<any>) {\n    let headers = req.headers;\n    if (req.headers == null) {\n      headers = new HttpHeaders();\n    }\n    req = req.clone({\n      url: this.getFullUrl(req.url),\n      headers: headers\n    });\n    const baseUrl = NSystemService.getInstance().getVal('baseUrl');\n    const isArt = (baseUrl !== '' && req.url.includes(baseUrl));\n    return  isArt ? this.addDefaultHeaders(req) : req;\n  }\n\n\n  /**\n  * Default options.\n  * @param options\n  * @returns HttpHeadedrs\n  */\n  private addDefaultHeaders(req: any) {\n    /**\n     * TODO: Add all default Headers over here\n     */\n    if (!req.headers.has('Access-Control-Allow-Origin')) {\n      req.headers = req.headers.set('Access-Control-Allow-Origin', '*');\n    }\n\n    if (!req.headers.has('Content-Type')) {\n      req.headers = req.headers.set('Content-Type', 'application/json');\n    } else if (req.headers.has('Content-Type') && (req.headers.get('Content-Type') === 'no-content')) {\n      req.headers = req.headers.delete('Content-Type');\n    }\n\n    if (!req.headers.has('Accept')) {\n      req.headers = req.headers.set('Accept', 'application/json');\n    }\n\n    if (!req.headers.has('Authorization')) {\n      this.appProperties = this.systemService.getVal('properties');\n      if (this.appProperties && this.appProperties.appAuthenticationStrategy === 'basicAuth') {\n        let username, password;\n        if (this.appProperties.basicAuthUser && this.appProperties.basicAuthPassword) {\n          username = this.appProperties.basicAuthUser;\n          password = this.appProperties.basicAuthPassword;\n        }\n        else {\n          username = \"bhive-art-proxyuser\";\n          password = \"password\";\n          console.warn(\"Authentication strategy: Basic Auth. basicAuthUser and basicAuthPassword are not configured in environment. Setting default values.\");\n        }\n        req.headers = req.headers.set('Authorization', 'Basic ' + btoa(username + \":\" + password));\n      } else if (this.appProperties && (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||\n        this.appProperties.appAuthenticationStrategy === 'localAuth')) {\n        if (this.nSessionStorage.getValue('accessToken')) {\n          req.headers = req.headers.set('Authorization', 'Bearer ' + this.nSessionStorage.getValue('accessToken'));\n        }\n      }\n    }\n    return req;\n  }\n\n  /**\n   * Build API url.\n   * @param url\n   * @returns string\n   */\n  private getFullUrl(url: string): string {\n    // return full URL to API here\n    return url;\n  }\n\n  /**\n   * Request interceptor.\n   */\n  private requestInterceptor(): void {\n    this.nHTTPLoader.isHTTPRequestInProgress(true);\n  }\n\n  /**\n   * Response interceptor.\n   */\n  private responseInterceptor(): void {\n    this.nHTTPLoader.isHTTPRequestInProgress(false);\n  }\n\n  /**\n    * Error handler.\n    * @param error\n    * @param caught\n    * @returns ErrorObservable\n    */\n  private onCatch(error: HttpErrorResponse, req: HttpRequest<any>, next: HttpHandler): Observable<any> {\n    if (error instanceof HttpErrorResponse) {\n      if ((<HttpErrorResponse>error).status === 403 && (<HttpErrorResponse>error).error.message === 'jwt expired') {\n        return this.updateToken(error, req, next);\n      } else {\n        return this.onSubscribeError(error);\n      }\n    } else {\n      return this.onSubscribeError(error);\n    }\n  }\n\n  /**\n   * onSubscribeError\n   * @param error\n   */\n  private onSubscribeError(err: HttpErrorResponse): Observable<any> {\n    this.nHTTPLoader.alertError(err);\n    return this.onCatchError(err);\n  }\n  /**\n   * onFinally\n   */\n  private onFinally(): void {\n    this.responseInterceptor();\n  }\n\n  private onCatchError(error: HttpErrorResponse): Observable<any> {\n    return Observable.throw(error);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n// import { MatSnackBar } from '@angular/material';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport { NSystemService } from './n-system.service';\nimport { NPubSubService } from './n-pubSub.service';\n\n\n@Injectable()\nexport class NSnackbarService {\n  snackBarListner;\n  private snackService = new Subject<any>();\n  constructor(private nPubSubService: NPubSubService) {\n    if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {\n      this.snackBarListner = this.nPubSubService.$sub('openSnackBar', (msg) => {\n        this.openSnackBar(msg);\n      })\n    }\n  }\n\n  get() {\n    return this.snackService.asObservable();\n  }\n\n\n\n  add(data: {\n    msg: string, timeout?: number, background?: string, color?: string, customClass?: any,\n    action?: { text: string, onClick?: Function, color?: string }, onAdd?: Function, onRemove?: Function\n  }) {\n    this.snackService.next({\n      action: 'add',\n      data: data\n    });\n  }\n\n  remove(id: string) {\n    this.snackService.next({ action: 'remove', id: id });\n  }\n\n  clear() {\n    this.snackService.next({ action: 'clear' });\n  }\n\n  openSnackBar(message, timeout?, ) {\n    this.add({\n      msg: message,\n      timeout: timeout || 5000,\n      action: {\n        text: 'Close',\n        onClick: (snack) => {\n         \n        },\n      },\n      onAdd: (snack) => {\n      },\n      onRemove: (snack) => {\n      }\n    });\n  }\n\n}\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'n-snack',\n  template: `\n     <div class=\"snack\" [ngStyle]=\"{background: background ? background : '#323232' , color: color ? color : '#fff'}\" [ngClass]=\" ['snackbar-layout', 'customClass' ]\">\n          <ng-content></ng-content>\n       </div> \n  `,\n  styles: [`.snack-action{cursor:pointer;color:#2196f3;font-weight:700}.container{display:flex;flex-direction:row;flex-wrap:wrap}.child{width:60%;flex:1 0;margin-right:.5em}.snackbars.bottom-center{align-items:middle;left:50%;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);bottom:1px;align-items:center}.snackbars{position:fixed;z-index:99999;max-width:100%;word-wrap:break-word;display:inline;font-family:Roboto;letter-spacing:1px}.snack{padding:1em;border-radius:.3em;max-height:50vh;overflow:auto}`]\n})\nexport class SnackComponent {\n  @Input() background;\n  @Input() color;\n  @Input() customClass;\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { NSnackbarService } from '../../n-snackbar.service';\n\n@Component({\n  selector: 'n-snackbar',\n  template: `\n      <div class=\"snackbars\" [ngClass]=\"position || 'bottom-center'\">\n          <n-snack   *ngFor=\"let snackbar of snacks\" [background]=\"snackbar.background || background\"\n                        [customClass]=\"snackbar.customClass || customClass\"\n                        [color]=\"snackbar.color || color || calcTextColor(snackbar.background || background)\">\n              <div class=\"container\">\n              <div class=\"snack-text child\" >\n                  {{snackbar.msg}}\n              </div>\n              <div *ngIf=\"snackbar.action.text\" class=\"snack-action\" (click)=\"snackbar.action.onClick()\"\n                   [ngStyle]=\"{color: snackbar.action.color || accent}\">\n                  {{snackbar.action.text}}\n              </div>\n              </div>\n          </n-snack>\n      </div>\n  `,\n  styles: [`.snack-action{cursor:pointer;color:#2196f3;font-weight:700}.container{display:flex;flex-direction:row;flex-wrap:wrap}.child{width:60%;flex:1 0;margin-right:.5em}.snackbars.bottom-center{align-items:middle;left:50%;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);bottom:1px;align-items:center}.snackbars{position:fixed;z-index:99999;max-width:100%;word-wrap:break-word;display:inline;font-family:Roboto;letter-spacing:1px}.snack{padding:1em;border-radius:.3em;max-height:50vh;overflow:auto}`]\n})\nexport class SnackbarComponent {\n  @Input() position: 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';\n  @Input() max: number = 1;\n  @Input() background: string;\n  @Input() accent: string;\n  @Input() color: string;\n  @Input() customClass: any;\n  @Input() timeout: number;\n\n  @Output() public onAdd: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public onRemove: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public onClear: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  snacks: Array<{\n    id: string, msg: string, timeout?: number, color?: string, background?: string, customClass?: any, action?: {\n      text: string, onClick?: Function, color?: string\n    }, onAdd?: Function, onRemove?: Function, timeoutObj?: any\n  }> = [];\n\n  constructor(private snackbarService: NSnackbarService) {\n    this.snackbarService.get()\n      .subscribe(snack => {\n        if (snack.action === 'add') {\n          this.add(snack.data);\n        } else if (snack.action === 'remove') {\n          this.remove(snack.id);\n        } else if (snack.action === 'clear') {\n          this.clear();\n        }\n      });\n  }\n\n  add(snack) {\n    let timeout;\n    const id = this.uuid();\n\n    if (this.max && this.max > 0 && this.snacks.length === this.max) {\n      this.remove(this.snacks[0].id);\n    }\n\n    if (snack.timeout || this.timeout) {\n      timeout = setTimeout(() => {\n        this.remove(id);\n      }, snack.timeout || this.timeout)\n    }\n\n    const data = Object.assign({ id: id, timeoutObj: timeout }, snack);\n\n    if (snack.action) {\n      const that = this;\n      const fcn = snack.action.onClick || new Function();\n      snack.action.onClick = () => {\n        fcn(data);\n        that.remove(id);\n      };\n    }\n\n    if (snack.onAdd) {\n      snack.onAdd(data);\n    }\n\n    if (this.onAdd) {\n      this.onAdd.emit(data);\n    }\n\n    this.snacks.push(data);\n  }\n\n  remove(id) {\n    const snack = this.snacks.find(obj => obj.id === id);\n\n    if (snack) {\n      if (snack.onRemove) {\n        snack.onRemove(snack);\n      }\n\n      if (this.onRemove) {\n        this.onRemove.emit(snack);\n      }\n\n      if (snack.timeoutObj) {\n        clearTimeout(snack.timeoutObj);\n      }\n    }\n\n    this.snacks = this.snacks.filter(obj => obj.id !== id);\n  }\n\n  clear() {\n    // this.snacks.forEach(snack => {\n    //   this.remove(snack.id);\n    // });\n\n    this.snacks = [];\n\n    if (this.onClear) {\n      this.onClear.emit(true);\n    }\n  }\n\n  uuid() {\n    // tslint:disable:no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n    // tslint:enable:no-bitwise\n  }\n\n  calcTextColor(background) {\n    if (!background) {\n      return null;\n    }\n\n    function hexToRgb(hex) {\n      const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n      hex = hex.replace(shorthandRegex, (m, r, g, b) => {\n        return r + r + g + g + b + b;\n      });\n\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      } : null;\n    }\n\n    const rgb = hexToRgb(background);\n    if (!rgb) {\n      return null;\n    }\n\n    const color = [rgb.r / 255, rgb.g / 255, rgb.b / 255];\n\n    for (let i = 0; i < color.length; ++i) {\n      if (color[i] <= 0.03928) {\n        color[i] = color[i] / 12.92;\n      } else {\n        color[i] = Math.pow((color[i] + 0.055) / 1.055, 2.4);\n      }\n    }\n\n    const l = 0.2126 * color[0] + 0.7152 * color[1] + 0.0722 * color[2];\n\n    if (l > 0.179) {\n      return '#000';\n    } else {\n      return '#fff';\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, APP_INITIALIZER } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// import { BrowserModule } from '@angular/platform-browser';\n\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n// import { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n// import { MatSnackBar } from \"@angular/material\";\nimport { NAuthGuardService } from './n-authGaurd.service'\nimport { NDataModelService } from './n-dataModel.service';\n// import { NDataSourceService } from './n-dataSource.service';\nimport { NHttpService } from './n-HTTP.service';\nimport { NHTTPLoaderService } from './n-HTTPLoader.service';\nimport { NLocalStorageService } from './n-localStorage.service';\nimport { NLoginService } from './n-login.service';\nimport { NLogoutService } from './n-logout.service';\nimport { NNotificationService } from './n-notification.service';\nimport { NSnackbarService } from './n-snackbar.service';\nimport { NSystemService } from './n-system.service';\nimport { NPubSubService } from './n-pubSub.service';\nimport { NSessionStorageService } from './n-sessionStorage.service'\nimport { NTokenService } from './n-token.service';\nimport { HttpClientModule } from '@angular/common/http';\n// import { RouterModule } from '@angular/router';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpModule } from '@angular/http';\nimport { NgForageModule } from 'ngforage';\n\nimport { SnackComponent } from './snackbar/snack/snack.component';\nimport { SnackbarComponent } from './snackbar/snackbar/snackbar.component';\n// import {SafeHtmlPipe} from './snackbar/pipe/safe-html.pipe';\n\n\n// export function updateEnvProperties(env) {\n//   console.log(env);\n//   NSystemService.getInstance().environments = env;\n// }\n\nexport function startupServiceFactory(startupService: NLocalStorageService) {\n  const res = () => {\n    // console.log('module before initstorage call');\n    return startupService.initStorage();\n\n  }\n  return res;\n}\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    RouterModule,\n    HttpModule,\n    NgForageModule.forRoot()\n    // BrowserModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: NHttpService,\n      multi: true\n    },\n    {\n      // Provider for APP_INITIALIZER\n      provide: APP_INITIALIZER,\n      useFactory: startupServiceFactory,\n      deps: [NLocalStorageService],\n      multi: true\n    },\n    NAuthGuardService,\n    NDataModelService,\n    // NDataSourceService,\n    NHttpService,\n    NHTTPLoaderService,\n    NLocalStorageService,\n    NLoginService,\n    NLogoutService,\n    NNotificationService,\n    NSnackbarService,\n    NPubSubService,\n    //     NSystemService,\n    NSessionStorageService,\n    NTokenService\n  ],\n  declarations: [\n    SnackComponent,\n    SnackbarComponent\n  ],\n  exports: [\n    SnackComponent,\n    SnackbarComponent\n  ]\n\n})\nexport class NeutrinosSeedServicesModule {\n\n}\n"]}
(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('platform'), require('@angular/core'), require('ngforage'), require('rxjs/Subject'), require('firebase'), require('@angular/common/http'), require('rxjs/add/operator/map'), require('@angular/router'), require('rxjs/Observable'), require('rxjs/Rx'), require('@angular/common'), require('@angular/http')) :
    typeof define === 'function' && define.amd ? define('neutrinos-seed-services', ['exports', 'platform', '@angular/core', 'ngforage', 'rxjs/Subject', 'firebase', '@angular/common/http', 'rxjs/add/operator/map', '@angular/router', 'rxjs/Observable', 'rxjs/Rx', '@angular/common', '@angular/http'], factory) :
    (factory((global['neutrinos-seed-services'] = {}),null,global.ng.core,global.ngforage,global.rxjs.Subject,global.firebase,global.ng.common.http,global.rxjs['add/operator/map'],global.ng.router,global.rxjs.Observable,global.rxjs.Rx,global.ng.common,global.ng.http));
}(this, (function (exports,platform,core,ngforage,Subject,firebase,http,map,router,Observable,Rx,common,http$1) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NSystemService = (function () {
        function NSystemService() {
            this._deviceType = this.checkDevice();
        }
        /**
         * @return {?}
         */
        NSystemService.getInstance = /**
         * @return {?}
         */
            function () {
                if (!this.instance) {
                    this.instance = new NSystemService();
                }
                return this.instance;
            };
        /**
         * Seter and getter for the environments
         */
        // set environments(properties) {
        //   console.log(properties);
        //   NSystemService.envProperties = properties;
        //   this.properties = this.getVal('properties');
        // }
        // get environments() {
        //   return NSystemService.envProperties;
        // }
        /**
         * Returna 'mobile' or 'browser' based on the platform
         */
        /**
         * Returna 'mobile' or 'browser' based on the platform
         * @return {?}
         */
        NSystemService.prototype.checkDevice = /**
         * Returna 'mobile' or 'browser' based on the platform
         * @return {?}
         */
            function () {
                if (window['device'] && (window['device']['platform'] != 'browser' || window['device']['platform'] != 'Browser')) {
                    return 'mobile';
                }
                else if (window['device'] && (window['device']['platform'] == 'browser' || window['device']['platform'] == 'Browser')) {
                    return 'cordova_browser';
                }
                else {
                    return 'browser';
                }
            };
        Object.defineProperty(NSystemService.prototype, "deviceType", {
            get: /**
             * @return {?}
             */ function () {
                return this._deviceType;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} key
         * @return {?}
         */
        NSystemService.prototype.getVal = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (!NSystemService.envProperties) {
                    NSystemService.envProperties = window['neutrinos']['environments'];
                    this.properties = NSystemService.envProperties.properties;
                }
                if (key == 'properties') {
                    if (NSystemService.envProperties) {
                        return NSystemService.envProperties.properties;
                    }
                    else {
                        return undefined;
                    }
                }
                else {
                    if (NSystemService.envProperties && NSystemService.envProperties.properties) {
                        return NSystemService.envProperties.properties[key];
                    }
                    else {
                        return undefined;
                    }
                }
            };
        /**
         * @return {?}
         */
        NSystemService.prototype.isAndroid = /**
         * @return {?}
         */
            function () {
                if (window['device'] && window['device']['platform'] == 'Android') {
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @return {?}
         */
        NSystemService.prototype.isIOS = /**
         * @return {?}
         */
            function () {
                if (window['device'] && window['device']['platform'] == 'iOS') {
                    return true;
                }
                else {
                    return false;
                }
            };
        /**
         * @return {?}
         */
        NSystemService.prototype.getAndroidVersion = /**
         * @return {?}
         */
            function () {
                if (this.isAndroid()) {
                    return window['device']['version'];
                }
                else {
                    return '';
                }
            };
        /**
         * @return {?}
         */
        NSystemService.prototype.getAuthUrl = /**
         * @return {?}
         */
            function () {
                // this.properties = this.getVal('properties');
                return this.properties.baseUrl + this.properties.tenantName + '/auth/';
            };
        /**
         * @return {?}
         */
        NSystemService.prototype.getTenantUrl = /**
         * @return {?}
         */
            function () {
                return this.properties.baseUrl + this.properties.tenantName + '/';
            };
        /**
         * @return {?}
         */
        NSystemService.prototype.getAppUrl = /**
         * @return {?}
         */
            function () {
                return this.properties.baseUrl + this.properties.tenantName + '/proxy/' + this.properties.appName + '/';
            };
        /**
         * @return {?}
         */
        NSystemService.prototype.getProxyUrl = /**
         * @return {?}
         */
            function () {
                return this.properties.baseUrl + this.properties.tenantName + '/proxy/';
            };
        /**
         * @return {?}
         */
        NSystemService.prototype.getDataModelUrl = /**
         * @return {?}
         */
            function () {
                return this.properties.baseUrl + this.properties.tenantName + '/datamodel/' + this.properties.appDataSource + '/' + this.properties.appName + '/';
            };
        /**
         * @return {?}
         */
        NSystemService.prototype.getFileIOUrl = /**
         * @return {?}
         */
            function () {
                return this.properties.baseUrl + this.properties.tenantName + '/fileio/' +
                    this.properties.appDataSource + '/' + this.properties.appName + '/';
            };
        /**
         * @param {?} type
         * @return {?}
         */
        NSystemService.prototype.getPlatformDetails = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                var /** @type {?} */ pDetails = {
                    platform: platform.os.family,
                    platformVersion: platform.os.version,
                };
                if (type === 'browser') {
                    return Object.assign(pDetails, {
                        type: 'browser',
                        browser: platform.name,
                        browserVersion: platform.version,
                    });
                }
                else if (type === 'mobile' || type === 'cordova_browser') {
                    return Object.assign(pDetails, {
                        type: 'mobile',
                        model: window['device'].model,
                        manufacturer: window['device'].manufacturer,
                        isVirtual: window['device'].isVirtual
                    });
                }
            };
        return NSystemService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NSessionStorageService = (function () {
        function NSessionStorageService() {
            NSessionStorageService.sessionStorageCache = sessionStorage;
        }
        /**
         * @return {?}
         */
        NSessionStorageService.prototype.getSessionStorage = /**
         * @return {?}
         */
            function () {
                return NSessionStorageService.sessionStorageCache;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        NSessionStorageService.prototype.setValue = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                NSessionStorageService.sessionStorageCache[key] = value;
                sessionStorage.setItem(key, value);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        NSessionStorageService.prototype.getValue = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (!NSessionStorageService.sessionStorageCache[key]) {
                    return null;
                }
                try {
                    var /** @type {?} */ obj = NSessionStorageService.sessionStorageCache[key];
                    return JSON.parse(obj);
                }
                catch (error) {
                    return NSessionStorageService.sessionStorageCache[key];
                }
            };
        /**
         * @param {?} key
         * @return {?}
         */
        NSessionStorageService.prototype.remove = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (NSessionStorageService.sessionStorageCache.hasOwnProperty(key)) {
                    delete NSessionStorageService.sessionStorageCache[key];
                    sessionStorage.removeItem(key);
                }
            };
        /**
         * @return {?}
         */
        NSessionStorageService.prototype.clearSessionStorage = /**
         * @return {?}
         */
            function () {
                NSessionStorageService.sessionStorageCache = {};
                sessionStorage.clear();
            };
        NSessionStorageService.sessionStorageCache = {};
        NSessionStorageService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NSessionStorageService.ctorParameters = function () { return []; };
        return NSessionStorageService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NUtility = (function () {
        function NUtility() {
        }
        /**
         * @return {?}
         */
        NUtility.prototype.generateUUID = /**
         * @return {?}
         */
            function () {
                return this.__s4() + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + '-' + this.__s4() + this.__s4() + this.__s4();
            };
        /**
         * @return {?}
         */
        NUtility.prototype.__s4 = /**
         * @return {?}
         */
            function () {
                return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
            };
        return NUtility;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NLocalStorageService = (function () {
        function NLocalStorageService(ngfConfig, ngf, ngfCache) {
            this.ngfConfig = ngfConfig;
            this.ngf = ngf;
            this.ngfCache = ngfCache;
            this.storageCache = {};
        }
        /**
         * @return {?}
         */
        NLocalStorageService.prototype.initStorage = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    if (window['cordova']) {
                        _this.initNgForage();
                    }
                    _this.ngf.iterate(function (value, key, iteratonNumber) {
                        _this.storageCache[key] = value;
                    }).then(function (result) {
                        _this.checkDeviceId();
                        return resolve('iteration is completed');
                    }).catch(function (error) {
                        return reject(error);
                    });
                });
            };
        /**
         * @return {?}
         */
        NLocalStorageService.prototype.getStorage = /**
         * @return {?}
         */
            function () {
                return this.storageCache;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        NLocalStorageService.prototype.setValue = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                if (window['cordova']) {
                    this.initNgForage();
                }
                this.storageCache[key] = value;
                return this.ngf.setItem(key, value).then(function (result) {
                    return result;
                }, function (error) {
                    console.log(error);
                });
            };
        /**
         * @param {?} key
         * @return {?}
         */
        NLocalStorageService.prototype.getValue = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                if (!this.storageCache[key]) {
                    return null;
                }
                try {
                    var /** @type {?} */ obj = this.storageCache[key];
                    return JSON.parse(obj);
                }
                catch (error) {
                    return this.storageCache[key];
                }
            };
        /**
         * @param {?} key
         * @return {?}
         */
        NLocalStorageService.prototype.remove = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var _this = this;
                delete this.storageCache[key];
                if (window['cordova']) {
                    this.initNgForage();
                }
                this.ngf.removeItem(key).then(function (fulfilled) {
                    delete _this.ngf[key];
                }).catch(function (error) {
                    console.error('Could not remove', key);
                });
            };
        /**
         * @return {?}
         */
        NLocalStorageService.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.storageCache = {};
                this.ngf.clear();
            };
        /**
         * @return {?}
         */
        NLocalStorageService.prototype.pluginCheck = /**
         * @return {?}
         */
            function () {
                if (window['cordova'] && window['NativeStorage']) {
                    this.nativeStorageI = window['NativeStorage'];
                    // return true;
                }
                // this.initStorage();
            };
        /**
         * @param {?} key
         * @return {?}
         */
        NLocalStorageService.prototype.getItemNs = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    if (window['cordova'] && window['NativeStorage']) {
                        _this.nativeStorageI.getItem(key, function (result) {
                            resolve(result);
                        }, function (error) {
                            reject(error);
                        });
                    }
                });
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        NLocalStorageService.prototype.setItemNs = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    if (window['cordova'] && window['NativeStorage']) {
                        _this.nativeStorageI.setItem(key, value, function (result) {
                            resolve(result);
                        }, function (error) {
                            reject(error);
                        });
                    }
                });
            };
        /**
         * @param {?} key
         * @return {?}
         */
        NLocalStorageService.prototype.removeItemNs = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    if (window['cordova'] && window['NativeStorage']) {
                        _this.nativeStorageI.remove(key, function (result) {
                            resolve(result);
                        }, function (error) {
                            reject(error);
                        });
                    }
                });
            };
        /**
         * @return {?}
         */
        NLocalStorageService.prototype.clearNs = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return new Promise(function (resolve, reject) {
                    if (window['cordova'] && window['NativeStorage']) {
                        _this.nativeStorageI.clear(function (result) {
                            resolve(result);
                        }, function (error) {
                            reject(error);
                        });
                    }
                });
            };
        /**
         * @return {?}
         */
        NLocalStorageService.prototype.initNgForage = /**
         * @return {?}
         */
            function () {
                this.ngfConfig.configure({
                    name: 'MyApp',
                    driver: [
                        ngforage.NgForageConfig.DRIVER_WEBSQL,
                    ]
                });
            };
        /**
         * @param {?} promise
         * @return {?}
         */
        NLocalStorageService.prototype.promiseReflect = /**
         * @param {?} promise
         * @return {?}
         */
            function (promise) {
                return promise.then(function (resolved) { return { v: resolved, status: 'resolved' }; }, function (error) { return { e: error, status: 'rejected' }; });
            };
        /**
         * @return {?}
         */
        NLocalStorageService.prototype.clearLocalStorage = /**
         * @return {?}
         */
            function () {
                this.remove('userObj');
                this.remove('accessToken');
                this.remove('refreshToken');
                this.remove('registrationId');
            };
        /**
         * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
        */
        /**
         * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
         * @return {?}
         */
        NLocalStorageService.prototype.checkDeviceId = /**
         * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
         * @return {?}
         */
            function () {
                var _this = this;
                if (NSystemService.getInstance().checkDevice() === 'browser') {
                    this._deviceUUID = this.getValue('uuid');
                    if (!this._deviceUUID) {
                        this._deviceUUID = new NUtility().generateUUID();
                        this.setValue('uuid', this._deviceUUID);
                    }
                }
                else {
                    window['plugins'].uniqueDeviceID.get(function (uuid) {
                        _this._deviceUUID = uuid;
                        _this.setValue('uuid', _this._deviceUUID);
                    });
                }
                return this._deviceUUID;
            };
        Object.defineProperty(NLocalStorageService.prototype, "deviceUUID", {
            get: /**
             * @return {?}
             */ function () {
                return this._deviceUUID;
            },
            enumerable: true,
            configurable: true
        });
        NLocalStorageService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NLocalStorageService.ctorParameters = function () {
            return [
                { type: ngforage.NgForageConfig, },
                { type: ngforage.NgForage, },
                { type: ngforage.NgForageCache, },
            ];
        };
        return NLocalStorageService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NTokenService = (function () {
        // nLocalStorageService: NLocalStorageService;
        function NTokenService(nLocalStorageService) {
            this.nLocalStorageService = nLocalStorageService;
            this.nSessionStorage = new NSessionStorageService();
            // this.nLocalStorageService = new NLocalStorageService();
        }
        /**
         * @param {?} tokensObj
         * @param {?=} isRemember
         * @return {?}
         */
        NTokenService.prototype.updateTokens = /**
         * @param {?} tokensObj
         * @param {?=} isRemember
         * @return {?}
         */
            function (tokensObj, isRemember) {
                var /** @type {?} */ userObj = this.decodeToken(tokensObj['accessToken']);
                this.nSessionStorage.setValue('accessToken', tokensObj['accessToken']);
                this.nSessionStorage.setValue('refreshToken', tokensObj['refreshToken']);
                this.nSessionStorage.setValue('userObj', JSON.stringify(userObj));
                if ((isRemember || this.nLocalStorageService.getValue('accessToken'))) {
                    this.nLocalStorageService.setValue('accessToken', tokensObj['accessToken']);
                    this.nLocalStorageService.setValue('refreshToken', tokensObj['refreshToken']);
                    this.nLocalStorageService.setValue('userObj', JSON.stringify(userObj));
                }
            };
        /**
         * @return {?}
         */
        NTokenService.prototype.updateSessionStorage = /**
         * @return {?}
         */
            function () {
                this.updateTokens(this.nLocalStorageService.getStorage(), true);
            };
        /**
         * @param {?} str
         * @return {?}
         */
        NTokenService.prototype.urlBase64Decode = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                var /** @type {?} */ output = str.replace(/-/g, '+').replace(/_/g, '/');
                switch (output.length % 4) {
                    case 0: {
                        break;
                    }
                    case 2: {
                        output += '==';
                        break;
                    }
                    case 3: {
                        output += '=';
                        break;
                    }
                    default: {
                        throw 'Illegal base64url string!';
                    }
                }
                return this.b64DecodeUnicode(output);
            };
        /**
         * @param {?} str
         * @return {?}
         */
        NTokenService.prototype.b64decode = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                var /** @type {?} */ chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                var /** @type {?} */ output = '';
                str = String(str).replace(/=+$/, '');
                if (str.length % 4 == 1) {
                    throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
                }
                for (
                // initialize result and counters
                var /** @type {?} */ bc = 0, /** @type {?} */ bs = void 0, /** @type {?} */ buffer = void 0, /** @type {?} */ idx = 0; 
                // get next character
                buffer = str.charAt(idx++); 
                // character found in table? initialize bit storage and add its ascii value;
                ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
                    // and if not first of each 4 characters,
                    // convert the first 8 bits to one ascii character
                    bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
                    // try to find character in table (0-63, not found => -1)
                    buffer = chars.indexOf(buffer);
                }
                return output;
            };
        /**
         * @param {?} str
         * @return {?}
         */
        NTokenService.prototype.b64DecodeUnicode = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), function (c) {
                    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
                }).join(''));
            };
        /**
         * @param {?} token
         * @return {?}
         */
        NTokenService.prototype.decodeToken = /**
         * @param {?} token
         * @return {?}
         */
            function (token) {
                var /** @type {?} */ parts = token.split('.');
                if (parts.length !== 3) {
                    throw new Error('JWT must have 3 parts');
                }
                var /** @type {?} */ decoded = this.urlBase64Decode(parts[1]);
                if (!decoded) {
                    throw new Error('Cannot decode the token');
                }
                return JSON.parse(decoded);
            };
        /**
         * @param {?} token
         * @return {?}
         */
        NTokenService.prototype.getTokenExpirationDate = /**
         * @param {?} token
         * @return {?}
         */
            function (token) {
                var /** @type {?} */ decoded;
                decoded = this.decodeToken(token);
                if (!decoded.hasOwnProperty('exp')) {
                    return null;
                }
                var /** @type {?} */ date = new Date(0); // The 0 here is the key, which sets the date to the epoch
                date.setUTCSeconds(decoded.exp);
                return date;
            };
        /**
         * @param {?} token
         * @param {?=} offsetSeconds
         * @return {?}
         */
        NTokenService.prototype.isTokenExpired = /**
         * @param {?} token
         * @param {?=} offsetSeconds
         * @return {?}
         */
            function (token, offsetSeconds) {
                var /** @type {?} */ date = this.getTokenExpirationDate(token);
                offsetSeconds = offsetSeconds || 0;
                if (date == null) {
                    return false;
                }
                // Token expired?
                return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));
            };
        NTokenService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NTokenService.ctorParameters = function () {
            return [
                { type: NLocalStorageService, },
            ];
        };
        return NTokenService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ ServiceName = "PubSub Service";
    var NPubSubService = (function () {
        function NPubSubService() {
            this.events = {};
        }
        /**
         * @param {?} event
         * @param {?=} callback
         * @param {?=} error
         * @param {?=} complete
         * @return {?}
         */
        NPubSubService.prototype.$sub = /**
         * @param {?} event
         * @param {?=} callback
         * @param {?=} error
         * @param {?=} complete
         * @return {?}
         */
            function (event, callback, error, complete) {
                if (!event) {
                    throw new Error("[" + ServiceName + "] => Subscription method must get event name.");
                }
                if (this.events[event] === undefined) {
                    this.events[event] = new Subject.Subject();
                }
                if (typeof callback !== 'function') {
                    return this.events[event].asObservable();
                }
                else {
                    return this.events[event].asObservable().subscribe(callback, error, complete);
                }
            };
        /**
         * @param {?} event
         * @param {?=} eventObject
         * @return {?}
         */
        NPubSubService.prototype.$pub = /**
         * @param {?} event
         * @param {?=} eventObject
         * @return {?}
         */
            function (event, eventObject) {
                if (!event) {
                    throw new Error("[" + ServiceName + "] => Publish method must get event name.");
                }
                else if (!this.events[event]) {
                    return;
                }
                this.events[event].next(eventObject);
            };
        NPubSubService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NPubSubService.ctorParameters = function () { return []; };
        return NPubSubService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NLogoutService = (function () {
        // nLocalStorageService = new NLocalStorageService();
        function NLogoutService(nLocalStorageService) {
            this.nLocalStorageService = nLocalStorageService;
            this.nSessionStorage = new NSessionStorageService();
        }
        /**
         * @return {?}
         */
        NLogoutService.prototype.logout = /**
         * @return {?}
         */
            function () {
                this.nSessionStorage.clearSessionStorage();
                this.nLocalStorageService.clearLocalStorage();
                return true;
            };
        NLogoutService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NLogoutService.ctorParameters = function () {
            return [
                { type: NLocalStorageService, },
            ];
        };
        return NLogoutService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NHTTPLoaderService = (function () {
        function NHTTPLoaderService(nLogoutService, nPubSubService) {
            this.nLogoutService = nLogoutService;
            this.nPubSubService = nPubSubService;
            this.pendingRequests = 0;
            this.showLoading = false;
            this._isHTTPRequestInProgress = new Subject.Subject();
            this._isHTTPRequestInProgress$ = this._isHTTPRequestInProgress.asObservable();
        }
        /**
         * @param {?} bool
         * @return {?}
         */
        NHTTPLoaderService.prototype.isHTTPRequestInProgress = /**
         * @param {?} bool
         * @return {?}
         */
            function (bool) {
                if (bool) {
                    this.pendingRequests++;
                    if (!this.showLoading) {
                        this._isHTTPRequestInProgress.next(bool);
                    }
                    this.showLoading = true;
                }
                else {
                    this.pendingRequests--;
                    if (this.pendingRequests <= 0) {
                        if (this.showLoading) {
                            this._isHTTPRequestInProgress.next(bool);
                        }
                        this.showLoading = false;
                    }
                }
            };
        /**
         * @param {?} error
         * @return {?}
         */
        NHTTPLoaderService.prototype.alertError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                if (error.status < 200 || error.status > 500) {
                    if (error.status === 0) {
                        this.nPubSubService.$pub('openSnackBar', 'Connectivity issue');
                    }
                    else {
                        this.nPubSubService.$pub('openSnackBar', 'Response failure');
                    }
                }
                else if (error.status === 401) {
                    this.nLogoutService.logout();
                    if (error.error) {
                        this.nPubSubService.$pub('openSnackBar', error.error);
                    }
                    else {
                        this.nPubSubService.$pub('openSnackBar', error);
                    }
                }
                else if (error.error) {
                    if (error.error instanceof Object) {
                        this.nPubSubService.$pub('openSnackBar', error.error.message);
                    }
                    else {
                        this.nPubSubService.$pub('openSnackBar', error.error);
                    }
                }
                else {
                    this.nPubSubService.$pub('openSnackBar', 'Response failure');
                }
            };
        NHTTPLoaderService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NHTTPLoaderService.ctorParameters = function () {
            return [
                { type: NLogoutService, },
                { type: NPubSubService, },
            ];
        };
        return NHTTPLoaderService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NNotificationService = (function () {
        function NNotificationService(localStorageService, pubSubService, http$$1, bHttpLoader) {
            var _this = this;
            this.localStorageService = localStorageService;
            this.pubSubService = pubSubService;
            this.http = http$$1;
            this.bHttpLoader = bHttpLoader;
            this.systemService = NSystemService.getInstance();
            this.possiblePushTypes = ['APNS', 'FCM'];
            this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');
            this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');
            this.appName = this.systemService.getVal('appName');
            this.deviceType = this.systemService.deviceType;
            this.sessionStorage = new NSessionStorageService();
            this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', function () {
                _this.enableNotification();
            });
        }
        /**
         * @return {?}
         */
        NNotificationService.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        NNotificationService.prototype.enableNotification = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var /** @type {?} */ pushType = this.getPushType(this.systemService.getVal('pushType'));
                document.addEventListener('deviceready', function (event) {
                    if (_this.isNotificationEnabled) {
                        if (_this.deviceType && _this.deviceType != 'browser') {
                            _this.deviceType = _this.systemService.deviceType;
                            _this.checkPermission(pushType).then(function (res) {
                                if (res) {
                                    _this.initializeNotifications(pushType);
                                }
                            });
                        }
                    }
                });
                if (this.isNotificationEnabled && pushType !== 'APNS') {
                    if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {
                        this.initialiseWebPush();
                    }
                }
            };
        /**
         * @return {?}
         */
        NNotificationService.prototype.initialiseWebPush = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ __this = this;
                var /** @type {?} */ messaging = firebase.messaging();
                messaging.requestPermission()
                    .then(function () {
                    return messaging.getToken();
                })
                    .then(function (token) {
                    if (token) {
                        __this.sendRegDetails(token);
                    }
                })
                    .catch(function (err) {
                    __this.bHttpLoader.alertError(err);
                });
                messaging.onMessage(function (payload) {
                    if (payload['notification']) {
                        var /** @type {?} */ notificationObj = payload['notification'];
                        var /** @type {?} */ options = {
                            body: notificationObj.body,
                            icon: notificationObj.icon
                        };
                        // creating a native browser message
                        var /** @type {?} */ notificationUI = new Notification(notificationObj.title, options);
                        notificationUI.onclick = function () {
                            window.focus(); // window is focused when the user clicks the notification using this
                        };
                    }
                });
            };
        /**
         * @param {?=} pushType
         * @return {?}
         */
        NNotificationService.prototype.checkPermission = /**
         * @param {?=} pushType
         * @return {?}
         */
            function (pushType) {
                var _this = this;
                // Android & iOS only
                // Checks whether the push notification permission has been granted.
                return new Promise(function (resolve) {
                    pushType = _this.getPushType(pushType);
                    if ((_this.deviceType === 'Android' || _this.deviceType === 'iOS') && (pushType === 'FCM')) {
                        PushNotification.hasPermission(function (data) {
                            return resolve(data.isEnabled);
                        });
                    }
                    else if (_this.deviceType === 'iOS' && pushType === 'APNS') {
                        APNSPushNotification.hasPermission(function (data) {
                            return resolve(data.isEnabled);
                        });
                    }
                    else {
                        return resolve(true);
                    }
                });
            };
        /**
         * @param {?=} pushType
         * @return {?}
         */
        NNotificationService.prototype.initializeNotifications = /**
         * @param {?=} pushType
         * @return {?}
         */
            function (pushType) {
                var _this = this;
                //pushType = pushType ? pushType : 'FCM';
                pushType = this.getPushType(pushType);
                var /** @type {?} */ push;
                // Default if for FCM
                if (pushType === 'FCM') {
                    push = window['PushNotification'].init({
                        android: {
                            senderID: this.firebaseSenderId
                        },
                        ios: {
                            alert: "true",
                            badge: "true",
                            sound: "true",
                            senderID: this.firebaseSenderId
                        },
                    });
                }
                else if (pushType === 'APNS') {
                    push = window['APNSPushNotification'].init({
                        ios: {
                            alert: "true",
                            badge: "true",
                            sound: "true"
                        }
                    });
                }
                push.on('registration', function (data) {
                    // data.registrationId
                    // data.registrationId
                    _this.sendRegDetails(data.registrationId);
                });
                // ToDo Christy get call back function from app user to change what happens once a notification arrives
                push.on('notification', function (data) {
                    window['cordova'].plugins.notification.local.schedule({
                        title: data.title,
                        text: data.message,
                        sound: data.sound,
                        at: new Date().getTime()
                    });
                });
                push.on('error', function (e) {
                    // e.message
                    console.error(e);
                });
            };
        /**
         * @param {?} registrationId
         * @return {?}
         */
        NNotificationService.prototype.sendRegDetails = /**
         * @param {?} registrationId
         * @return {?}
         */
            function (registrationId) {
                this.localStorageService.setValue('registrationId', registrationId);
                var /** @type {?} */ url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';
                var /** @type {?} */ pushType = this.getPushType(this.systemService.getVal('pushType'));
                this.http.post(url, {
                    'key': this.sessionStorage.getValue('userObj')['userKey'],
                    'uuid': this.localStorageService.getValue('uuid'),
                    'fbregid': registrationId,
                    'pushType': pushType
                }).subscribe(function (result) {
                    // this.pubSubService.$pub('FBRegComp');
                }, function (error) {
                    console.log(error);
                });
            };
        /**
         * @param {?} currPushType
         * @return {?}
         */
        NNotificationService.prototype.getPushType = /**
         * @param {?} currPushType
         * @return {?}
         */
            function (currPushType) {
                var /** @type {?} */ isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());
                var /** @type {?} */ pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';
                return pushType;
            };
        /**
         * @return {?}
         */
        NNotificationService.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.loginSubscribe.unSubscribe();
            };
        NNotificationService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NNotificationService.ctorParameters = function () {
            return [
                { type: NLocalStorageService, },
                { type: NPubSubService, },
                { type: http.HttpClient, },
                { type: NHTTPLoaderService, },
            ];
        };
        return NNotificationService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NLoginService = (function () {
        function NLoginService(http$$1, pubSubService, notificationService, nLocalStorageService, nTokenService) {
            this.http = http$$1;
            this.pubSubService = pubSubService;
            this.notificationService = notificationService;
            this.nLocalStorageService = nLocalStorageService;
            this.nTokenService = nTokenService;
            this.loginCompleted = new core.EventEmitter();
            this.systemService = NSystemService.getInstance();
            // this.nTokenService = new NTokenService();
            this.nSessionStorage = new NSessionStorageService();
            // this.nLocalStorageService = new NLocalStorageService();
        }
        /**
         * @param {?} userName
         * @param {?} password
         * @param {?=} isRemember
         * @return {?}
         */
        NLoginService.prototype.login = /**
         * @param {?} userName
         * @param {?} password
         * @param {?=} isRemember
         * @return {?}
         */
            function (userName, password, isRemember) {
                var _this = this;
                this.appProperties = this.systemService.getVal('properties');
                this.loginUrl = this.systemService.getAuthUrl() + this.appProperties.appName;
                this.uuid = this.nLocalStorageService.getValue('uuid');
                if (!this.uuid) {
                    this.uuid = this.nLocalStorageService.checkDeviceId();
                }
                this.details = {
                    username: userName,
                    password: password,
                };
                this.details.platformDetails = this.systemService.getPlatformDetails(this.systemService.checkDevice());
                this.details.platformDetails['uuid'] = this.uuid;
                return this.http.post(this.loginUrl, JSON.stringify(this.details)).map(function (result) {
                    var /** @type {?} */ tokensObj = result;
                    if (tokensObj) {
                        _this.nTokenService.updateTokens(tokensObj, isRemember);
                    }
                    // TODO chris array of supported pushes currently only support APNS and Firebase
                    if ((_this.systemService.getVal('firebaseSenderId') != 'FIREBASE_SENDER_ID' && _this.systemService.getVal('firebaseAuthKey') != 'FIREBASE_AUTH_KEY')
                        || (_this.systemService.getVal('pushType') === 'APNS' && _this.systemService.isIOS())) {
                        _this.pubSubService.$pub('firebaseRegister');
                    }
                    _this.pubSubService.$pub('loginComplete');
                    return (result);
                }, function (error) {
                    return (error);
                });
            };
        /**
         * @return {?}
         */
        NLoginService.prototype.isLoggedIn = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this.nLocalStorageService.initStorage().then(function (result) {
                    if (_this.nSessionStorage.getValue('accessToken') && _this.nSessionStorage.getValue('refreshToken') &&
                        _this.nSessionStorage.getValue('accessToken') != 'null' && _this.nSessionStorage.getValue('refreshToken') != 'null') {
                        return true;
                    }
                    return false;
                }).catch(function (error) {
                    return false;
                });
            };
        NLoginService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NLoginService.ctorParameters = function () {
            return [
                { type: http.HttpClient, },
                { type: NPubSubService, },
                { type: NNotificationService, },
                { type: NLocalStorageService, },
                { type: NTokenService, },
            ];
        };
        NLoginService.propDecorators = {
            "loginCompleted": [{ type: core.Output },],
        };
        return NLoginService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NAuthGuardService = (function () {
        function NAuthGuardService(nLoginService, router$$1) {
            this.nLoginService = nLoginService;
            this.router = router$$1;
        }
        /**
         * @return {?}
         */
        NAuthGuardService.prototype.canActivate = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this.nLoginService.isLoggedIn().then(function (result) {
                    if (result) {
                        return true;
                    }
                    else {
                        _this.router.navigate(['unauthorized']);
                        return false;
                    }
                });
            };
        NAuthGuardService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NAuthGuardService.ctorParameters = function () {
            return [
                { type: NLoginService, },
                { type: router.Router, },
            ];
        };
        return NAuthGuardService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NDataModelService = (function () {
        function NDataModelService(http$$1) {
            this.http = http$$1;
            this.invalidDataModelName = 'Invalid data model name.';
            this.invalidDataModelId = 'Invalid data model id.';
            this.invalidDataModelObj = 'Invalid data model object.';
            this.systemService = NSystemService.getInstance();
        }
        // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
        /**
         *
         * @param dataModelName
         * @param filter The filter query parameter allows to specify conditions on the documents to return.
         * The filter qparam value is any mongodb query… Defaults to {}
         * @param keys Projections to be applited on mongo db.
         * @param sort sort to be applied on the query results. Defaults to {}
         * @param pagenumber Page number for paginated queries. Defaults to 1
         * @param pagesize Size of each page to be returned. Defaults to 100.
         */
        /**
         *
         * @param {?} dataModelName
         * @param {?=} filter The filter query parameter allows to specify conditions on the documents to return.
         * The filter qparam value is any mongodb query… Defaults to {}
         * @param {?=} keys Projections to be applited on mongo db.
         * @param {?=} sort sort to be applied on the query results. Defaults to {}
         * @param {?=} pagenumber Page number for paginated queries. Defaults to 1
         * @param {?=} pagesize Size of each page to be returned. Defaults to 100.
         * @return {?}
         */
        NDataModelService.prototype.get = /**
         *
         * @param {?} dataModelName
         * @param {?=} filter The filter query parameter allows to specify conditions on the documents to return.
         * The filter qparam value is any mongodb query… Defaults to {}
         * @param {?=} keys Projections to be applited on mongo db.
         * @param {?=} sort sort to be applied on the query results. Defaults to {}
         * @param {?=} pagenumber Page number for paginated queries. Defaults to 1
         * @param {?=} pagesize Size of each page to be returned. Defaults to 100.
         * @return {?}
         */
            function (dataModelName, filter, keys, sort, pagenumber, pagesize) {
                if (dataModelName) {
                    // let modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
                    var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
                    if (this.checkIfValid(filter) || this.checkIfValid(keys) || this.checkIfValid(sort) ||
                        this.checkIfValid(pagenumber) || this.checkIfValid(pagesize)) {
                        var /** @type {?} */ queryString = "" + this.toQueryString({
                            'filter': filter,
                            'keys': keys,
                            'sort': sort,
                            'pagenumber': pagenumber,
                            'pagesize': pagesize
                        });
                        if (queryString === '') {
                            queryString += '?filter={}';
                        }
                        else {
                            queryString = '?'.concat(queryString);
                        }
                        modelNameUrl += queryString;
                    }
                    return this.http.get(modelNameUrl).map(function (value, index) {
                        return value;
                    }).catch(function (error) {
                        return Observable.Observable.throw(error);
                    });
                }
                else {
                    return Observable.Observable.throw(new Error("Could not get " + dataModelName + ". " + this.invalidDataModelName));
                }
            };
        // PUT /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
        /**
         *
         * @param dataModelName Data model name of the app
         * @param dataModelObj Data Model object which is to be inserted
         */
        /**
         *
         * @param {?} dataModelName Data model name of the app
         * @param {?} dataModelObj Data Model object which is to be inserted
         * @return {?}
         */
        NDataModelService.prototype.put = /**
         *
         * @param {?} dataModelName Data model name of the app
         * @param {?} dataModelObj Data Model object which is to be inserted
         * @return {?}
         */
            function (dataModelName, dataModelObj) {
                if (dataModelName) {
                    if (dataModelObj) {
                        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
                        var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
                        return this.http.put(modelNameUrl, dataModelObj).map(function (value, index) {
                            return value;
                        }).catch(function (error) {
                            return Observable.Observable.throw(error);
                        });
                    }
                    else {
                        return Observable.Observable.throw(new Error("Could not put " + dataModelObj + " in " + dataModelName + ". " + this.invalidDataModelObj));
                    }
                }
                else {
                    return Observable.Observable.throw(new Error("Could not put " + dataModelObj + " in " + dataModelName + ". " + this.invalidDataModelName));
                }
            };
        // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
        /**
         *
         * @param dataModelName
         * @param filter
         */
        /**
         *
         * @param {?} dataModelName
         * @param {?} filter
         * @return {?}
         */
        NDataModelService.prototype.delete = /**
         *
         * @param {?} dataModelName
         * @param {?} filter
         * @return {?}
         */
            function (dataModelName, filter) {
                var /** @type {?} */ modelNameUrl;
                if (dataModelName) {
                    // modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
                    modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
                    if (this.checkIfValid(filter) && filter != '') {
                        modelNameUrl += "?filter=" + filter;
                    }
                    else {
                        modelNameUrl += '?filter={}';
                    }
                    return this.http.delete(modelNameUrl).map(function (value, index) {
                        return value;
                    }).catch(function (error) {
                        return Observable.Observable.throw(error);
                    });
                }
                else {
                    return Observable.Observable.throw(new Error("Could not delete " + dataModelName + ". " + this.invalidDataModelName));
                }
            };
        // PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
        /**
         *
         * @param dataModelName Data model name which is to be updated
         * @param dataModelObj New data model object
         */
        /**
         *
         * @param {?} dataModelName Data model name which is to be updated
         * @param {?} updateObject
         * @return {?}
         */
        NDataModelService.prototype.update = /**
         *
         * @param {?} dataModelName Data model name which is to be updated
         * @param {?} updateObject
         * @return {?}
         */
            function (dataModelName, updateObject) {
                if (dataModelName && updateObject) {
                    // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
                    var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
                    return this.http.patch(modelNameUrl, updateObject).map(function (value, index) {
                        return value;
                    }).catch(function (error) {
                        return Observable.Observable.throw(error);
                    });
                }
                else {
                    return Observable.Observable.throw(new Error("Could not update " + dataModelName + ". " + this.invalidDataModelName));
                }
            };
        // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}
        /**
         *
         * @param dataModelName Data model name which is to be updated
         * @param dataModelId Data model id which is to be updated
         */
        /**
         *
         * @param {?} dataModelName Data model name which is to be updated
         * @param {?} dataModelId Data model id which is to be updated
         * @return {?}
         */
        NDataModelService.prototype.getById = /**
         *
         * @param {?} dataModelName Data model name which is to be updated
         * @param {?} dataModelId Data model id which is to be updated
         * @return {?}
         */
            function (dataModelName, dataModelId) {
                if (dataModelName) {
                    if (dataModelId) {
                        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                        var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                        return this.http.get(modelNameUrl).map(function (value, index) {
                            return value;
                        }).catch(function (error) {
                            return Observable.Observable.throw(error);
                        });
                    }
                    else {
                        Observable.Observable.throw(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelId));
                    }
                }
                else {
                    Observable.Observable.throw(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelName));
                }
            };
        // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}
        /**
         *
         * @param dataModelName Data model name which is to be deleted
         * @param dataModelId Data model id which is to be deleted
         */
        /**
         *
         * @param {?} dataModelName Data model name which is to be deleted
         * @param {?} dataModelId Data model id which is to be deleted
         * @return {?}
         */
        NDataModelService.prototype.deleteById = /**
         *
         * @param {?} dataModelName Data model name which is to be deleted
         * @param {?} dataModelId Data model id which is to be deleted
         * @return {?}
         */
            function (dataModelName, dataModelId) {
                if (dataModelName) {
                    if (dataModelId) {
                        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                        var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                        return this.http.delete(modelNameUrl).map(function (value, index) {
                            return value;
                        }).catch(function (error) {
                            return Observable.Observable.throw(error);
                        });
                    }
                    else {
                        Observable.Observable.throw(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelId));
                    }
                }
                else {
                    return Observable.Observable.throw(new Error("Could not delete " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelName));
                }
            };
        //PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}
        /**
         *
         * @param dataModelName Data model name which is to be update
         * @param dataModelId Data model id which is to be updated
         * @param dataModelObj Data Model object which is to be inserted
         */
        /**
         *
         * @param {?} dataModelName Data model name which is to be update
         * @param {?} dataModelId Data model id which is to be updated
         * @param {?} dataModelObj Data Model object which is to be inserted
         * @return {?}
         */
        NDataModelService.prototype.updateById = /**
         *
         * @param {?} dataModelName Data model name which is to be update
         * @param {?} dataModelId Data model id which is to be updated
         * @param {?} dataModelObj Data Model object which is to be inserted
         * @return {?}
         */
            function (dataModelName, dataModelId, dataModelObj) {
                if (dataModelName) {
                    if (dataModelId) {
                        // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                        var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                        var /** @type {?} */ dmObj = Object.assign({}, dataModelObj);
                        delete dmObj['_id'];
                        return this.http.patch(modelNameUrl, dmObj).map(function (value, index) {
                            return value;
                        }).catch(function (error) {
                            return Observable.Observable.throw(error);
                        });
                    }
                    else {
                        Observable.Observable.throw(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelId));
                    }
                }
                else {
                    return Observable.Observable.throw(new Error("Could not delete " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelName));
                }
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        NDataModelService.prototype.toQueryString = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                var /** @type {?} */ parts = [];
                for (var /** @type {?} */ i in obj) {
                    if (obj.hasOwnProperty(i) && this.checkIfValid(obj[i])) {
                        parts.push((i) + '=' + JSON.stringify(obj[i]));
                    }
                }
                return parts.join('&');
            };
        /**
         * @param {?} value
         * @return {?}
         */
        NDataModelService.prototype.checkIfValid = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value === undefined || value == null) {
                    return false;
                }
                else {
                    return true;
                }
            };
        /**
         * @param {?} dataModelName
         * @return {?}
         */
        NDataModelService.prototype.getDataSourceURL = /**
         * @param {?} dataModelName
         * @return {?}
         */
            function (dataModelName) {
                if (!this.dmDs) {
                    this.dmDs = window['neutrinos']['dataSource'];
                }
                var /** @type {?} */ dsDm = this.dmDs[dataModelName];
                var /** @type {?} */ properties = this.systemService.properties;
                if (dsDm) {
                    return properties.baseUrl + properties.tenantName + '/datamodel/' + dsDm + '/' + properties.appName + '/';
                }
                else {
                    return this.systemService.getDataModelUrl();
                }
            };
        NDataModelService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NDataModelService.ctorParameters = function () {
            return [
                { type: http.HttpClient, },
            ];
        };
        return NDataModelService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NHttpService = (function () {
        function NHttpService(nHTTPLoader, inj, nLocalStorageService, nTokenService) {
            this.nHTTPLoader = nHTTPLoader;
            this.inj = inj;
            this.nLocalStorageService = nLocalStorageService;
            this.nTokenService = nTokenService;
            this.timeout = 90000;
            this.isRefreshingToken = false;
            this.tokenSubject = new Rx.BehaviorSubject(null);
            this.systemService = NSystemService.getInstance();
            this.nSessionStorage = new NSessionStorageService();
            this.appProperties = this.systemService.getVal('properties');
            this.nPubSubService = new NPubSubService();
        }
        /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        NHttpService.prototype.intercept = /**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
            function (req, next) {
                var _this = this;
                this.requestInterceptor();
                // Pass on the cloned request instead of the original request.
                return next.handle(this.requestOptions(req))
                    .timeout(this.timeout)
                    .catch(function (error) { return _this.onCatch(error, req, next); })
                    .finally(function () {
                    _this.onFinally();
                });
            };
        /**
         * @param {?} error
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        NHttpService.prototype.updateToken = /**
         * @param {?} error
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
            function (error, req, next) {
                var _this = this;
                if (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||
                    this.appProperties.appAuthenticationStrategy === 'localAuth') {
                    if (!this.isRefreshingToken) {
                        this.isRefreshingToken = true;
                        // Reset here so that the following requests wait until the token
                        // comes back from the refreshToken call.
                        this.tokenSubject.next(null);
                        return this.refreshToken()
                            .switchMap(function (tokensObj) {
                            if (tokensObj) {
                                _this.nTokenService.updateTokens(tokensObj);
                                var /** @type {?} */ newToken = tokensObj['accessToken'];
                                _this.tokenSubject.next(newToken);
                                return next.handle(_this.requestOptions(req));
                            }
                            return Rx.Observable.throw(new Error('Can\'t refresh the token'));
                        })
                            .catch(function (err) { return _this.onCatchError(err); })
                            .finally(function () { return _this.isRefreshingToken = false; });
                    }
                    else {
                        return this.tokenSubject
                            .filter(function (token) { return token != null; })
                            .take(1)
                            .switchMap(function (token) { return next.handle(_this.requestOptions(req)); });
                    }
                }
                else {
                    return this.onCatchError(error);
                }
            };
        /**
         * @return {?}
         */
        NHttpService.prototype.refreshToken = /**
         * @return {?}
         */
            function () {
                var /** @type {?} */ http$$1 = this.inj.get(http.HttpClient);
                var /** @type {?} */ appProperties = this.systemService.getVal('properties');
                var /** @type {?} */ refreshUrl = this.systemService.getAuthUrl() + appProperties.appName + '/refresh';
                var /** @type {?} */ body = {
                    'platformDetails': this.systemService.getPlatformDetails(this.systemService.checkDevice()),
                    'userKey': this.nSessionStorage.getValue('userObj')['userKey'],
                    'refreshToken': this.nSessionStorage.getValue('refreshToken')
                };
                body.platformDetails['uuid'] = this.nLocalStorageService.getValue('uuid');
                return http$$1.post(refreshUrl, body);
            };
        /**
         * Request options.
         * @param {?=} req
         * @return {?} HttpRequest
         */
        NHttpService.prototype.requestOptions = /**
         * Request options.
         * @param {?=} req
         * @return {?} HttpRequest
         */
            function (req) {
                var /** @type {?} */ headers = req.headers;
                if (req.headers == null) {
                    headers = new http.HttpHeaders();
                }
                req = req.clone({
                    url: this.getFullUrl(req.url),
                    headers: headers
                });
                var /** @type {?} */ baseUrl = NSystemService.getInstance().getVal('baseUrl');
                var /** @type {?} */ isArt = (baseUrl !== '' && req.url.includes(baseUrl));
                return isArt ? this.addDefaultHeaders(req) : req;
            };
        /**
         * Default options.
         * @param {?} req
         * @return {?} HttpHeadedrs
         */
        NHttpService.prototype.addDefaultHeaders = /**
         * Default options.
         * @param {?} req
         * @return {?} HttpHeadedrs
         */
            function (req) {
                /**
                     * TODO: Add all default Headers over here
                     */
                if (!req.headers.has('Access-Control-Allow-Origin')) {
                    req.headers = req.headers.set('Access-Control-Allow-Origin', '*');
                }
                if (!req.headers.has('Content-Type')) {
                    req.headers = req.headers.set('Content-Type', 'application/json');
                }
                else if (req.headers.has('Content-Type') && (req.headers.get('Content-Type') === 'no-content')) {
                    req.headers = req.headers.delete('Content-Type');
                }
                if (!req.headers.has('Accept')) {
                    req.headers = req.headers.set('Accept', 'application/json');
                }
                if (!req.headers.has('Authorization')) {
                    this.appProperties = this.systemService.getVal('properties');
                    if (this.appProperties && this.appProperties.appAuthenticationStrategy === 'basicAuth') {
                        var /** @type {?} */ username = void 0, /** @type {?} */ password = void 0;
                        if (this.appProperties.basicAuthUser && this.appProperties.basicAuthPassword) {
                            username = this.appProperties.basicAuthUser;
                            password = this.appProperties.basicAuthPassword;
                        }
                        else {
                            username = "bhive-art-proxyuser";
                            password = "password";
                            console.warn("Authentication strategy: Basic Auth. basicAuthUser and basicAuthPassword are not configured in environment. Setting default values.");
                        }
                        req.headers = req.headers.set('Authorization', 'Basic ' + btoa(username + ":" + password));
                    }
                    else if (this.appProperties && (this.appProperties.appAuthenticationStrategy === 'activeDirectory' ||
                        this.appProperties.appAuthenticationStrategy === 'localAuth')) {
                        if (this.nSessionStorage.getValue('accessToken')) {
                            req.headers = req.headers.set('Authorization', 'Bearer ' + this.nSessionStorage.getValue('accessToken'));
                        }
                    }
                }
                return req;
            };
        /**
         * Build API url.
         * @param {?} url
         * @return {?} string
         */
        NHttpService.prototype.getFullUrl = /**
         * Build API url.
         * @param {?} url
         * @return {?} string
         */
            function (url) {
                // return full URL to API here
                return url;
            };
        /**
         * Request interceptor.
         * @return {?}
         */
        NHttpService.prototype.requestInterceptor = /**
         * Request interceptor.
         * @return {?}
         */
            function () {
                this.nHTTPLoader.isHTTPRequestInProgress(true);
            };
        /**
         * Response interceptor.
         * @return {?}
         */
        NHttpService.prototype.responseInterceptor = /**
         * Response interceptor.
         * @return {?}
         */
            function () {
                this.nHTTPLoader.isHTTPRequestInProgress(false);
            };
        /**
         * Error handler.
         * @param {?} error
         * @param {?} req
         * @param {?} next
         * @return {?} ErrorObservable
         */
        NHttpService.prototype.onCatch = /**
         * Error handler.
         * @param {?} error
         * @param {?} req
         * @param {?} next
         * @return {?} ErrorObservable
         */
            function (error, req, next) {
                if (error instanceof http.HttpErrorResponse) {
                    if (((error)).status === 403 && ((error)).error.message === 'jwt expired') {
                        return this.updateToken(error, req, next);
                    }
                    else {
                        return this.onSubscribeError(error);
                    }
                }
                else {
                    return this.onSubscribeError(error);
                }
            };
        /**
         * onSubscribeError
         * @param {?} err
         * @return {?}
         */
        NHttpService.prototype.onSubscribeError = /**
         * onSubscribeError
         * @param {?} err
         * @return {?}
         */
            function (err) {
                this.nHTTPLoader.alertError(err);
                return this.onCatchError(err);
            };
        /**
         * onFinally
         * @return {?}
         */
        NHttpService.prototype.onFinally = /**
         * onFinally
         * @return {?}
         */
            function () {
                this.responseInterceptor();
            };
        /**
         * @param {?} error
         * @return {?}
         */
        NHttpService.prototype.onCatchError = /**
         * @param {?} error
         * @return {?}
         */
            function (error) {
                return Rx.Observable.throw(error);
            };
        NHttpService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NHttpService.ctorParameters = function () {
            return [
                { type: NHTTPLoaderService, },
                { type: core.Injector, },
                { type: NLocalStorageService, },
                { type: NTokenService, },
            ];
        };
        return NHttpService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var NSnackbarService = (function () {
        function NSnackbarService(nPubSubService) {
            var _this = this;
            this.nPubSubService = nPubSubService;
            this.snackService = new Subject.Subject();
            if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {
                this.snackBarListner = this.nPubSubService.$sub('openSnackBar', function (msg) {
                    _this.openSnackBar(msg);
                });
            }
        }
        /**
         * @return {?}
         */
        NSnackbarService.prototype.get = /**
         * @return {?}
         */
            function () {
                return this.snackService.asObservable();
            };
        /**
         * @param {?} data
         * @return {?}
         */
        NSnackbarService.prototype.add = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.snackService.next({
                    action: 'add',
                    data: data
                });
            };
        /**
         * @param {?} id
         * @return {?}
         */
        NSnackbarService.prototype.remove = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                this.snackService.next({ action: 'remove', id: id });
            };
        /**
         * @return {?}
         */
        NSnackbarService.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.snackService.next({ action: 'clear' });
            };
        /**
         * @param {?} message
         * @param {?=} timeout
         * @return {?}
         */
        NSnackbarService.prototype.openSnackBar = /**
         * @param {?} message
         * @param {?=} timeout
         * @return {?}
         */
            function (message, timeout) {
                this.add({
                    msg: message,
                    timeout: timeout || 5000,
                    action: {
                        text: 'Close',
                        onClick: function (snack) {
                        },
                    },
                    onAdd: function (snack) {
                    },
                    onRemove: function (snack) {
                    }
                });
            };
        NSnackbarService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        NSnackbarService.ctorParameters = function () {
            return [
                { type: NPubSubService, },
            ];
        };
        return NSnackbarService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SnackComponent = (function () {
        function SnackComponent() {
        }
        SnackComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'n-snack',
                        template: "\n     <div class=\"snack\" [ngStyle]=\"{background: background ? background : '#323232' , color: color ? color : '#fff'}\" [ngClass]=\" ['snackbar-layout', 'customClass' ]\">\n          <ng-content></ng-content>\n       </div> \n  ",
                        styles: [".snack-action{cursor:pointer;color:#2196f3;font-weight:700}.container{display:flex;flex-direction:row;flex-wrap:wrap}.child{width:60%;flex:1 0;margin-right:.5em}.snackbars.bottom-center{align-items:middle;left:50%;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);bottom:1px;align-items:center}.snackbars{position:fixed;z-index:99999;max-width:100%;word-wrap:break-word;display:inline;font-family:Roboto;letter-spacing:1px}.snack{padding:1em;border-radius:.3em;max-height:50vh;overflow:auto}"]
                    },] },
        ];
        /** @nocollapse */
        SnackComponent.propDecorators = {
            "background": [{ type: core.Input },],
            "color": [{ type: core.Input },],
            "customClass": [{ type: core.Input },],
        };
        return SnackComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var SnackbarComponent = (function () {
        function SnackbarComponent(snackbarService) {
            var _this = this;
            this.snackbarService = snackbarService;
            this.max = 1;
            this.onAdd = new core.EventEmitter();
            this.onRemove = new core.EventEmitter();
            this.onClear = new core.EventEmitter();
            this.snacks = [];
            this.snackbarService.get()
                .subscribe(function (snack) {
                if (snack.action === 'add') {
                    _this.add(snack.data);
                }
                else if (snack.action === 'remove') {
                    _this.remove(snack.id);
                }
                else if (snack.action === 'clear') {
                    _this.clear();
                }
            });
        }
        /**
         * @param {?} snack
         * @return {?}
         */
        SnackbarComponent.prototype.add = /**
         * @param {?} snack
         * @return {?}
         */
            function (snack) {
                var _this = this;
                var /** @type {?} */ timeout;
                var /** @type {?} */ id = this.uuid();
                if (this.max && this.max > 0 && this.snacks.length === this.max) {
                    this.remove(this.snacks[0].id);
                }
                if (snack.timeout || this.timeout) {
                    timeout = setTimeout(function () {
                        _this.remove(id);
                    }, snack.timeout || this.timeout);
                }
                var /** @type {?} */ data = Object.assign({ id: id, timeoutObj: timeout }, snack);
                if (snack.action) {
                    var /** @type {?} */ that_1 = this;
                    var /** @type {?} */ fcn_1 = snack.action.onClick || new Function();
                    snack.action.onClick = function () {
                        fcn_1(data);
                        that_1.remove(id);
                    };
                }
                if (snack.onAdd) {
                    snack.onAdd(data);
                }
                if (this.onAdd) {
                    this.onAdd.emit(data);
                }
                this.snacks.push(data);
            };
        /**
         * @param {?} id
         * @return {?}
         */
        SnackbarComponent.prototype.remove = /**
         * @param {?} id
         * @return {?}
         */
            function (id) {
                var /** @type {?} */ snack = this.snacks.find(function (obj) { return obj.id === id; });
                if (snack) {
                    if (snack.onRemove) {
                        snack.onRemove(snack);
                    }
                    if (this.onRemove) {
                        this.onRemove.emit(snack);
                    }
                    if (snack.timeoutObj) {
                        clearTimeout(snack.timeoutObj);
                    }
                }
                this.snacks = this.snacks.filter(function (obj) { return obj.id !== id; });
            };
        /**
         * @return {?}
         */
        SnackbarComponent.prototype.clear = /**
         * @return {?}
         */
            function () {
                // this.snacks.forEach(snack => {
                //   this.remove(snack.id);
                // });
                this.snacks = [];
                if (this.onClear) {
                    this.onClear.emit(true);
                }
            };
        /**
         * @return {?}
         */
        SnackbarComponent.prototype.uuid = /**
         * @return {?}
         */
            function () {
                // tslint:disable:no-bitwise
                return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                    var /** @type {?} */ r = Math.random() * 16 | 0, /** @type {?} */ v = c === 'x' ? r : (r & 0x3 | 0x8);
                    return v.toString(16);
                });
                // tslint:enable:no-bitwise
            };
        /**
         * @param {?} background
         * @return {?}
         */
        SnackbarComponent.prototype.calcTextColor = /**
         * @param {?} background
         * @return {?}
         */
            function (background) {
                if (!background) {
                    return null;
                }
                /**
                 * @param {?} hex
                 * @return {?}
                 */
                function hexToRgb(hex) {
                    var /** @type {?} */ shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
                    hex = hex.replace(shorthandRegex, function (m, r, g, b) {
                        return r + r + g + g + b + b;
                    });
                    var /** @type {?} */ result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
                    return result ? {
                        r: parseInt(result[1], 16),
                        g: parseInt(result[2], 16),
                        b: parseInt(result[3], 16)
                    } : null;
                }
                var /** @type {?} */ rgb = hexToRgb(background);
                if (!rgb) {
                    return null;
                }
                var /** @type {?} */ color = [rgb.r / 255, rgb.g / 255, rgb.b / 255];
                for (var /** @type {?} */ i = 0; i < color.length; ++i) {
                    if (color[i] <= 0.03928) {
                        color[i] = color[i] / 12.92;
                    }
                    else {
                        color[i] = Math.pow((color[i] + 0.055) / 1.055, 2.4);
                    }
                }
                var /** @type {?} */ l = 0.2126 * color[0] + 0.7152 * color[1] + 0.0722 * color[2];
                if (l > 0.179) {
                    return '#000';
                }
                else {
                    return '#fff';
                }
            };
        SnackbarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'n-snackbar',
                        template: "\n      <div class=\"snackbars\" [ngClass]=\"position || 'bottom-center'\">\n          <n-snack   *ngFor=\"let snackbar of snacks\" [background]=\"snackbar.background || background\"\n                        [customClass]=\"snackbar.customClass || customClass\"\n                        [color]=\"snackbar.color || color || calcTextColor(snackbar.background || background)\">\n              <div class=\"container\">\n              <div class=\"snack-text child\" >\n                  {{snackbar.msg}}\n              </div>\n              <div *ngIf=\"snackbar.action.text\" class=\"snack-action\" (click)=\"snackbar.action.onClick()\"\n                   [ngStyle]=\"{color: snackbar.action.color || accent}\">\n                  {{snackbar.action.text}}\n              </div>\n              </div>\n          </n-snack>\n      </div>\n  ",
                        styles: [".snack-action{cursor:pointer;color:#2196f3;font-weight:700}.container{display:flex;flex-direction:row;flex-wrap:wrap}.child{width:60%;flex:1 0;margin-right:.5em}.snackbars.bottom-center{align-items:middle;left:50%;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);bottom:1px;align-items:center}.snackbars{position:fixed;z-index:99999;max-width:100%;word-wrap:break-word;display:inline;font-family:Roboto;letter-spacing:1px}.snack{padding:1em;border-radius:.3em;max-height:50vh;overflow:auto}"]
                    },] },
        ];
        /** @nocollapse */
        SnackbarComponent.ctorParameters = function () {
            return [
                { type: NSnackbarService, },
            ];
        };
        SnackbarComponent.propDecorators = {
            "position": [{ type: core.Input },],
            "max": [{ type: core.Input },],
            "background": [{ type: core.Input },],
            "accent": [{ type: core.Input },],
            "color": [{ type: core.Input },],
            "customClass": [{ type: core.Input },],
            "timeout": [{ type: core.Input },],
            "onAdd": [{ type: core.Output },],
            "onRemove": [{ type: core.Output },],
            "onClear": [{ type: core.Output },],
        };
        return SnackbarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    /**
     * @param {?} startupService
     * @return {?}
     */
    function startupServiceFactory(startupService) {
        var /** @type {?} */ res = function () {
            // console.log('module before initstorage call');
            return startupService.initStorage();
        };
        return res;
    }
    var NeutrinosSeedServicesModule = (function () {
        function NeutrinosSeedServicesModule() {
        }
        NeutrinosSeedServicesModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            http.HttpClientModule,
                            router.RouterModule,
                            http$1.HttpModule,
                            ngforage.NgForageModule.forRoot()
                        ],
                        providers: [
                            {
                                provide: http.HTTP_INTERCEPTORS,
                                useClass: NHttpService,
                                multi: true
                            },
                            {
                                // Provider for APP_INITIALIZER
                                provide: core.APP_INITIALIZER,
                                useFactory: startupServiceFactory,
                                deps: [NLocalStorageService],
                                multi: true
                            },
                            NAuthGuardService,
                            NDataModelService,
                            NHttpService,
                            NHTTPLoaderService,
                            NLocalStorageService,
                            NLoginService,
                            NLogoutService,
                            NNotificationService,
                            NSnackbarService,
                            NPubSubService,
                            NSessionStorageService,
                            NTokenService
                        ],
                        declarations: [
                            SnackComponent,
                            SnackbarComponent
                        ],
                        exports: [
                            SnackComponent,
                            SnackbarComponent
                        ]
                    },] },
        ];
        return NeutrinosSeedServicesModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.NAuthGuardService = NAuthGuardService;
    exports.NDataModelService = NDataModelService;
    exports.NHttpService = NHttpService;
    exports.NHTTPLoaderService = NHTTPLoaderService;
    exports.NLocalStorageService = NLocalStorageService;
    exports.NLoginService = NLoginService;
    exports.NLogoutService = NLogoutService;
    exports.NNotificationService = NNotificationService;
    exports.NSnackbarService = NSnackbarService;
    exports.NSystemService = NSystemService;
    exports.NTokenService = NTokenService;
    exports.NUtility = NUtility;
    exports.NPubSubService = NPubSubService;
    exports.NSessionStorageService = NSessionStorageService;
    exports.SnackbarComponent = SnackbarComponent;
    exports.startupServiceFactory = startupServiceFactory;
    exports.NeutrinosSeedServicesModule = NeutrinosSeedServicesModule;
    exports.ɵa = SnackComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
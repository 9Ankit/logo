/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NSessionStorageService } from './n-sessionStorage.service';
import { NLocalStorageService } from './n-localStorage.service';
import { Injectable } from '@angular/core';
var NTokenService = /** @class */ (function () {
    // nLocalStorageService: NLocalStorageService;
    function NTokenService(nLocalStorageService) {
        this.nLocalStorageService = nLocalStorageService;
        this.nSessionStorage = new NSessionStorageService();
        // this.nLocalStorageService = new NLocalStorageService();
    }
    /**
     * @param {?} tokensObj
     * @param {?=} isRemember
     * @return {?}
     */
    NTokenService.prototype.updateTokens = /**
     * @param {?} tokensObj
     * @param {?=} isRemember
     * @return {?}
     */
    function (tokensObj, isRemember) {
        var /** @type {?} */ userObj = this.decodeToken(tokensObj['accessToken']);
        this.nSessionStorage.setValue('accessToken', tokensObj['accessToken']);
        this.nSessionStorage.setValue('refreshToken', tokensObj['refreshToken']);
        this.nSessionStorage.setValue('userObj', JSON.stringify(userObj));
        if ((isRemember || this.nLocalStorageService.getValue('accessToken'))) {
            this.nLocalStorageService.setValue('accessToken', tokensObj['accessToken']);
            this.nLocalStorageService.setValue('refreshToken', tokensObj['refreshToken']);
            this.nLocalStorageService.setValue('userObj', JSON.stringify(userObj));
        }
    };
    /**
     * @return {?}
     */
    NTokenService.prototype.updateSessionStorage = /**
     * @return {?}
     */
    function () {
        this.updateTokens(this.nLocalStorageService.getStorage(), true);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    NTokenService.prototype.urlBase64Decode = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        var /** @type {?} */ output = str.replace(/-/g, '+').replace(/_/g, '/');
        switch (output.length % 4) {
            case 0: {
                break;
            }
            case 2: {
                output += '==';
                break;
            }
            case 3: {
                output += '=';
                break;
            }
            default: {
                throw 'Illegal base64url string!';
            }
        }
        return this.b64DecodeUnicode(output);
    };
    /**
     * @param {?} str
     * @return {?}
     */
    NTokenService.prototype.b64decode = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        var /** @type {?} */ chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
        var /** @type {?} */ output = '';
        str = String(str).replace(/=+$/, '');
        if (str.length % 4 == 1) {
            throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");
        }
        for (
        // initialize result and counters
        var /** @type {?} */ bc = 0, /** @type {?} */ bs = void 0, /** @type {?} */ buffer = void 0, /** @type {?} */ idx = 0; 
        // get next character
        buffer = str.charAt(idx++); 
        // character found in table? initialize bit storage and add its ascii value;
        ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
            // and if not first of each 4 characters,
            // convert the first 8 bits to one ascii character
            bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
            // try to find character in table (0-63, not found => -1)
            buffer = chars.indexOf(buffer);
        }
        return output;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    NTokenService.prototype.b64DecodeUnicode = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return decodeURIComponent(Array.prototype.map.call(this.b64decode(str), function (c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
    };
    /**
     * @param {?} token
     * @return {?}
     */
    NTokenService.prototype.decodeToken = /**
     * @param {?} token
     * @return {?}
     */
    function (token) {
        var /** @type {?} */ parts = token.split('.');
        if (parts.length !== 3) {
            throw new Error('JWT must have 3 parts');
        }
        var /** @type {?} */ decoded = this.urlBase64Decode(parts[1]);
        if (!decoded) {
            throw new Error('Cannot decode the token');
        }
        return JSON.parse(decoded);
    };
    /**
     * @param {?} token
     * @return {?}
     */
    NTokenService.prototype.getTokenExpirationDate = /**
     * @param {?} token
     * @return {?}
     */
    function (token) {
        var /** @type {?} */ decoded;
        decoded = this.decodeToken(token);
        if (!decoded.hasOwnProperty('exp')) {
            return null;
        }
        var /** @type {?} */ date = new Date(0); // The 0 here is the key, which sets the date to the epoch
        date.setUTCSeconds(decoded.exp);
        return date;
    };
    /**
     * @param {?} token
     * @param {?=} offsetSeconds
     * @return {?}
     */
    NTokenService.prototype.isTokenExpired = /**
     * @param {?} token
     * @param {?=} offsetSeconds
     * @return {?}
     */
    function (token, offsetSeconds) {
        var /** @type {?} */ date = this.getTokenExpirationDate(token);
        offsetSeconds = offsetSeconds || 0;
        if (date == null) {
            return false;
        }
        // Token expired?
        return !(date.valueOf() > (new Date().valueOf() + (offsetSeconds * 1000)));
    };
    NTokenService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NTokenService.ctorParameters = function () { return [
        { type: NLocalStorageService, },
    ]; };
    return NTokenService;
}());
export { NTokenService };
function NTokenService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NTokenService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NTokenService.ctorParameters;
    /** @type {?} */
    NTokenService.prototype.nSessionStorage;
    /** @type {?} */
    NTokenService.prototype.nLocalStorageService;
}

//# sourceMappingURL=data:application/json;base64,
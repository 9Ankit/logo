/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { NSnackbarService } from '../../n-snackbar.service';
var SnackbarComponent = /** @class */ (function () {
    function SnackbarComponent(snackbarService) {
        var _this = this;
        this.snackbarService = snackbarService;
        this.max = 1;
        this.onAdd = new EventEmitter();
        this.onRemove = new EventEmitter();
        this.onClear = new EventEmitter();
        this.snacks = [];
        this.snackbarService.get()
            .subscribe(function (snack) {
            if (snack.action === 'add') {
                _this.add(snack.data);
            }
            else if (snack.action === 'remove') {
                _this.remove(snack.id);
            }
            else if (snack.action === 'clear') {
                _this.clear();
            }
        });
    }
    /**
     * @param {?} snack
     * @return {?}
     */
    SnackbarComponent.prototype.add = /**
     * @param {?} snack
     * @return {?}
     */
    function (snack) {
        var _this = this;
        var /** @type {?} */ timeout;
        var /** @type {?} */ id = this.uuid();
        if (this.max && this.max > 0 && this.snacks.length === this.max) {
            this.remove(this.snacks[0].id);
        }
        if (snack.timeout || this.timeout) {
            timeout = setTimeout(function () {
                _this.remove(id);
            }, snack.timeout || this.timeout);
        }
        var /** @type {?} */ data = Object.assign({ id: id, timeoutObj: timeout }, snack);
        if (snack.action) {
            var /** @type {?} */ that_1 = this;
            var /** @type {?} */ fcn_1 = snack.action.onClick || new Function();
            snack.action.onClick = function () {
                fcn_1(data);
                that_1.remove(id);
            };
        }
        if (snack.onAdd) {
            snack.onAdd(data);
        }
        if (this.onAdd) {
            this.onAdd.emit(data);
        }
        this.snacks.push(data);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    SnackbarComponent.prototype.remove = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var /** @type {?} */ snack = this.snacks.find(function (obj) { return obj.id === id; });
        if (snack) {
            if (snack.onRemove) {
                snack.onRemove(snack);
            }
            if (this.onRemove) {
                this.onRemove.emit(snack);
            }
            if (snack.timeoutObj) {
                clearTimeout(snack.timeoutObj);
            }
        }
        this.snacks = this.snacks.filter(function (obj) { return obj.id !== id; });
    };
    /**
     * @return {?}
     */
    SnackbarComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        // this.snacks.forEach(snack => {
        //   this.remove(snack.id);
        // });
        this.snacks = [];
        if (this.onClear) {
            this.onClear.emit(true);
        }
    };
    /**
     * @return {?}
     */
    SnackbarComponent.prototype.uuid = /**
     * @return {?}
     */
    function () {
        // tslint:disable:no-bitwise
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var /** @type {?} */ r = Math.random() * 16 | 0, /** @type {?} */ v = c === 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
        // tslint:enable:no-bitwise
    };
    /**
     * @param {?} background
     * @return {?}
     */
    SnackbarComponent.prototype.calcTextColor = /**
     * @param {?} background
     * @return {?}
     */
    function (background) {
        if (!background) {
            return null;
        }
        /**
         * @param {?} hex
         * @return {?}
         */
        function hexToRgb(hex) {
            var /** @type {?} */ shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
            hex = hex.replace(shorthandRegex, function (m, r, g, b) {
                return r + r + g + g + b + b;
            });
            var /** @type {?} */ result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
            return result ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16)
            } : null;
        }
        var /** @type {?} */ rgb = hexToRgb(background);
        if (!rgb) {
            return null;
        }
        var /** @type {?} */ color = [rgb.r / 255, rgb.g / 255, rgb.b / 255];
        for (var /** @type {?} */ i = 0; i < color.length; ++i) {
            if (color[i] <= 0.03928) {
                color[i] = color[i] / 12.92;
            }
            else {
                color[i] = Math.pow((color[i] + 0.055) / 1.055, 2.4);
            }
        }
        var /** @type {?} */ l = 0.2126 * color[0] + 0.7152 * color[1] + 0.0722 * color[2];
        if (l > 0.179) {
            return '#000';
        }
        else {
            return '#fff';
        }
    };
    SnackbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'n-snackbar',
                    template: "\n      <div class=\"snackbars\" [ngClass]=\"position || 'bottom-center'\">\n          <n-snack   *ngFor=\"let snackbar of snacks\" [background]=\"snackbar.background || background\"\n                        [customClass]=\"snackbar.customClass || customClass\"\n                        [color]=\"snackbar.color || color || calcTextColor(snackbar.background || background)\">\n              <div class=\"container\">\n              <div class=\"snack-text child\" >\n                  {{snackbar.msg}}\n              </div>\n              <div *ngIf=\"snackbar.action.text\" class=\"snack-action\" (click)=\"snackbar.action.onClick()\"\n                   [ngStyle]=\"{color: snackbar.action.color || accent}\">\n                  {{snackbar.action.text}}\n              </div>\n              </div>\n          </n-snack>\n      </div>\n  ",
                    styles: [".snack-action{cursor:pointer;color:#2196f3;font-weight:700}.container{display:flex;flex-direction:row;flex-wrap:wrap}.child{width:60%;flex:1 0;margin-right:.5em}.snackbars.bottom-center{align-items:middle;left:50%;-webkit-transform:translate(-50%,0);transform:translate(-50%,0);bottom:1px;align-items:center}.snackbars{position:fixed;z-index:99999;max-width:100%;word-wrap:break-word;display:inline;font-family:Roboto;letter-spacing:1px}.snack{padding:1em;border-radius:.3em;max-height:50vh;overflow:auto}"]
                },] },
    ];
    /** @nocollapse */
    SnackbarComponent.ctorParameters = function () { return [
        { type: NSnackbarService, },
    ]; };
    SnackbarComponent.propDecorators = {
        "position": [{ type: Input },],
        "max": [{ type: Input },],
        "background": [{ type: Input },],
        "accent": [{ type: Input },],
        "color": [{ type: Input },],
        "customClass": [{ type: Input },],
        "timeout": [{ type: Input },],
        "onAdd": [{ type: Output },],
        "onRemove": [{ type: Output },],
        "onClear": [{ type: Output },],
    };
    return SnackbarComponent;
}());
export { SnackbarComponent };
function SnackbarComponent_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    SnackbarComponent.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    SnackbarComponent.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    SnackbarComponent.propDecorators;
    /** @type {?} */
    SnackbarComponent.prototype.position;
    /** @type {?} */
    SnackbarComponent.prototype.max;
    /** @type {?} */
    SnackbarComponent.prototype.background;
    /** @type {?} */
    SnackbarComponent.prototype.accent;
    /** @type {?} */
    SnackbarComponent.prototype.color;
    /** @type {?} */
    SnackbarComponent.prototype.customClass;
    /** @type {?} */
    SnackbarComponent.prototype.timeout;
    /** @type {?} */
    SnackbarComponent.prototype.onAdd;
    /** @type {?} */
    SnackbarComponent.prototype.onRemove;
    /** @type {?} */
    SnackbarComponent.prototype.onClear;
    /** @type {?} */
    SnackbarComponent.prototype.snacks;
    /** @type {?} */
    SnackbarComponent.prototype.snackbarService;
}

//# sourceMappingURL=data:application/json;base64,
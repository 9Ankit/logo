/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs/Observable';
import { Injectable } from '@angular/core';
import { NSystemService } from './n-system.service';
var NDataModelService = /** @class */ (function () {
    function NDataModelService(http) {
        this.http = http;
        this.invalidDataModelName = 'Invalid data model name.';
        this.invalidDataModelId = 'Invalid data model id.';
        this.invalidDataModelObj = 'Invalid data model object.';
        this.systemService = NSystemService.getInstance();
    }
    // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
    /**
     *
     * @param dataModelName
     * @param filter The filter query parameter allows to specify conditions on the documents to return.
     * The filter qparam value is any mongodb query… Defaults to {}
     * @param keys Projections to be applited on mongo db.
     * @param sort sort to be applied on the query results. Defaults to {}
     * @param pagenumber Page number for paginated queries. Defaults to 1
     * @param pagesize Size of each page to be returned. Defaults to 100.
     */
    /**
     *
     * @param {?} dataModelName
     * @param {?=} filter The filter query parameter allows to specify conditions on the documents to return.
     * The filter qparam value is any mongodb query… Defaults to {}
     * @param {?=} keys Projections to be applited on mongo db.
     * @param {?=} sort sort to be applied on the query results. Defaults to {}
     * @param {?=} pagenumber Page number for paginated queries. Defaults to 1
     * @param {?=} pagesize Size of each page to be returned. Defaults to 100.
     * @return {?}
     */
    NDataModelService.prototype.get = /**
     *
     * @param {?} dataModelName
     * @param {?=} filter The filter query parameter allows to specify conditions on the documents to return.
     * The filter qparam value is any mongodb query… Defaults to {}
     * @param {?=} keys Projections to be applited on mongo db.
     * @param {?=} sort sort to be applied on the query results. Defaults to {}
     * @param {?=} pagenumber Page number for paginated queries. Defaults to 1
     * @param {?=} pagesize Size of each page to be returned. Defaults to 100.
     * @return {?}
     */
    function (dataModelName, filter, keys, sort, pagenumber, pagesize) {
        if (dataModelName) {
            // let modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
            var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
            if (this.checkIfValid(filter) || this.checkIfValid(keys) || this.checkIfValid(sort) ||
                this.checkIfValid(pagenumber) || this.checkIfValid(pagesize)) {
                var /** @type {?} */ queryString = "" + this.toQueryString({
                    'filter': filter,
                    'keys': keys,
                    'sort': sort,
                    'pagenumber': pagenumber,
                    'pagesize': pagesize
                });
                if (queryString === '') {
                    queryString += '?filter={}';
                }
                else {
                    queryString = '?'.concat(queryString);
                }
                modelNameUrl += queryString;
            }
            return this.http.get(modelNameUrl).map(function (value, index) {
                return value;
            }).catch(function (error) {
                return Observable.throw(error);
            });
        }
        else {
            return Observable.throw(new Error("Could not get " + dataModelName + ". " + this.invalidDataModelName));
        }
    };
    // PUT /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
    /**
     *
     * @param dataModelName Data model name of the app
     * @param dataModelObj Data Model object which is to be inserted
     */
    /**
     *
     * @param {?} dataModelName Data model name of the app
     * @param {?} dataModelObj Data Model object which is to be inserted
     * @return {?}
     */
    NDataModelService.prototype.put = /**
     *
     * @param {?} dataModelName Data model name of the app
     * @param {?} dataModelObj Data Model object which is to be inserted
     * @return {?}
     */
    function (dataModelName, dataModelObj) {
        if (dataModelName) {
            if (dataModelObj) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
                var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
                return this.http.put(modelNameUrl, dataModelObj).map(function (value, index) {
                    return value;
                }).catch(function (error) {
                    return Observable.throw(error);
                });
            }
            else {
                return Observable.throw(new Error("Could not put " + dataModelObj + " in " + dataModelName + ". " + this.invalidDataModelObj));
            }
        }
        else {
            return Observable.throw(new Error("Could not put " + dataModelObj + " in " + dataModelName + ". " + this.invalidDataModelName));
        }
    };
    // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
    /**
     *
     * @param dataModelName
     * @param filter
     */
    /**
     *
     * @param {?} dataModelName
     * @param {?} filter
     * @return {?}
     */
    NDataModelService.prototype.delete = /**
     *
     * @param {?} dataModelName
     * @param {?} filter
     * @return {?}
     */
    function (dataModelName, filter) {
        var /** @type {?} */ modelNameUrl;
        if (dataModelName) {
            // modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
            modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
            if (this.checkIfValid(filter) && filter != '') {
                modelNameUrl += "?filter=" + filter;
            }
            else {
                modelNameUrl += '?filter={}';
            }
            return this.http.delete(modelNameUrl).map(function (value, index) {
                return value;
            }).catch(function (error) {
                return Observable.throw(error);
            });
        }
        else {
            return Observable.throw(new Error("Could not delete " + dataModelName + ". " + this.invalidDataModelName));
        }
    };
    // PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}
    /**
     *
     * @param dataModelName Data model name which is to be updated
     * @param dataModelObj New data model object
     */
    /**
     *
     * @param {?} dataModelName Data model name which is to be updated
     * @param {?} updateObject
     * @return {?}
     */
    NDataModelService.prototype.update = /**
     *
     * @param {?} dataModelName Data model name which is to be updated
     * @param {?} updateObject
     * @return {?}
     */
    function (dataModelName, updateObject) {
        if (dataModelName && updateObject) {
            // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}`;
            var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName;
            return this.http.patch(modelNameUrl, updateObject).map(function (value, index) {
                return value;
            }).catch(function (error) {
                return Observable.throw(error);
            });
        }
        else {
            return Observable.throw(new Error("Could not update " + dataModelName + ". " + this.invalidDataModelName));
        }
    };
    // GET /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}
    /**
     *
     * @param dataModelName Data model name which is to be updated
     * @param dataModelId Data model id which is to be updated
     */
    /**
     *
     * @param {?} dataModelName Data model name which is to be updated
     * @param {?} dataModelId Data model id which is to be updated
     * @return {?}
     */
    NDataModelService.prototype.getById = /**
     *
     * @param {?} dataModelName Data model name which is to be updated
     * @param {?} dataModelId Data model id which is to be updated
     * @return {?}
     */
    function (dataModelName, dataModelId) {
        if (dataModelName) {
            if (dataModelId) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                return this.http.get(modelNameUrl).map(function (value, index) {
                    return value;
                }).catch(function (error) {
                    return Observable.throw(error);
                });
            }
            else {
                Observable.throw(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelId));
            }
        }
        else {
            Observable.throw(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelName));
        }
    };
    // DELETE /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}
    /**
     *
     * @param dataModelName Data model name which is to be deleted
     * @param dataModelId Data model id which is to be deleted
     */
    /**
     *
     * @param {?} dataModelName Data model name which is to be deleted
     * @param {?} dataModelId Data model id which is to be deleted
     * @return {?}
     */
    NDataModelService.prototype.deleteById = /**
     *
     * @param {?} dataModelName Data model name which is to be deleted
     * @param {?} dataModelId Data model id which is to be deleted
     * @return {?}
     */
    function (dataModelName, dataModelId) {
        if (dataModelName) {
            if (dataModelId) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                return this.http.delete(modelNameUrl).map(function (value, index) {
                    return value;
                }).catch(function (error) {
                    return Observable.throw(error);
                });
            }
            else {
                Observable.throw(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelId));
            }
        }
        else {
            return Observable.throw(new Error("Could not delete " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelName));
        }
    };
    //PATCH /{tenantName}/datamodel/{datasource}/{appName}/{dataModelName}/{dataModelId}
    /**
     *
     * @param dataModelName Data model name which is to be update
     * @param dataModelId Data model id which is to be updated
     * @param dataModelObj Data Model object which is to be inserted
     */
    /**
     *
     * @param {?} dataModelName Data model name which is to be update
     * @param {?} dataModelId Data model id which is to be updated
     * @param {?} dataModelObj Data Model object which is to be inserted
     * @return {?}
     */
    NDataModelService.prototype.updateById = /**
     *
     * @param {?} dataModelName Data model name which is to be update
     * @param {?} dataModelId Data model id which is to be updated
     * @param {?} dataModelObj Data Model object which is to be inserted
     * @return {?}
     */
    function (dataModelName, dataModelId, dataModelObj) {
        if (dataModelName) {
            if (dataModelId) {
                // const modelNameUrl = `${this.getDataSourceURL(dataModelName)}${dataModelName}/${dataModelId}`;
                var /** @type {?} */ modelNameUrl = this.getDataSourceURL(dataModelName) + dataModelName + "/" + dataModelId;
                var /** @type {?} */ dmObj = Object.assign({}, dataModelObj);
                delete dmObj['_id'];
                return this.http.patch(modelNameUrl, dmObj).map(function (value, index) {
                    return value;
                }).catch(function (error) {
                    return Observable.throw(error);
                });
            }
            else {
                Observable.throw(new Error("Could not get " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelId));
            }
        }
        else {
            return Observable.throw(new Error("Could not delete " + dataModelName + " by id " + dataModelId + ". " + this.invalidDataModelName));
        }
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    NDataModelService.prototype.toQueryString = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var /** @type {?} */ parts = [];
        for (var /** @type {?} */ i in obj) {
            if (obj.hasOwnProperty(i) && this.checkIfValid(obj[i])) {
                parts.push((i) + '=' + JSON.stringify(obj[i]));
            }
        }
        return parts.join('&');
    };
    /**
     * @param {?} value
     * @return {?}
     */
    NDataModelService.prototype.checkIfValid = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === undefined || value == null) {
            return false;
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} dataModelName
     * @return {?}
     */
    NDataModelService.prototype.getDataSourceURL = /**
     * @param {?} dataModelName
     * @return {?}
     */
    function (dataModelName) {
        if (!this.dmDs) {
            this.dmDs = window['neutrinos']['dataSource'];
        }
        var /** @type {?} */ dsDm = this.dmDs[dataModelName];
        var /** @type {?} */ properties = this.systemService.properties;
        if (dsDm) {
            return properties.baseUrl + properties.tenantName + '/datamodel/' + dsDm + '/' + properties.appName + '/';
        }
        else {
            return this.systemService.getDataModelUrl();
        }
    };
    NDataModelService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NDataModelService.ctorParameters = function () { return [
        { type: HttpClient, },
    ]; };
    return NDataModelService;
}());
export { NDataModelService };
function NDataModelService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NDataModelService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NDataModelService.ctorParameters;
    /** @type {?} */
    NDataModelService.prototype.systemService;
    /** @type {?} */
    NDataModelService.prototype.dmUrl;
    /** @type {?} */
    NDataModelService.prototype.invalidDataModelName;
    /** @type {?} */
    NDataModelService.prototype.invalidDataModelId;
    /** @type {?} */
    NDataModelService.prototype.invalidDataModelObj;
    /** @type {?} */
    NDataModelService.prototype.dmDs;
    /** @type {?} */
    NDataModelService.prototype.http;
}

//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NSystemService } from './n-system.service';
import { NLocalStorageService } from './n-localStorage.service';
import * as firebase from 'firebase';
import { NPubSubService } from './n-pubSub.service';
import { HttpClient } from '@angular/common/http';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
var NNotificationService = /** @class */ (function () {
    function NNotificationService(localStorageService, pubSubService, http, bHttpLoader) {
        var _this = this;
        this.localStorageService = localStorageService;
        this.pubSubService = pubSubService;
        this.http = http;
        this.bHttpLoader = bHttpLoader;
        this.systemService = NSystemService.getInstance();
        this.possiblePushTypes = ['APNS', 'FCM'];
        this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');
        this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');
        this.appName = this.systemService.getVal('appName');
        this.deviceType = this.systemService.deviceType;
        this.sessionStorage = new NSessionStorageService();
        this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', function () {
            _this.enableNotification();
        });
    }
    /**
     * @return {?}
     */
    NNotificationService.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    NNotificationService.prototype.enableNotification = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ pushType = this.getPushType(this.systemService.getVal('pushType'));
        document.addEventListener('deviceready', function (event) {
            if (_this.isNotificationEnabled) {
                if (_this.deviceType && _this.deviceType != 'browser') {
                    _this.deviceType = _this.systemService.deviceType;
                    _this.checkPermission(pushType).then(function (res) {
                        if (res) {
                            _this.initializeNotifications(pushType);
                        }
                    });
                }
            }
        });
        if (this.isNotificationEnabled && pushType !== 'APNS') {
            if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {
                this.initialiseWebPush();
            }
        }
    };
    /**
     * @return {?}
     */
    NNotificationService.prototype.initialiseWebPush = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ __this = this;
        var /** @type {?} */ messaging = firebase.messaging();
        messaging.requestPermission()
            .then(function () {
            return messaging.getToken();
        })
            .then(function (token) {
            if (token) {
                __this.sendRegDetails(token);
            }
        })
            .catch(function (err) {
            __this.bHttpLoader.alertError(err);
        });
        messaging.onMessage(function (payload) {
            if (payload['notification']) {
                var /** @type {?} */ notificationObj = payload['notification'];
                var /** @type {?} */ options = {
                    body: notificationObj.body,
                    icon: notificationObj.icon
                };
                // creating a native browser message
                var /** @type {?} */ notificationUI = new Notification(notificationObj.title, options);
                notificationUI.onclick = function () {
                    window.focus(); // window is focused when the user clicks the notification using this
                };
            }
        });
    };
    /**
     * @param {?=} pushType
     * @return {?}
     */
    NNotificationService.prototype.checkPermission = /**
     * @param {?=} pushType
     * @return {?}
     */
    function (pushType) {
        var _this = this;
        // Android & iOS only
        // Checks whether the push notification permission has been granted.
        return new Promise(function (resolve) {
            pushType = _this.getPushType(pushType);
            if ((_this.deviceType === 'Android' || _this.deviceType === 'iOS') && (pushType === 'FCM')) {
                PushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else if (_this.deviceType === 'iOS' && pushType === 'APNS') {
                APNSPushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else {
                return resolve(true);
            }
        });
    };
    /**
     * @param {?=} pushType
     * @return {?}
     */
    NNotificationService.prototype.initializeNotifications = /**
     * @param {?=} pushType
     * @return {?}
     */
    function (pushType) {
        var _this = this;
        //pushType = pushType ? pushType : 'FCM';
        pushType = this.getPushType(pushType);
        var /** @type {?} */ push;
        // Default if for FCM
        if (pushType === 'FCM') {
            push = window['PushNotification'].init({
                android: {
                    senderID: this.firebaseSenderId
                },
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true",
                    senderID: this.firebaseSenderId
                },
            });
        }
        else if (pushType === 'APNS') {
            push = window['APNSPushNotification'].init({
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true"
                }
            });
        }
        push.on('registration', function (data) {
            // data.registrationId
            // data.registrationId
            _this.sendRegDetails(data.registrationId);
        });
        // ToDo Christy get call back function from app user to change what happens once a notification arrives
        push.on('notification', function (data) {
            window['cordova'].plugins.notification.local.schedule({
                title: data.title,
                text: data.message,
                sound: data.sound,
                at: new Date().getTime()
            });
        });
        push.on('error', function (e) {
            // e.message
            console.error(e);
        });
    };
    /**
     * @param {?} registrationId
     * @return {?}
     */
    NNotificationService.prototype.sendRegDetails = /**
     * @param {?} registrationId
     * @return {?}
     */
    function (registrationId) {
        this.localStorageService.setValue('registrationId', registrationId);
        var /** @type {?} */ url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';
        var /** @type {?} */ pushType = this.getPushType(this.systemService.getVal('pushType'));
        this.http.post(url, {
            'key': this.sessionStorage.getValue('userObj')['userKey'],
            'uuid': this.localStorageService.getValue('uuid'),
            'fbregid': registrationId,
            'pushType': pushType
        }).subscribe(function (result) {
            // this.pubSubService.$pub('FBRegComp');
        }, function (error) {
            console.log(error);
        });
    };
    /**
     * @param {?} currPushType
     * @return {?}
     */
    NNotificationService.prototype.getPushType = /**
     * @param {?} currPushType
     * @return {?}
     */
    function (currPushType) {
        var /** @type {?} */ isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());
        var /** @type {?} */ pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';
        return pushType;
    };
    /**
     * @return {?}
     */
    NNotificationService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.loginSubscribe.unSubscribe();
    };
    NNotificationService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NNotificationService.ctorParameters = function () { return [
        { type: NLocalStorageService, },
        { type: NPubSubService, },
        { type: HttpClient, },
        { type: NHTTPLoaderService, },
    ]; };
    return NNotificationService;
}());
export { NNotificationService };
function NNotificationService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NNotificationService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NNotificationService.ctorParameters;
    /** @type {?} */
    NNotificationService.prototype.systemService;
    /** @type {?} */
    NNotificationService.prototype.firebaseSenderId;
    /** @type {?} */
    NNotificationService.prototype.isNotificationEnabled;
    /** @type {?} */
    NNotificationService.prototype.deviceType;
    /** @type {?} */
    NNotificationService.prototype.string;
    /** @type {?} */
    NNotificationService.prototype.resDetails;
    /** @type {?} */
    NNotificationService.prototype.deviceUUID;
    /** @type {?} */
    NNotificationService.prototype.possiblePushTypes;
    /** @type {?} */
    NNotificationService.prototype.loginSubscribe;
    /** @type {?} */
    NNotificationService.prototype.sessionStorage;
    /** @type {?} */
    NNotificationService.prototype.appName;
    /** @type {?} */
    NNotificationService.prototype.localStorageService;
    /** @type {?} */
    NNotificationService.prototype.pubSubService;
    /** @type {?} */
    NNotificationService.prototype.http;
    /** @type {?} */
    NNotificationService.prototype.bHttpLoader;
}

//# sourceMappingURL=data:application/json;base64,
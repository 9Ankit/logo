/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
var /** @type {?} */ ServiceName = "PubSub Service";
var NPubSubService = /** @class */ (function () {
    function NPubSubService() {
        this.events = {};
    }
    /**
     * @param {?} event
     * @param {?=} callback
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */
    NPubSubService.prototype.$sub = /**
     * @param {?} event
     * @param {?=} callback
     * @param {?=} error
     * @param {?=} complete
     * @return {?}
     */
    function (event, callback, error, complete) {
        if (!event) {
            throw new Error("[" + ServiceName + "] => Subscription method must get event name.");
        }
        if (this.events[event] === undefined) {
            this.events[event] = new Subject();
        }
        if (typeof callback !== 'function') {
            return this.events[event].asObservable();
        }
        else {
            return this.events[event].asObservable().subscribe(callback, error, complete);
        }
    };
    /**
     * @param {?} event
     * @param {?=} eventObject
     * @return {?}
     */
    NPubSubService.prototype.$pub = /**
     * @param {?} event
     * @param {?=} eventObject
     * @return {?}
     */
    function (event, eventObject) {
        if (!event) {
            throw new Error("[" + ServiceName + "] => Publish method must get event name.");
        }
        else if (!this.events[event]) {
            return;
        }
        this.events[event].next(eventObject);
    };
    NPubSubService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NPubSubService.ctorParameters = function () { return []; };
    return NPubSubService;
}());
export { NPubSubService };
function NPubSubService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NPubSubService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NPubSubService.ctorParameters;
    /** @type {?} */
    NPubSubService.prototype.events;
}
/**
 * @record
 */
export function IPubSubService() { }
function IPubSubService_tsickle_Closure_declarations() {
    /** @type {?} */
    IPubSubService.prototype.$pub;
    /** @type {?} */
    IPubSubService.prototype.$sub;
    /** @type {?} */
    IPubSubService.prototype.$sub;
    /** @type {?} */
    IPubSubService.prototype.$sub;
    /** @type {?} */
    IPubSubService.prototype.$sub;
}
/**
 * @record
 */
function I$sub() { }
function I$sub_tsickle_Closure_declarations() {
    /* TODO: handle strange member:
    (event: string): Observable<any>;
    */
    /* TODO: handle strange member:
    (event: string, callback: (value: any) => void): Subscription;
    */
    /* TODO: handle strange member:
    (event: string, callback: (value: any) => void, error: (error: any) => void): Subscription;
    */
    /* TODO: handle strange member:
    (event: string, callback: (value: any) => void, error: (error: any) => void, complete: () => void): Subscription;
    */
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1wdWJTdWIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLXB1YlN1Yi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFJdkMscUJBQU0sV0FBVyxHQUFXLGdCQUFnQixDQUFDOztJQU0zQztzQkFGaUIsRUFBRTtLQUVGOzs7Ozs7OztJQU1WLDZCQUFJOzs7Ozs7O2NBQUMsS0FBYSxFQUFFLFFBQStCLEVBQUUsS0FBNEIsRUFBRSxRQUFxQjtRQUMzRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLE1BQUksV0FBVyxrREFBK0MsQ0FBQyxDQUFDO1NBQ25GO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ25DLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQztTQUMzQztRQUVELEVBQUUsQ0FBQyxDQUFDLE9BQU8sUUFBUSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDakMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDNUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ2pGOzs7Ozs7O0lBR0UsNkJBQUk7Ozs7O2NBQUMsS0FBYSxFQUFFLFdBQWlCO1FBQ3hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsTUFBSSxXQUFXLDZDQUEwQyxDQUFDLENBQUM7U0FDOUU7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixNQUFNLENBQUM7U0FDVjtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDOzs7Z0JBaEMxQyxVQUFVOzs7O3lCQVBYOztTQVFhLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcy9TdWJqZWN0JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcy9TdWJzY3JpcHRpb24nO1xuXG5jb25zdCBTZXJ2aWNlTmFtZTogc3RyaW5nID0gXCJQdWJTdWIgU2VydmljZVwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTlB1YlN1YlNlcnZpY2Uge1xuICBwcml2YXRlIGV2ZW50cyA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PjtcbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xuICBwdWJsaWMgJHN1YihldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQsIGVycm9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbiAgcHVibGljICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcjogKGVycm9yOiBhbnkpID0+IHZvaWQsIGNvbXBsZXRlOiAoKSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xuICBwdWJsaWMgJHN1YihldmVudDogc3RyaW5nLCBjYWxsYmFjaz86ICh2YWx1ZTogYW55KSA9PiB2b2lkLCBlcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZT86ICgpID0+IHZvaWQpIHtcbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFske1NlcnZpY2VOYW1lfV0gPT4gU3Vic2NyaXB0aW9uIG1ldGhvZCBtdXN0IGdldCBldmVudCBuYW1lLmApO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5ldmVudHNbZXZlbnRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNbZXZlbnRdLmFzT2JzZXJ2YWJsZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5ldmVudHNbZXZlbnRdLmFzT2JzZXJ2YWJsZSgpLnN1YnNjcmliZShjYWxsYmFjaywgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgIH1cbiAgfVxuXG4gIHB1YmxpYyAkcHViKGV2ZW50OiBzdHJpbmcsIGV2ZW50T2JqZWN0PzogYW55KSB7XG4gICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbJHtTZXJ2aWNlTmFtZX1dID0+IFB1Ymxpc2ggbWV0aG9kIG11c3QgZ2V0IGV2ZW50IG5hbWUuYCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLmV2ZW50c1tldmVudF0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmV2ZW50c1tldmVudF0ubmV4dChldmVudE9iamVjdCk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUHViU3ViU2VydmljZSB7XG4gICRwdWIoZXZlbnQ6IHN0cmluZywgZXZlbnRPYmplY3Q/OiBhbnkpO1xuICAkc3ViKGV2ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XG4gICRzdWIoZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICh2YWx1ZTogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xuICAkc3ViKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgZXJyb3I6IChlcnJvcjogYW55KSA9PiB2b2lkKTogU3Vic2NyaXB0aW9uO1xuICAkc3ViKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgZXJyb3I6IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZTogKCkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbn1cblxuaW50ZXJmYWNlIEkkc3ViIHtcbiAgKGV2ZW50OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT47XG4gIChldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQpOiBTdWJzY3JpcHRpb247XG4gIChldmVudDogc3RyaW5nLCBjYWxsYmFjazogKHZhbHVlOiBhbnkpID0+IHZvaWQsIGVycm9yOiAoZXJyb3I6IGFueSkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbiAgKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiAodmFsdWU6IGFueSkgPT4gdm9pZCwgZXJyb3I6IChlcnJvcjogYW55KSA9PiB2b2lkLCBjb21wbGV0ZTogKCkgPT4gdm9pZCk6IFN1YnNjcmlwdGlvbjtcbn1cbiJdfQ==
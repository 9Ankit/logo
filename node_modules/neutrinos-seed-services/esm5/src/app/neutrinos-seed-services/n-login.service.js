/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable, EventEmitter, Output } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { NSystemService } from './n-system.service';
import { NTokenService } from './n-token.service';
import { NPubSubService } from './n-pubSub.service';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NNotificationService } from './n-notification.service';
import 'rxjs/add/operator/map';
var NLoginService = /** @class */ (function () {
    function NLoginService(http, pubSubService, notificationService, nLocalStorageService, nTokenService) {
        this.http = http;
        this.pubSubService = pubSubService;
        this.notificationService = notificationService;
        this.nLocalStorageService = nLocalStorageService;
        this.nTokenService = nTokenService;
        this.loginCompleted = new EventEmitter();
        this.systemService = NSystemService.getInstance();
        // this.nTokenService = new NTokenService();
        this.nSessionStorage = new NSessionStorageService();
        // this.nLocalStorageService = new NLocalStorageService();
    }
    /**
     * @param {?} userName
     * @param {?} password
     * @param {?=} isRemember
     * @return {?}
     */
    NLoginService.prototype.login = /**
     * @param {?} userName
     * @param {?} password
     * @param {?=} isRemember
     * @return {?}
     */
    function (userName, password, isRemember) {
        var _this = this;
        this.appProperties = this.systemService.getVal('properties');
        this.loginUrl = this.systemService.getAuthUrl() + this.appProperties.appName;
        this.uuid = this.nLocalStorageService.getValue('uuid');
        if (!this.uuid) {
            this.uuid = this.nLocalStorageService.checkDeviceId();
        }
        this.details = {
            username: userName,
            password: password,
        };
        this.details.platformDetails = this.systemService.getPlatformDetails(this.systemService.checkDevice());
        this.details.platformDetails['uuid'] = this.uuid;
        return this.http.post(this.loginUrl, JSON.stringify(this.details)).map(function (result) {
            var /** @type {?} */ tokensObj = result;
            if (tokensObj) {
                _this.nTokenService.updateTokens(tokensObj, isRemember);
            }
            // TODO chris array of supported pushes currently only support APNS and Firebase
            if ((_this.systemService.getVal('firebaseSenderId') != 'FIREBASE_SENDER_ID' && _this.systemService.getVal('firebaseAuthKey') != 'FIREBASE_AUTH_KEY')
                || (_this.systemService.getVal('pushType') === 'APNS' && _this.systemService.isIOS())) {
                _this.pubSubService.$pub('firebaseRegister');
            }
            _this.pubSubService.$pub('loginComplete');
            return (result);
        }, function (error) {
            return (error);
        });
    };
    /**
     * @return {?}
     */
    NLoginService.prototype.isLoggedIn = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.nLocalStorageService.initStorage().then(function (result) {
            if (_this.nSessionStorage.getValue('accessToken') && _this.nSessionStorage.getValue('refreshToken') &&
                _this.nSessionStorage.getValue('accessToken') != 'null' && _this.nSessionStorage.getValue('refreshToken') != 'null') {
                return true;
            }
            return false;
        }).catch(function (error) {
            return false;
        });
    };
    NLoginService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NLoginService.ctorParameters = function () { return [
        { type: HttpClient, },
        { type: NPubSubService, },
        { type: NNotificationService, },
        { type: NLocalStorageService, },
        { type: NTokenService, },
    ]; };
    NLoginService.propDecorators = {
        "loginCompleted": [{ type: Output },],
    };
    return NLoginService;
}());
export { NLoginService };
function NLoginService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NLoginService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NLoginService.ctorParameters;
    /** @type {!Object<string,!Array<{type: !Function, args: (undefined|!Array<?>)}>>} */
    NLoginService.propDecorators;
    /** @type {?} */
    NLoginService.prototype.loginUrl;
    /** @type {?} */
    NLoginService.prototype.appProperties;
    /** @type {?} */
    NLoginService.prototype.systemService;
    /** @type {?} */
    NLoginService.prototype.nSessionStorage;
    /** @type {?} */
    NLoginService.prototype.uuid;
    /** @type {?} */
    NLoginService.prototype.details;
    /** @type {?} */
    NLoginService.prototype.loginCompleted;
    /** @type {?} */
    NLoginService.prototype.http;
    /** @type {?} */
    NLoginService.prototype.pubSubService;
    /** @type {?} */
    NLoginService.prototype.notificationService;
    /** @type {?} */
    NLoginService.prototype.nLocalStorageService;
    /** @type {?} */
    NLoginService.prototype.nTokenService;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1sb2dpbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tbG9naW4uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLHVCQUF1QixDQUFDOztJQWM3Qix1QkFBb0IsSUFBZ0IsRUFBVSxhQUE2QixFQUFVLG1CQUF5QyxFQUNwSCxzQkFBb0QsYUFBNEI7UUFEdEUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFnQjtRQUFVLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBc0I7UUFDcEgseUJBQW9CLEdBQXBCLG9CQUFvQjtRQUFnQyxrQkFBYSxHQUFiLGFBQWEsQ0FBZTs4QkFGL0QsSUFBSSxZQUFZLEVBQUU7UUFHM0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUM7O1FBRWxELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxzQkFBc0IsRUFBRSxDQUFDOztLQUVyRDs7Ozs7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QUFDO2FBQ2I7WUFDRCxNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFBLEtBQUs7WUFDWixNQUFNLENBQUMsS0FBSyxDQUFDO1NBQ2QsQ0FBQyxDQUFDO0tBRUo7O2dCQTVERixVQUFVOzs7O2dCQVhGLFVBQVU7Z0JBR1YsY0FBYztnQkFHZCxvQkFBb0I7Z0JBRHBCLG9CQUFvQjtnQkFIcEIsYUFBYTs7O21DQWtCbkIsTUFBTTs7d0JBckJUOztTQWFhLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBFdmVudEVtaXR0ZXIsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IE5Ub2tlblNlcnZpY2UgfSBmcm9tICcuL24tdG9rZW4uc2VydmljZSc7XG5pbXBvcnQgeyBOUHViU3ViU2VydmljZSB9IGZyb20gJy4vbi1wdWJTdWIuc2VydmljZSc7XG5pbXBvcnQgeyBOU2Vzc2lvblN0b3JhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9uLXNlc3Npb25TdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkxvY2FsU3RvcmFnZVNlcnZpY2UgfSBmcm9tICcuL24tbG9jYWxTdG9yYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTk5vdGlmaWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL24tbm90aWZpY2F0aW9uLnNlcnZpY2UnO1xuaW1wb3J0ICdyeGpzL2FkZC9vcGVyYXRvci9tYXAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzL09ic2VydmFibGVcIjtcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTkxvZ2luU2VydmljZSB7XG4gIGxvZ2luVXJsO1xuICBhcHBQcm9wZXJ0aWVzO1xuICBzeXN0ZW1TZXJ2aWNlO1xuICBuU2Vzc2lvblN0b3JhZ2U7XG4gIHV1aWQ7XG4gIGRldGFpbHM6IGFueTtcblxuICBAT3V0cHV0KCkgbG9naW5Db21wbGV0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBwdWJTdWJTZXJ2aWNlOiBOUHViU3ViU2VydmljZSwgcHJpdmF0ZSBub3RpZmljYXRpb25TZXJ2aWNlOiBOTm90aWZpY2F0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIG5Mb2NhbFN0b3JhZ2VTZXJ2aWNlOiBOTG9jYWxTdG9yYWdlU2VydmljZSwgcHJpdmF0ZSBuVG9rZW5TZXJ2aWNlOiBOVG9rZW5TZXJ2aWNlKSB7XG4gICAgdGhpcy5zeXN0ZW1TZXJ2aWNlID0gTlN5c3RlbVNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcbiAgICAvLyB0aGlzLm5Ub2tlblNlcnZpY2UgPSBuZXcgTlRva2VuU2VydmljZSgpO1xuICAgIHRoaXMublNlc3Npb25TdG9yYWdlID0gbmV3IE5TZXNzaW9uU3RvcmFnZVNlcnZpY2UoKTtcbiAgICAvLyB0aGlzLm5Mb2NhbFN0b3JhZ2VTZXJ2aWNlID0gbmV3IE5Mb2NhbFN0b3JhZ2VTZXJ2aWNlKCk7XG4gIH1cblxuXG4gIGxvZ2luKHVzZXJOYW1lLCBwYXNzd29yZCwgaXNSZW1lbWJlcj8pIHtcbiAgICB0aGlzLmFwcFByb3BlcnRpZXMgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0VmFsKCdwcm9wZXJ0aWVzJyk7XG4gICAgdGhpcy5sb2dpblVybCA9IHRoaXMuc3lzdGVtU2VydmljZS5nZXRBdXRoVXJsKCkgKyB0aGlzLmFwcFByb3BlcnRpZXMuYXBwTmFtZTtcbiAgICB0aGlzLnV1aWQgPSB0aGlzLm5Mb2NhbFN0b3JhZ2VTZXJ2aWNlLmdldFZhbHVlKCd1dWlkJyk7XG4gICAgaWYgKCF0aGlzLnV1aWQpIHtcbiAgICAgIHRoaXMudXVpZCA9IHRoaXMubkxvY2FsU3RvcmFnZVNlcnZpY2UuY2hlY2tEZXZpY2VJZCgpO1xuICAgIH1cbiAgICB0aGlzLmRldGFpbHMgPSB7XG4gICAgICB1c2VybmFtZTogdXNlck5hbWUsXG4gICAgICBwYXNzd29yZDogcGFzc3dvcmQsXG4gICAgfTtcbiAgICB0aGlzLmRldGFpbHMucGxhdGZvcm1EZXRhaWxzID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFBsYXRmb3JtRGV0YWlscyh0aGlzLnN5c3RlbVNlcnZpY2UuY2hlY2tEZXZpY2UoKSk7XG4gICAgdGhpcy5kZXRhaWxzLnBsYXRmb3JtRGV0YWlsc1sndXVpZCddID0gdGhpcy51dWlkO1xuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLmxvZ2luVXJsLCBKU09OLnN0cmluZ2lmeSh0aGlzLmRldGFpbHMpKS5tYXAocmVzdWx0ID0+IHtcbiAgICAgIGNvbnN0IHRva2Vuc09iaiA9IHJlc3VsdDtcbiAgICAgIGlmICh0b2tlbnNPYmopIHtcbiAgICAgICAgdGhpcy5uVG9rZW5TZXJ2aWNlLnVwZGF0ZVRva2Vucyh0b2tlbnNPYmosIGlzUmVtZW1iZXIpO1xuICAgICAgfVxuICAgICAgLy8gVE9ETyBjaHJpcyBhcnJheSBvZiBzdXBwb3J0ZWQgcHVzaGVzIGN1cnJlbnRseSBvbmx5IHN1cHBvcnQgQVBOUyBhbmQgRmlyZWJhc2VcbiAgICAgIGlmICgodGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgnZmlyZWJhc2VTZW5kZXJJZCcpICE9ICdGSVJFQkFTRV9TRU5ERVJfSUQnICYmIHRoaXMuc3lzdGVtU2VydmljZS5nZXRWYWwoJ2ZpcmViYXNlQXV0aEtleScpICE9ICdGSVJFQkFTRV9BVVRIX0tFWScpIFxuICAgICAgICAgICB8fCAodGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgncHVzaFR5cGUnKSA9PT0gJ0FQTlMnICYmIHRoaXMuc3lzdGVtU2VydmljZS5pc0lPUygpKSkge1xuICAgICAgICB0aGlzLnB1YlN1YlNlcnZpY2UuJHB1YignZmlyZWJhc2VSZWdpc3RlcicpO1xuICAgICAgfVxuICAgICAgdGhpcy5wdWJTdWJTZXJ2aWNlLiRwdWIoJ2xvZ2luQ29tcGxldGUnKTtcbiAgICAgIHJldHVybiAocmVzdWx0KTtcbiAgICB9LCBlcnJvciA9PiB7XG4gICAgICByZXR1cm4gKGVycm9yKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzTG9nZ2VkSW4oKSB7XG4gICAgcmV0dXJuIHRoaXMubkxvY2FsU3RvcmFnZVNlcnZpY2UuaW5pdFN0b3JhZ2UoKS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICBpZiAodGhpcy5uU2Vzc2lvblN0b3JhZ2UuZ2V0VmFsdWUoJ2FjY2Vzc1Rva2VuJykgJiYgdGhpcy5uU2Vzc2lvblN0b3JhZ2UuZ2V0VmFsdWUoJ3JlZnJlc2hUb2tlbicpICYmXG4gICAgICAgIHRoaXMublNlc3Npb25TdG9yYWdlLmdldFZhbHVlKCdhY2Nlc3NUb2tlbicpICE9ICdudWxsJyAmJiB0aGlzLm5TZXNzaW9uU3RvcmFnZS5nZXRWYWx1ZSgncmVmcmVzaFRva2VuJykgIT0gJ251bGwnKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcblxuICB9XG59XG4iXX0=
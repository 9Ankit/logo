/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { NSystemService } from './n-system.service';
import { Injectable } from '@angular/core';
import { NgForage, NgForageCache, NgForageConfig } from 'ngforage';
import { NUtility } from './n-util.service';
var NLocalStorageService = /** @class */ (function () {
    function NLocalStorageService(ngfConfig, ngf, ngfCache) {
        this.ngfConfig = ngfConfig;
        this.ngf = ngf;
        this.ngfCache = ngfCache;
        this.storageCache = {};
    }
    /**
     * @return {?}
     */
    NLocalStorageService.prototype.initStorage = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova']) {
                _this.initNgForage();
            }
            _this.ngf.iterate(function (value, key, iteratonNumber) {
                _this.storageCache[key] = value;
            }).then(function (result) {
                _this.checkDeviceId();
                return resolve('iteration is completed');
            }).catch(function (error) {
                return reject(error);
            });
        });
    };
    /**
     * @return {?}
     */
    NLocalStorageService.prototype.getStorage = /**
     * @return {?}
     */
    function () {
        return this.storageCache;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    NLocalStorageService.prototype.setValue = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (window['cordova']) {
            this.initNgForage();
        }
        this.storageCache[key] = value;
        return this.ngf.setItem(key, value).then(function (result) {
            return result;
        }, function (error) {
            console.log(error);
        });
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NLocalStorageService.prototype.getValue = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (!this.storageCache[key]) {
            return null;
        }
        try {
            var /** @type {?} */ obj = this.storageCache[key];
            return JSON.parse(obj);
        }
        catch (/** @type {?} */ error) {
            return this.storageCache[key];
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NLocalStorageService.prototype.remove = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        delete this.storageCache[key];
        if (window['cordova']) {
            this.initNgForage();
        }
        this.ngf.removeItem(key).then(function (fulfilled) {
            delete _this.ngf[key];
        }).catch(function (error) {
            console.error('Could not remove', key);
        });
    };
    /**
     * @return {?}
     */
    NLocalStorageService.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.storageCache = {};
        this.ngf.clear();
    };
    /**
     * @return {?}
     */
    NLocalStorageService.prototype.pluginCheck = /**
     * @return {?}
     */
    function () {
        if (window['cordova'] && window['NativeStorage']) {
            this.nativeStorageI = window['NativeStorage'];
            // return true;
        }
        // this.initStorage();
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NLocalStorageService.prototype.getItemNs = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova'] && window['NativeStorage']) {
                _this.nativeStorageI.getItem(key, function (result) {
                    resolve(result);
                }, function (error) {
                    reject(error);
                });
            }
        });
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    NLocalStorageService.prototype.setItemNs = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova'] && window['NativeStorage']) {
                _this.nativeStorageI.setItem(key, value, function (result) {
                    resolve(result);
                }, function (error) {
                    reject(error);
                });
            }
        });
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NLocalStorageService.prototype.removeItemNs = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova'] && window['NativeStorage']) {
                _this.nativeStorageI.remove(key, function (result) {
                    resolve(result);
                }, function (error) {
                    reject(error);
                });
            }
        });
    };
    /**
     * @return {?}
     */
    NLocalStorageService.prototype.clearNs = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova'] && window['NativeStorage']) {
                _this.nativeStorageI.clear(function (result) {
                    resolve(result);
                }, function (error) {
                    reject(error);
                });
            }
        });
    };
    /**
     * @return {?}
     */
    NLocalStorageService.prototype.initNgForage = /**
     * @return {?}
     */
    function () {
        this.ngfConfig.configure({
            name: 'MyApp',
            driver: [
                NgForageConfig.DRIVER_WEBSQL,
            ]
        });
    };
    /**
     * @param {?} promise
     * @return {?}
     */
    NLocalStorageService.prototype.promiseReflect = /**
     * @param {?} promise
     * @return {?}
     */
    function (promise) {
        return promise.then(function (resolved) { return { v: resolved, status: 'resolved' }; }, function (error) { return { e: error, status: 'rejected' }; });
    };
    /**
     * @return {?}
     */
    NLocalStorageService.prototype.clearLocalStorage = /**
     * @return {?}
     */
    function () {
        this.remove('userObj');
        this.remove('accessToken');
        this.remove('refreshToken');
        this.remove('registrationId');
    };
    /**
     * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
    */
    /**
     * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
     * @return {?}
     */
    NLocalStorageService.prototype.checkDeviceId = /**
     * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
     * @return {?}
     */
    function () {
        var _this = this;
        if (NSystemService.getInstance().checkDevice() === 'browser') {
            this._deviceUUID = this.getValue('uuid');
            if (!this._deviceUUID) {
                this._deviceUUID = new NUtility().generateUUID();
                this.setValue('uuid', this._deviceUUID);
            }
        }
        else {
            window['plugins'].uniqueDeviceID.get(function (uuid) {
                _this._deviceUUID = uuid;
                _this.setValue('uuid', _this._deviceUUID);
            });
        }
        return this._deviceUUID;
    };
    Object.defineProperty(NLocalStorageService.prototype, "deviceUUID", {
        get: /**
         * @return {?}
         */
        function () {
            return this._deviceUUID;
        },
        enumerable: true,
        configurable: true
    });
    NLocalStorageService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    NLocalStorageService.ctorParameters = function () { return [
        { type: NgForageConfig, },
        { type: NgForage, },
        { type: NgForageCache, },
    ]; };
    return NLocalStorageService;
}());
export { NLocalStorageService };
function NLocalStorageService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    NLocalStorageService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    NLocalStorageService.ctorParameters;
    /** @type {?} */
    NLocalStorageService.prototype.storageCache;
    /** @type {?} */
    NLocalStorageService.prototype._deviceUUID;
    /** @type {?} */
    NLocalStorageService.prototype.nativeStorageI;
    /** @type {?} */
    NLocalStorageService.prototype.ngfConfig;
    /** @type {?} */
    NLocalStorageService.prototype.ngf;
    /** @type {?} */
    NLocalStorageService.prototype.ngfCache;
}

//# sourceMappingURL=data:application/json;base64,